<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>a</title>
    <link href="/2024/01/06/a/"/>
    <url>/2024/01/06/a/</url>
    
    <content type="html"><![CDATA[<p>s大大大大苏打</p><p>大大实a’s’daasdasd打实的</p><p> 大大撒旦</p><p>dadasd</p><p>大苏打的</p><p>d大大是</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CameraX实时预览+拍照</title>
    <link href="/2023/05/26/CameraX%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88-%E6%8B%8D%E7%85%A7/"/>
    <url>/2023/05/26/CameraX%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88-%E6%8B%8D%E7%85%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="预览-图片拍摄"><a href="#预览-图片拍摄" class="headerlink" title="预览+图片拍摄"></a>预览+图片拍摄</h1><h2 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h2><p>1.编辑<code>activity_main</code> layout 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/camera_capture_button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:scaleType</span>=<span class="hljs-string">&quot;fitCenter&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Take Photo&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:elevation</span>=<span class="hljs-string">&quot;2dp&quot;</span> /&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.camera.view.PreviewView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/viewFinder&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-请求-CameraProvider"><a href="#1-请求-CameraProvider" class="headerlink" title="1.请求 CameraProvider"></a>1.请求 CameraProvider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ListenableFuture&lt;ProcessCameraProvider&gt; cameraProviderFuture = ProcessCameraProvider.getInstance(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h3 id="2-检查-CameraProvider-可用性"><a href="#2-检查-CameraProvider-可用性" class="headerlink" title="2.检查 CameraProvider 可用性"></a>2.检查 CameraProvider 可用性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">cameraProviderFuture.addListener(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 将你的相机和当前生命周期的所有者绑定所需的对象</span><br>        <span class="hljs-type">ProcessCameraProvider</span> <span class="hljs-variable">cameraProvider</span> <span class="hljs-operator">=</span> cameraProviderFuture.get();<br>        <span class="hljs-comment">//绑定相机，具体代码见下面部分</span><br>        bindPreview(cameraProvider);<br>    &#125; <span class="hljs-keyword">catch</span> (ExecutionException | InterruptedException e) &#123;<br>        <span class="hljs-comment">// No errors need to be handled for this Future.</span><br>        <span class="hljs-comment">// This should never be reached.</span><br>    &#125;<br>&#125;, ContextCompat.getMainExecutor(<span class="hljs-built_in">this</span>));<br></code></pre></td></tr></table></figure><h3 id="3-选择相机并绑定生命周期和用例"><a href="#3-选择相机并绑定生命周期和用例" class="headerlink" title="3.选择相机并绑定生命周期和用例"></a>3.选择相机并绑定生命周期和用例</h3><ol><li>创建 <code>Preview</code>。</li><li>指定所需的相机 <code>LensFacing</code> 选项。</li><li>将所选相机和任意用例绑定到生命周期。</li><li>将 <code>Preview</code> 连接到 <code>PreviewView</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">bindPreview</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ProcessCameraProvider cameraProvider)</span> &#123;<br>    <br>    <span class="hljs-comment">//创建一个Preview 实例，并设置该实例的 surface 提供者（provider）。</span><br>    <span class="hljs-type">Preview</span> <span class="hljs-variable">preview</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Preview</span>.Builder().build();<br>    <span class="hljs-type">PreviewView</span> <span class="hljs-variable">previewView</span> <span class="hljs-operator">=</span> (PreviewView)findViewById(R.id.viewFinder);<br>    preview.setSurfaceProvider(previewView.getSurfaceProvider());<br>    <br>    <span class="hljs-comment">//选择默认的摄像头（后置/前置）</span><br>    <span class="hljs-type">CameraSelector</span> <span class="hljs-variable">cameraSelector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CameraSelector</span>.Builder()<br>            .requireLensFacing(CameraSelector.LENS_FACING_BACK)<br>            .build();<br><br>    <span class="hljs-comment">// 重新绑定用例前先解绑</span><br>processCameraProvider.unbindAll();<br>    <span class="hljs-comment">// 绑定用例至相机</span><br>    <span class="hljs-type">Camera</span> <span class="hljs-variable">camera</span> <span class="hljs-operator">=</span> cameraProvider.bindToLifecycle((LifecycleOwner)<span class="hljs-built_in">this</span>, cameraSelector, preview);<br>&#125;<br></code></pre></td></tr></table></figure><p>到此为止：如何实现实时预览已经说明完毕。</p><h2 id="图片拍摄："><a href="#图片拍摄：" class="headerlink" title="图片拍摄："></a>图片拍摄：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建拍照所需的实例</span><br>          imageCapture = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageCapture</span>.Builder().setTargetRotation(mViewFinder.getDisplay().getRotation()).build();<br><br><br></code></pre></td></tr></table></figure><ul><li>首先，检查 <code>imageCapture</code> 对象是否已经实例化，以避免空指针异常。</li><li>创建一个带时间戳的输出文件，用于保存照片，确保文件名的唯一性。</li><li>创建 <code>OutputFileOptions</code> 对象，用于指定照片的输出方式。</li><li>调用 <code>takePicture()</code> 方法进行拍照操作，传入输出文件选项和保存照片的回调函数。</li><li>在保存照片的回调函数中，可以获取保存的照片的 <code>Uri</code>，显示成功的提示消息，并将消息打印到日志中。</li><li>如果在保存照片时发生错误，会在回调函数的 <code>onError()</code> 方法中进行处理，打印错误消息到日志中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">.  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拍照，并保存照片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023/5/23 14:09</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">takePhoto</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 确保imageCapture 已经被实例化, 否则程序将可能崩溃</span><br>        <span class="hljs-keyword">if</span> (imageCapture != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 创建带时间戳的输出文件以保存图片，带时间戳是为了保证文件名唯一</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">photoFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outputDirectory,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(Configuration.FILENAME_FORMAT,<br>                            Locale.SIMPLIFIED_CHINESE).format(System.currentTimeMillis())<br>                            + <span class="hljs-string">&quot;.jpg&quot;</span>);<br><br>            <span class="hljs-comment">// 创建 output option 对象，用以指定照片的输出方式</span><br>            ImageCapture.<span class="hljs-type">OutputFileOptions</span> <span class="hljs-variable">outputFileOptions</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageCapture</span>.OutputFileOptions<br>                    .Builder(photoFile)<br>                    .build();<br><br>            <span class="hljs-comment">// 执行takePicture（拍照）方法</span><br>            imageCapture.takePicture(outputFileOptions,<br>                    ContextCompat.getMainExecutor(<span class="hljs-built_in">this</span>),<br>                    <span class="hljs-comment">// 保存照片时的回调</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageCapture</span>.OnImageSavedCallback() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onImageSaved</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ImageCapture.OutputFileResults outputFileResults)</span> &#123;<br>                            <span class="hljs-type">Uri</span> <span class="hljs-variable">savedUri</span> <span class="hljs-operator">=</span> Uri.fromFile(photoFile);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;照片捕获成功! &quot;</span> + savedUri;<br>                            Toast.makeText(getBaseContext(), msg, Toast.LENGTH_SHORT).show();<br>                            Log.d(Configuration.TAG, msg);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ImageCaptureException exception)</span> &#123;<br>                            Log.e(Configuration.TAG, <span class="hljs-string">&quot;Photo capture failed: &quot;</span> + exception.getMessage());<br>                        &#125;<br>                    &#125;);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="特殊功能实现："><a href="#特殊功能实现：" class="headerlink" title="特殊功能实现："></a>特殊功能实现：</h2><h4 id="前后摄像头的切换"><a href="#前后摄像头的切换" class="headerlink" title="前后摄像头的切换"></a>前后摄像头的切换</h4><p>我们之前使用<code>cameraProvider.bindToLifecycle()</code>的时候，有一个参数是<code>CameraSelector</code>。<br><code>CameraX</code>默认给我们提供了前置摄像头和后置摄像头的<code>CameraSelector</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择默认的摄像头（后置/前置）</span><br> <span class="hljs-type">CameraSelector</span> <span class="hljs-variable">cameraSelector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CameraSelector</span>.Builder()<br>         .requireLensFacing(CameraSelector.LENS_FACING_BACK)<br>         .build();<br></code></pre></td></tr></table></figure><p>切换摄像头的时候，就是重新调用一下<code>bindPreview</code>方法，传入新的<code>cameraSelector</code>值就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//解除所有绑定，防止CameraProvider重复绑定到Lifecycle发生异常</span><br>processCameraProvider.unbindAll();<br>   <span class="hljs-comment">// 绑定用例至相机</span><br>   <span class="hljs-type">Camera</span> <span class="hljs-variable">camera</span> <span class="hljs-operator">=</span> cameraProvider.bindToLifecycle((LifecycleOwner)<span class="hljs-built_in">this</span>, cameraSelector, preview);<br></code></pre></td></tr></table></figure><h4 id="手势放大缩小"><a href="#手势放大缩小" class="headerlink" title="手势放大缩小"></a>手势放大缩小</h4><p>这里使用<code>ScaleGestureDetector</code>类来实现手势缩放功能。</p><p><code>ScaleGestureDetector</code>用于处理缩放的工具类，用法与GestureDetector类似，都是通过onTouchEvent()关联相应的MotionEvent的。使用该类时，用户需要传入一个完整的连续不断地motion事件（包含ACTION_DOWN,ACTION_MOVE和ACTION_UP事件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">scaleGestureDetector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScaleGestureDetector</span>(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScaleGestureDetector</span>. OnScaleGestureListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onScale</span><span class="hljs-params">(ScaleGestureDetector detector)</span> &#123;<br>        <span class="hljs-comment">//你可以根据缩放手势的因子来执行适当的操作。当前的代码中，我们返回了 true，表示我们处理了                     缩放操作，并消费了该事件。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onScaleBegin</span><span class="hljs-params">(ScaleGestureDetector detector)</span> &#123;<br>    <span class="hljs-comment">//返回true，你可以执行一些准备工作，或者返回 false 来指示不处理缩放操作。一般都设为true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onScaleEnd</span><span class="hljs-params">(ScaleGestureDetector detector)</span> &#123;<br>    <span class="hljs-comment">//这里是缩放结束后做的操作，具体的使用效果可以参考微信，你把图片缩小之后（80%），你松手，图片会回               弹到原来的大小。 </span><br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li>在该方法中，我们首先获取缩放因子 <code>scaleFactor</code>，它表示缩放手势的影响因子。</li><li>我们获取当前的缩放状态，然后获取当前的缩放比例</li><li>我们获取新的缩放级别。<code>Math.max()</code> 和 <code>Math.min()</code> 方法来限制缩放级别在最小值和最大值之间</li><li>将新的缩放级别应用到相机控制器中，并打印出当前的缩放比例。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onScale</span><span class="hljs-params">(ScaleGestureDetector detector)</span> &#123;<br>    <span class="hljs-comment">//缩放级别的影响因子</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">scaleFactor</span> <span class="hljs-operator">=</span> detector.getScaleFactor();<br>    LiveData&lt;ZoomState&gt; zoomState = mCameraInfo.getZoomState();<br>    <span class="hljs-comment">//返回当前缩放比例</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">zoomRatio</span> <span class="hljs-operator">=</span> zoomState.getValue().getZoomRatio();<br>    <span class="hljs-type">float</span> <span class="hljs-variable">minZoomRatio</span> <span class="hljs-operator">=</span> zoomState.getValue().getMinZoomRatio();<br>    <span class="hljs-type">float</span> <span class="hljs-variable">maxZoomRatio</span> <span class="hljs-operator">=</span> zoomState.getValue().getMaxZoomRatio();<br>    <span class="hljs-comment">//根据缩放手势的因子调整缩放级别</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">newZoomLevel</span> <span class="hljs-operator">=</span> zoomRatio * scaleFactor;<br>    <span class="hljs-comment">//限制缩放级别在最小值和最大值之间</span><br>    newZoomLevel = Math.max(<span class="hljs-number">1.0f</span>, Math.min(newZoomLevel, <span class="hljs-number">10</span>));<br><br>     mCameraControl.setZoomRatio(newZoomLevel);<br>     Log.d(TAG, <span class="hljs-string">&quot;当前缩放比例: &quot;</span> + newZoomLevel);<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="点击手动对焦"><a href="#点击手动对焦" class="headerlink" title="点击手动对焦"></a>点击手动对焦</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">mGestureDetector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GestureDetector</span>(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">GestureDetector</span>. SimpleOnGestureListener() &#123;<br>         <span class="hljs-comment">//点击</span><br>         <span class="hljs-meta">@SuppressLint(&quot;RestrictedApi&quot;)</span><br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onSingleTapUp</span><span class="hljs-params">(MotionEvent e)</span> &#123;<br>             <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> e.getX();<br>             <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> e.getY();<br>             <span class="hljs-type">MeteringPointFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> mViewFinder.getMeteringPointFactory();<br>             <span class="hljs-type">MeteringPoint</span> <span class="hljs-variable">point</span> <span class="hljs-operator">=</span> factory.createPoint(x, y);<br>             <span class="hljs-type">FocusMeteringAction</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FocusMeteringAction</span>.Builder(point, FocusMeteringAction.FLAG_AF).build();<br>             <span class="hljs-comment">//启动对焦和测光</span><br>             ListenableFuture&lt;FocusMeteringResult&gt; focusMeteringResultListenableFuture = mCameraControl.startFocusAndMetering(action);<br>             focusMeteringResultListenableFuture.addListener(() -&gt; &#123;<br>                 <span class="hljs-keyword">try</span> &#123;<br>                     <span class="hljs-type">FocusMeteringResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> focusMeteringResultListenableFuture.get();<br>                     <span class="hljs-keyword">if</span> (result.isFocusSuccessful()) &#123;<br>                         Log.d(TAG, <span class="hljs-string">&quot;对焦成功&quot;</span>);<br><br>                         runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                             <span class="hljs-meta">@Override</span><br>                             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                 <span class="hljs-comment">//自定义矩形方框，对焦成功显示</span><br>                                 customBoxView.setBoxPosition(x, y);<br>                                 <span class="hljs-comment">//这是toast显示对焦成功</span><br>                                 showFocusSuccessToast();<br>                             &#125;<br>                         &#125;);<br><br>                     &#125; <span class="hljs-keyword">else</span> &#123;<br>                         Log.d(TAG, <span class="hljs-string">&quot;对焦失败&quot;</span>);<br>                         showFocusFailedToast();<br>                     &#125;<br>                 &#125; <span class="hljs-keyword">catch</span> (ExecutionException | InterruptedException ex) &#123;<br>                     Log.e(<span class="hljs-string">&quot;YourCameraActivity&quot;</span>, <span class="hljs-string">&quot;对焦操作失败: &quot;</span> + ex.getMessage());<br>                 &#125;<br>             &#125;, CameraXExecutors.directExecutor());<br><br><br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         &#125;<br><br>     &#125;);<br></code></pre></td></tr></table></figure><p>为 <code>mViewFinder</code> 设置了一个触摸监听器，并在触摸事件中调用了 <code>scaleGestureDetector</code> 和 <code>mGestureDetector</code> 的对应方法。<code>scaleGestureDetector.onTouchEvent(event)</code> 是用于处理缩放手势的触摸事件，它将触摸事件传递给 <code>scaleGestureDetector</code> 对象来处理缩放操作。<code>mGestureDetector.onTouchEvent(event)</code> 是用于处理其他手势的触摸事件，它将触摸事件传递给 <code>mGestureDetector</code> 对象来处理其他手势操作，比如单击操作或者双击等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">mViewFinder = (PreviewView) findViewById(R.id.viewFinder); <br>mViewFinder.setOnTouchListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnTouchListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouch</span><span class="hljs-params">(View v, MotionEvent event)</span> &#123;<br>                    scaleGestureDetector.onTouchEvent(event);<br>                    mGestureDetector.onTouchEvent(event);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;);<br></code></pre></td></tr></table></figure><h4 id="手机紧急晃动拍照"><a href="#手机紧急晃动拍照" class="headerlink" title="手机紧急晃动拍照"></a>手机紧急晃动拍照</h4><p>使用加速度传感器（Accelerometer Sensor）来检测手机的晃动，并在达到一定阈值时触发拍照操作。</p><ol><li>注册加速度传感器监听</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SensorManager</span> <span class="hljs-variable">sensorManager</span> <span class="hljs-operator">=</span> (SensorManager) getSystemService(Context.SENSOR_SERVICE);<br><span class="hljs-type">Sensor</span> <span class="hljs-variable">accelerometerSensor</span> <span class="hljs-operator">=</span> sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);<br><br>sensorManager.registerListener(sensorEventListener, accelerometerSensor, SensorManager.SENSOR_DELAY_NORMAL);<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个 SensorEventListener 对象，并实现其 onSensorChanged() 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">SensorEventListener</span> <span class="hljs-variable">sensorEventListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorEventListener</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">SHAKE_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.5f</span>; <span class="hljs-comment">// 设置晃动的阈值</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> lastX;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> lastY;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> lastZ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastShakeTime;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSensorChanged</span><span class="hljs-params">(SensorEvent event)</span> &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> event.values[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> event.values[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">float</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> event.values[<span class="hljs-number">2</span>];<br><br>        <span class="hljs-comment">// 计算加速度的变化量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">deltaX</span> <span class="hljs-operator">=</span> x - lastX;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">deltaY</span> <span class="hljs-operator">=</span> y - lastY;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">deltaZ</span> <span class="hljs-operator">=</span> z - lastZ;<br><br>        <span class="hljs-comment">// 更新上一次的加速度值</span><br>        lastX = x;<br>        lastY = y;<br>        lastZ = z;<br><br>        <span class="hljs-comment">// 计算当前加速度的模</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">acceleration</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);<br><br>        <span class="hljs-comment">// 判断是否达到晃动阈值</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">if</span> (acceleration &gt; SHAKE_THRESHOLD &amp;&amp; currentTime - lastShakeTime &gt; <span class="hljs-number">1000</span>) &#123;<br>            <span class="hljs-comment">// 触发拍照操作</span><br>            takePhoto();<br>            lastShakeTime = currentTime;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAccuracyChanged</span><span class="hljs-params">(Sensor sensor, <span class="hljs-type">int</span> accuracy)</span> &#123;<br>        <span class="hljs-comment">// 当传感器的精度发生变化时触发，不需要处理</span><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>销毁监听</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onDestroy();<br>    sensorManager.unregisterListener(sensorEventListener);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="给拍照图片加水印"><a href="#给拍照图片加水印" class="headerlink" title="给拍照图片加水印"></a>给拍照图片加水印</h4><p>在 <code>public void onImageSaved(@NonNull ImageCapture.OutputFileResults outputFileResults) &#123;&#125;</code>里调用下面的方法。WaterMarkingUtility是一个添加水印的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWatermarkToPhoto</span><span class="hljs-params">(File photoFile)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>     <span class="hljs-type">Bitmap</span> <span class="hljs-variable">originalBitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeFile(photoFile.getAbsolutePath());<br>     <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(photoFile);<br><br>     <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> WaterMarkingUtility.drawTextToCenter(originalBitmap, <span class="hljs-string">&quot;水印&quot;</span>, <span class="hljs-number">500</span>);<br>     bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="hljs-number">100</span>, outputStream);<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CameraX 的基础</title>
    <link href="/2023/05/26/CameraX-%E7%9A%84%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/26/CameraX-%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CameraX实现相机功能"><a href="#CameraX实现相机功能" class="headerlink" title="CameraX实现相机功能"></a>CameraX实现相机功能</h1><p>预计实现功能：</p><ol><li>实时预览（缩放、点击聚焦）</li><li>拍照（晃动拍照）、录像</li><li>实现左右滑动，切换拍照、录像</li><li>给拍照的图片加水印</li></ol><h2 id="CameraX是什么，能解决什么问题"><a href="#CameraX是什么，能解决什么问题" class="headerlink" title="CameraX是什么，能解决什么问题"></a>CameraX是什么，能解决什么问题</h2><ul><li>Jetpack的一个支持库，最低版本要求Android5.0</li><li>默认的相机功能还是Camera2的能力，当然API都变了，同时提供CameraX Extensions拓展库可以添加各种特效，例如人像、HDR、夜间和美颜模式(从上图也可以看出，这是依赖OEM的)</li><li>绑定生命周期，所以Camera本身无需在生命周期中调用什么onPause onResume之类的样板代码，且忘记后会造成各种问题</li><li>抹平设备兼容性问题，无需在代码库中添加设备专属代码</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="1-注意事项"><a href="#1-注意事项" class="headerlink" title="1. 注意事项"></a>1. 注意事项</h4><ul><li>最低支持API是21</li><li>Android Studio 至少是3.6版本</li><li>Java8环境</li></ul><h4 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2.导入依赖"></a>2.导入依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>  <span class="hljs-comment">// CameraX core library using the camera2 implementation</span><br>  <span class="hljs-keyword">def</span> camerax_version = <span class="hljs-string">&quot;1.3.0-alpha06&quot;</span><br>  <span class="hljs-comment">// The following line is optional, as the core library is included indirectly by camera-camera2</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-core:$&#123;camerax_version&#125;&quot;</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-camera2:$&#123;camerax_version&#125;&quot;</span><br>  <span class="hljs-comment">// If you want to additionally use the CameraX Lifecycle library</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-lifecycle:$&#123;camerax_version&#125;&quot;</span><br>  <span class="hljs-comment">// If you want to additionally use the CameraX VideoCapture library</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-video:$&#123;camerax_version&#125;&quot;</span><br>  <span class="hljs-comment">// If you want to additionally use the CameraX View class</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-view:$&#123;camerax_version&#125;&quot;</span><br>  <span class="hljs-comment">// If you want to additionally add CameraX ML Kit Vision Integration</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-mlkit-vision:$&#123;camerax_version&#125;&quot;</span><br>  <span class="hljs-comment">// If you want to additionally use the CameraX Extensions library</span><br>  implementation <span class="hljs-string">&quot;androidx.camera:camera-extensions:$&#123;camerax_version&#125;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-申请一些必要的权限"><a href="#3-申请一些必要的权限" class="headerlink" title="3.申请一些必要的权限"></a>3.申请一些必要的权限</h4><blockquote><!--摄像头权限--><uses-permission android:name="android.permission.CAMERA"><!--具备摄像头--><uses-feature android:name="android.hardware.camera.any"><!--存储图像或者视频权限--><uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"><uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"><!--录制音频权限--><uses-permission android:name="android.permission.RECORD_AUDIO"></uses-permission></uses-permission></uses-permission></uses-feature></uses-permission></blockquote><h2 id="CameraX-结构"><a href="#CameraX-结构" class="headerlink" title="CameraX 结构"></a>CameraX 结构</h2><p>您可以使用 CameraX，借助名为“用例”的抽象概念与设备的相机进行交互。提供的用例如下：</p><ul><li><strong>预览</strong>：接受用于显示预览的 Surface，例如 <code>PreviewView</code>。</li><li><strong>图片分析</strong>：为分析（例如机器学习）提供 CPU 可访问的缓冲区。</li><li><strong>图片拍摄</strong>：拍摄并保存照片。</li><li><strong>视频拍摄</strong>：通过 <a href="https://developer.android.google.cn/reference/androidx/camera/video/VideoCapture?hl=zh-cn"><code>VideoCapture</code></a> 拍摄视频和音频</li></ul><p>我理解：cameraX给我们封装了四个不同的功能：实时预览、拍照、录像和图片分析。这些不同的功能可以组合到一起使用。</p><p>例如，应用中可以加入预览用例，以便让用户查看进入相机视野的画面；加入图片分析用例，以确定照片里的人物是否在微笑；还可以加入图片拍摄用例，以在人物微笑时拍摄照片。</p><h2 id="配置-CameraX-用例"><a href="#配置-CameraX-用例" class="headerlink" title="配置 CameraX 用例"></a>配置 CameraX 用例</h2><p>可以自行配置下面的内容：<a href="https://developer.android.google.cn/training/camerax/configuration?hl=zh-cn">配置选项  | Android 开发者  | Android Developers (google.cn)</a></p><p><img src="/2023/05/26/CameraX-%E7%9A%84%E5%9F%BA%E7%A1%80/image-20230526164804855.png" alt="image-20230526164804855"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义圆形图片</title>
    <link href="/2023/05/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87/"/>
    <url>/2023/05/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>官方推荐使用AppCompatImageView来实现自定义ImagView。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppCompatImageView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ImageView</span> <br>    <span class="hljs-keyword">implements</span> <br>  <span class="hljs-title class_">TintableBackgroundView</span>, TintableImageSourceView <br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import android.annotation.SuppressLint;<br>import android.content.Context;<br>import android.graphics.Bitmap;<br>import android.graphics.BitmapShader;<br>import android.graphics.Canvas;<br>import android.graphics.Matrix;<br>import android.graphics.Paint;<br>import android.graphics.Shader;<br>import android.graphics.drawable.BitmapDrawable;<br>import android.graphics.drawable.Drawable;<br>import android.util.AttributeSet;<br>import androidx.annotation.Nullable;<br>import androidx.appcompat.widget.AppCompatImageView;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author luxi</span><br><span class="hljs-comment"> * @email luxi2@mychery.com</span><br><span class="hljs-comment"> * @date 2023/5/11 15:12</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> CircleImageView extends AppCompatImageView &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 画笔；mPaint</span><br><span class="hljs-comment">     * 图片半径；mRadius</span><br><span class="hljs-comment">     * 缩放比例：mScale</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Paint mPaint;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> mRadius;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> mScale;<br><br>    public <span class="hljs-constructor">CircleImageView(Context <span class="hljs-params">context</span>)</span> &#123;<br>        super(context);<br>    &#125;<br><br>    public <span class="hljs-constructor">CircleImageView(Context <span class="hljs-params">context</span>, @Nullable AttributeSet <span class="hljs-params">attrs</span>)</span> &#123;<br>        super(context, attrs);<br>    &#125;<br><br>    public <span class="hljs-constructor">CircleImageView(Context <span class="hljs-params">context</span>, @Nullable AttributeSet <span class="hljs-params">attrs</span>, <span class="hljs-params">int</span> <span class="hljs-params">defStyleAttr</span>)</span> &#123;<br>        super(context, attrs, defStyleAttr);<br>    &#125;<br><br>    @Override<br>    protected void on<span class="hljs-constructor">Measure(<span class="hljs-params">int</span> <span class="hljs-params">widthMeasureSpec</span>, <span class="hljs-params">int</span> <span class="hljs-params">heightMeasureSpec</span>)</span> &#123;<br>        super.on<span class="hljs-constructor">Measure(<span class="hljs-params">widthMeasureSpec</span>, <span class="hljs-params">heightMeasureSpec</span>)</span>;<br>        <span class="hljs-comment">//因为是圆形图片，所以应该让宽高保持一致</span><br>        <span class="hljs-built_in">int</span> size = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(get<span class="hljs-constructor">MeasuredWidth()</span>, get<span class="hljs-constructor">MeasuredHeight()</span>);<br>        mRadius = size<span class="hljs-operator"> / </span><span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//存储合适的宽高</span><br>        set<span class="hljs-constructor">MeasuredDimension(<span class="hljs-params">size</span>, <span class="hljs-params">size</span>)</span>;<br>    &#125;<br><br>    @<span class="hljs-constructor">SuppressLint(<span class="hljs-string">&quot;DrawAllocation&quot;</span>)</span><br>    @Override<br>    protected void on<span class="hljs-constructor">Draw(Canvas <span class="hljs-params">canvas</span>)</span> &#123;<br>        mPaint = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Paint()</span>;<br>        Bitmap bitmap = drawable<span class="hljs-constructor">ToBitmap(<span class="hljs-params">getDrawable</span>()</span>);<br>        <span class="hljs-comment">//初始化BitmapShader，传入bitmap对象</span><br>        @<span class="hljs-constructor">SuppressLint(<span class="hljs-string">&quot;DrawAllocation&quot;</span>)</span> BitmapShader bitmapShader=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BitmapShader(<span class="hljs-params">bitmap</span>, Shader.TileMode.CLAMP,Shader.TileMode.CLAMP)</span>;<br><br>        <span class="hljs-comment">//计算缩放比例</span><br>        mScale=(mRadius*<span class="hljs-number">2.0</span>f)/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(bitmap.get<span class="hljs-constructor">Height()</span>,bitmap.get<span class="hljs-constructor">Width()</span>);<br><br>        Matrix matrix=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Matrix()</span>;<br>        matrix.set<span class="hljs-constructor">Scale(<span class="hljs-params">mScale</span>,<span class="hljs-params">mScale</span>)</span>;<br>        bitmapShader.set<span class="hljs-constructor">LocalMatrix(<span class="hljs-params">matrix</span>)</span>;<br><br><br>        mPaint.set<span class="hljs-constructor">Shader(<span class="hljs-params">bitmapShader</span>)</span>;<br><br>        <span class="hljs-comment">//画圆形，指定好中心点坐标、半径、画笔</span><br>        canvas.draw<span class="hljs-constructor">Circle(<span class="hljs-params">mRadius</span>,<span class="hljs-params">mRadius</span>,<span class="hljs-params">mRadius</span>,<span class="hljs-params">mPaint</span>)</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将drawable转化成bitmap</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param drawable drawable</span><br><span class="hljs-comment">     * @author luxi</span><br><span class="hljs-comment">     * @date 2023/5/11 15:30</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Bitmap drawable<span class="hljs-constructor">ToBitmap(Drawable <span class="hljs-params">drawable</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (drawable instanceof BitmapDrawable) &#123;<br>            BitmapDrawable bd = (BitmapDrawable) drawable;<br>            return bd.get<span class="hljs-constructor">Bitmap()</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> w = drawable.get<span class="hljs-constructor">IntrinsicWidth()</span>;<br>        <span class="hljs-built_in">int</span> h = drawable.get<span class="hljs-constructor">IntrinsicHeight()</span>;<br>        Bitmap bitmap = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Bitmap</span>.</span></span>create<span class="hljs-constructor">Bitmap(<span class="hljs-params">w</span>, <span class="hljs-params">h</span>, Bitmap.Config.ARGB_8888)</span>;<br>        Canvas canvas = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Canvas(<span class="hljs-params">bitmap</span>)</span>;<br>        drawable.set<span class="hljs-constructor">Bounds(0, 0, <span class="hljs-params">w</span>, <span class="hljs-params">h</span>)</span>;<br>        drawable.draw(canvas);<br>        return bitmap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android自定义View</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滤镜效果</title>
    <link href="/2023/05/16/%E6%BB%A4%E9%95%9C%E6%95%88%E6%9E%9C/"/>
    <url>/2023/05/16/%E6%BB%A4%E9%95%9C%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="滤镜效果"><a href="#滤镜效果" class="headerlink" title="滤镜效果"></a>滤镜效果</h1><p>先说一下，我要完成的效果：</p><p><img src="/2023/05/16/%E6%BB%A4%E9%95%9C%E6%95%88%E6%9E%9C/image-20230516135644852.png" alt="image-20230516135644852"></p><p>给上面的的图片加上一层透明度25的黑色蒙层，或者说是一层淡黑色的滤镜。达到下面的效果。</p><p><img src="/2023/05/16/%E6%BB%A4%E9%95%9C%E6%95%88%E6%9E%9C/image-20230516135627211.png" alt="image-20230516135627211"></p><p>我现在已知的有两种方法：</p><h2 id="1-使用ImageView-的api"><a href="#1-使用ImageView-的api" class="headerlink" title="1.使用ImageView 的api"></a>1.使用ImageView 的api</h2><p>当设置<strong>setBackgroundDrawable</strong>时，整个ImageView的控件背景色会变。<br>当设置<strong>setImageDrawable</strong>时，ImageView中间内容区会被图片填充。但是周围会有一些边距，默认无法填充整个控件（当然，这也是有属性设置的）。</p><p><strong>ScaleType的值分别代表的意义： ImageView是Android中的基础图片显示控件，该控件有个重要的属性是ScaleType，该属性用以表示显示图片的方式，共有8种取值</strong> 　</p><blockquote><p>ScaleType.CENTER：：图片大小为原始大小，如果图片大小大于ImageView控件，则截取图片中间部分，若小于，则直接将图片居中显示。 </p></blockquote><blockquote><p>ScaleType.CENTER_CROP：将图片等比例缩放，让图像的短边与ImageView的边长度相同，即不能留有空白，缩放后截取中间部分进行显示。</p></blockquote><blockquote><p>ScaleType.CENTER_INSIDE：将图片大小大于ImageView的图片进行等比例缩小，直到整幅图能够居中显示在ImageView中，小于ImageView的图片不变，直接居中显示。</p></blockquote><blockquote><p>ScaleType.FIT_CENTER：ImageView的默认状态，大图等比例缩小，使整幅图能够居中显示在ImageView中，小图等比例放大，同样要整体居中显示在ImageView中。 　　 </p></blockquote><blockquote><p>ScaleType.FIT_END：缩放方式同FIT_CENTER，只是将图片显示在右方或下方，而不是居中。 　</p></blockquote><blockquote><p>ScaleType.FIT_START：缩放方式同FIT_CENTER，只是将图片显示在左方或上方，而不是居中。 　</p></blockquote><blockquote><p>ScaleType.FIT_XY：将图片非等比例缩放到大小与ImageView相同。 　　 </p></blockquote><blockquote><p>ScaleType.MATRIX：是根据一个3x3的矩阵对其中图片进行缩放</p></blockquote><ol><li>我们将真正要显示的图片作为背景。也就是使用setBackgroundDrawable方法</li><li>透明底色的图片使用setImageDrawable方法，它会覆盖在要显示的图片上，因为是透明的，会在上面看起来是一层黑色滤镜。</li><li>如果遇到无法填充完整，就使用ScaleType属性。</li></ol><blockquote><p>将bitmap转化成drawable：BitmapDrawable bd&#x3D;new BitmapDrawable(getResources(),bitmap);</p><p>BitmapDrawable是drawable的子类</p></blockquote><h2 id="2-使用setColorFilter方法"><a href="#2-使用setColorFilter方法" class="headerlink" title="2.使用setColorFilter方法"></a>2.使用setColorFilter方法</h2><p>官方定义是给图片添加一个着色选项：Sets a tinting option for the image.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">通过setColorFilter可以实现滤镜效果。 如： <span class="hljs-keyword">final</span> <span class="hljs-type">WallpaperManager</span> <span class="hljs-variable">wallpaperManager</span> <span class="hljs-operator">=</span> WallpaperManager.getInstance(<span class="hljs-built_in">this</span>);<br>         <span class="hljs-comment">//获取壁纸</span><br> <span class="hljs-keyword">final</span> <span class="hljs-type">Drawable</span> <span class="hljs-variable">wallpaperDrawable</span> <span class="hljs-operator">=</span> wallpaperManager.getDrawable();<br> <span class="hljs-comment">//指定滤镜颜色以及混合模式</span><br>wallpaperDrawable.setColorFilter(Color.RED, PorterDuff.Mode.MULTIPLY); <br><br><span class="hljs-comment">/*注意：PorterDuff.Mode枚举值： </span><br><span class="hljs-comment"> 1.PorterDuff.Mode.CLEAR 所绘制不会提交到画布上。</span><br><span class="hljs-comment"> 2.PorterDuff.Mode.SRC 显示上层绘制图片</span><br><span class="hljs-comment"> 3.PorterDuff.Mode.DST 显示下层绘制图片</span><br><span class="hljs-comment"> 4.PorterDuff.Mode.SRC_OVER 正常绘制显示，上下层绘制叠盖。</span><br><span class="hljs-comment"> 5.PorterDuff.Mode.DST_OVER 上下层都显示。下层居上显示。</span><br><span class="hljs-comment"> 6.PorterDuff.Mode.SRC_IN 取两层绘制交集。显示上层。 </span><br><span class="hljs-comment"> 7.PorterDuff.Mode.DST_IN 取两层绘制交集。显示下层。</span><br><span class="hljs-comment"> 8.PorterDuff.Mode.SRC_OUT 取上层绘制非交集部分。 </span><br><span class="hljs-comment"> 9.PorterDuff.Mode.DST_OUT 取下层绘制非交集部分。 </span><br><span class="hljs-comment"> 10.PorterDuff.Mode.SRC_ATOP 取下层非交集部分与上层交集部分 </span><br><span class="hljs-comment"> 11.PorterDuff.Mode.DST_ATOP 取上层非交集部分与下层交集部分 </span><br><span class="hljs-comment"> 12.PorterDuff.Mode.XOR //变暗 </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如何使用：</p><ol><li>添加滤镜：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">binding.image.setColorFilter(getResources().getColor(R.color.black, <span class="hljs-literal">null</span>));<br></code></pre></td></tr></table></figure><ol start="2"><li>去除滤镜：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">binding.image.clearColorFilter();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bitmap基础使用</title>
    <link href="/2023/05/15/Bitmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/15/Bitmap%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Bitmap的一些应用场景"><a href="#Bitmap的一些应用场景" class="headerlink" title="Bitmap的一些应用场景"></a>Bitmap的一些应用场景</h2><hr><h3 id="1-使用Bitmap时防止OOM的有效方法：高效压缩图片"><a href="#1-使用Bitmap时防止OOM的有效方法：高效压缩图片" class="headerlink" title="1. 使用Bitmap时防止OOM的有效方法：高效压缩图片"></a>1. 使用Bitmap时防止OOM的有效方法：高效压缩图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 谷歌推荐使用方法，从资源中加载图像，并高效压缩，有效降低OOM的概率</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> res 资源</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resId 图像资源的资源id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> reqWidth 要求图像压缩后的宽度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> reqHeight 要求图像压缩后的高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Bitmap <span class="hljs-title function_">decodeSampledBitmapFromResource</span><span class="hljs-params">(Resources res, <span class="hljs-type">int</span> resId, <span class="hljs-type">int</span> reqWidth, <span class="hljs-type">int</span> reqHeight)</span> &#123;<br>    <span class="hljs-comment">// 设置inJustDecodeBounds = true ,表示获取图像信息，但是不将图像的像素加入内存</span><br>    <span class="hljs-keyword">final</span> BitmapFactory.<span class="hljs-type">Options</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BitmapFactory</span>.Options();<br>    options.inJustDecodeBounds = <span class="hljs-literal">true</span>;<br>    BitmapFactory.decodeResource(res, resId, options);<br><br>    <span class="hljs-comment">// 调用方法计算合适的 inSampleSize</span><br>    options.inSampleSize = calculateInSampleSize(options, reqWidth,<br>            reqHeight);<br><br>    <span class="hljs-comment">// inJustDecodeBounds 置为 false 真正开始加载图片</span><br>    options.inJustDecodeBounds = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//将options.inPreferredConfig改成Bitmap.Config.RGB_565，</span><br>    <span class="hljs-comment">// 是默认情况Bitmap.Config.ARGB_8888占用内存的一般</span><br>    options.inPreferredConfig= Bitmap.Config.RGB_565;<br>    <span class="hljs-keyword">return</span> BitmapFactory.decodeResource(res, resId, options);<br>&#125;<br><br><span class="hljs-comment">// 计算 BitmapFactpry 的 inSimpleSize的值的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateInSampleSize</span><span class="hljs-params">(BitmapFactory.Options options,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> reqWidth, <span class="hljs-type">int</span> reqHeight)</span> &#123;<br>    <span class="hljs-keyword">if</span> (reqWidth == <span class="hljs-number">0</span> || reqHeight == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取图片原生的宽和高</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> options.outHeight;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> options.outWidth;<br>    Log.d(TAG, <span class="hljs-string">&quot;origin, w= &quot;</span> + width + <span class="hljs-string">&quot; h=&quot;</span> + height);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">inSampleSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 如果原生的宽高大于请求的宽高,那么将原生的宽和高都置为原来的一半</span><br>    <span class="hljs-keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">halfHeight</span> <span class="hljs-operator">=</span> height / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">halfWidth</span> <span class="hljs-operator">=</span> width / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">// 主要计算逻辑</span><br>        <span class="hljs-comment">// Calculate the largest inSampleSize value that is a power of 2 and</span><br>        <span class="hljs-comment">// keeps both</span><br>        <span class="hljs-comment">// height and width larger than the requested height and width.</span><br>        <span class="hljs-keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;<br>            inSampleSize *= <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    Log.d(TAG, <span class="hljs-string">&quot;sampleSize:&quot;</span> + inSampleSize);<br>    <span class="hljs-keyword">return</span> inSampleSize;<br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="2-绘制圆角矩形Bitmap"><a href="#2-绘制圆角矩形Bitmap" class="headerlink" title="2. 绘制圆角矩形Bitmap"></a>2. 绘制圆角矩形Bitmap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> bitmap 需要修改的图片</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> pixels 圆角的弧度</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 圆角图片</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-comment">//参考资料:</span><br> <span class="hljs-comment">//http://blog.csdn.net/c8822882/article/details/6906768</span><br> <span class="hljs-keyword">public</span> Bitmap <span class="hljs-title function_">toRoundCorner</span><span class="hljs-params">(Bitmap bitmap, <span class="hljs-type">int</span> pixels)</span> &#123;<br>     <span class="hljs-type">Bitmap</span> <span class="hljs-variable">roundCornerBitmap</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);<br>     <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(roundCornerBitmap);<span class="hljs-comment">//生成画布</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xff424242</span>;<span class="hljs-comment">//int color = 0xff424242;</span><br>     <span class="hljs-type">Paint</span> <span class="hljs-variable">paint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>();<br>     paint.setColor(color);<br>     <span class="hljs-comment">//防止锯齿</span><br>     paint.setAntiAlias(<span class="hljs-literal">true</span>);<br>     <span class="hljs-comment">//定义一个矩形区域用于绘制bitmap</span><br>     <span class="hljs-type">Rect</span> <span class="hljs-variable">rect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bitmap.getWidth(), bitmap.getHeight());<br>     <span class="hljs-comment">//再定义一个矩形用于绘制圆角矩形</span><br>     <span class="hljs-type">RectF</span> <span class="hljs-variable">rectF</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RectF</span>(rect);<br>     <span class="hljs-comment">//获取圆角的半径</span><br>     <span class="hljs-type">float</span> <span class="hljs-variable">roundPx</span> <span class="hljs-operator">=</span> pixels;<br>     <span class="hljs-comment">//相当于清屏</span><br>     canvas.drawARGB(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>     <span class="hljs-comment">//先画了一个带圆角的矩形</span><br>     canvas.drawRoundRect(rectF, roundPx, roundPx, paint);<br>     <span class="hljs-comment">//取两层绘制交集。显示上层。</span><br>     paint.setXfermode(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PorterDuffXfermode</span>(PorterDuff.Mode.SRC_IN));<br>     <span class="hljs-comment">//再把原来的bitmap画到现在的bitmap！！！注意这个理解</span><br>     canvas.drawBitmap(bitmap, rect, rect, paint);<br>     <span class="hljs-keyword">return</span> roundCornerBitmap;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="3-绘制圆形Bitmap"><a href="#3-绘制圆形Bitmap" class="headerlink" title="3. 绘制圆形Bitmap"></a>3. 绘制圆形Bitmap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将图片处理成圆形</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> res </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> drawableId </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/5/12 13:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createCircleBitmap</span><span class="hljs-params">(Resources res, <span class="hljs-type">int</span> drawableId)</span> &#123;<br>    <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(res, drawableId);<br>    <span class="hljs-comment">//获取图片的宽度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> bitmap.getWidth();<br>    <span class="hljs-type">Paint</span> <span class="hljs-variable">paint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>();<br>    <span class="hljs-comment">//设置抗锯齿</span><br>    paint.setAntiAlias(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">//创建一个与原bitmap一样宽度的正方形bitmap</span><br>    <span class="hljs-type">Bitmap</span> <span class="hljs-variable">circleBitmap</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(width, width, Bitmap.Config.ARGB_8888);<br>    <span class="hljs-comment">//以该bitmap为低创建一块画布</span><br>    <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(circleBitmap);<br>    <span class="hljs-comment">//以（width/2, width/2）为圆心，width/2为半径画一个圆</span><br>    canvas.drawCircle(width / <span class="hljs-number">2</span>, width / <span class="hljs-number">2</span>, width / <span class="hljs-number">2</span>, paint);<br><br>    <span class="hljs-comment">//设置画笔为取交集模式</span><br>    paint.setXfermode(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PorterDuffXfermode</span>(PorterDuff.Mode.SRC_IN));<br>    <span class="hljs-comment">//裁剪图片</span><br>    canvas.drawBitmap(bitmap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, paint);<br><br>    <span class="hljs-keyword">return</span> circleBitmap;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-裁剪、缩放、旋转、移动"><a href="#4-裁剪、缩放、旋转、移动" class="headerlink" title="4.裁剪、缩放、旋转、移动"></a>4.裁剪、缩放、旋转、移动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Matrix</span> <span class="hljs-variable">matrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Matrix</span>();  <br><span class="hljs-comment">// 缩放 </span><br>matrix.postScale(<span class="hljs-number">0.8f</span>, <span class="hljs-number">0.9f</span>);  <br><span class="hljs-comment">// 左旋，参数为正则向右旋</span><br>matrix.postRotate(-<span class="hljs-number">45</span>);  <br><span class="hljs-comment">// 平移, 在上一次修改的基础上进行再次修改 set 每次操作都是最新的 会覆盖上次的操作</span><br>matrix.postTranslate(<span class="hljs-number">100</span>, <span class="hljs-number">80</span>);<br><span class="hljs-comment">// 裁剪并执行以上操作</span><br><span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(source, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, source.getWidth(), source.getHeight(), matrix, <span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></table></figure><ol><li><p>图片缩小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缩小图片</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bitmap 需要缩小的图片</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 缩小的图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">small</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br>    <span class="hljs-type">Matrix</span> <span class="hljs-variable">matrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Matrix</span>();<br>    matrix.postScale(<span class="hljs-number">0.25f</span>, <span class="hljs-number">0.25f</span>);<br>    <span class="hljs-type">Bitmap</span> <span class="hljs-variable">resizeBmp</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(bitmap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> resizeBmp;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>图片放大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 放大图片</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bitmap 需要放大的图片</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 放大的图片</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">big</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br>      <span class="hljs-type">Matrix</span> <span class="hljs-variable">matrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Matrix</span>();<br>      matrix.postScale(<span class="hljs-number">4f</span>, <span class="hljs-number">4f</span>);<br>      <span class="hljs-type">Bitmap</span> <span class="hljs-variable">resizeBmp</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(bitmap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class="hljs-literal">true</span>);<br>      <span class="hljs-keyword">return</span> resizeBmp;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bitmap里面的常见方法</title>
    <link href="/2023/05/15/Bitmap%E9%87%8C%E9%9D%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/15/Bitmap%E9%87%8C%E9%9D%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="BitMap的基本使用"><a href="#BitMap的基本使用" class="headerlink" title="BitMap的基本使用"></a>BitMap的基本使用</h1><p>我们创建一个BItMap有几种方式？</p><p>答：两种：一种是使用<strong>BitmapFactory</strong>类去加载，另一种是使用<strong>Bitmap类</strong>加载。</p><h2 id="一、BitmapFactory"><a href="#一、BitmapFactory" class="headerlink" title="一、BitmapFactory"></a>一、BitmapFactory</h2><p><img src="/2023/05/15/Bitmap%E9%87%8C%E9%9D%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASk1XMTQwNw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><h3 id="1-1-BitmapFactory提供了多种创建bitmap的静态方法"><a href="#1-1-BitmapFactory提供了多种创建bitmap的静态方法" class="headerlink" title="1.1 BitmapFactory提供了多种创建bitmap的静态方法"></a>1.1 <strong>BitmapFactory提供了多种创建bitmap的静态方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从资源文件中通过id加载bitmap</span><br><span class="hljs-comment">//Resources res:资源文件，可以context.getResources()获得</span><br><span class="hljs-comment">//id:资源文件的id，如R.drawable.xxx</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeResources</span><span class="hljs-params">(Resources res,<span class="hljs-type">int</span> id)</span><br><span class="hljs-comment">//第二种只是第一种的重载方法，多了个Options参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeResources</span><span class="hljs-params">(Resources res,<span class="hljs-type">int</span> id,Options opt)</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传入文件路径加载，比如加载sd卡中的文件</span><br><span class="hljs-comment">//pathName:文件的全路径名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeFile</span><span class="hljs-params">(String pathName)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeFile</span><span class="hljs-params">(String pathName,Options opt)</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从byte数组中加载</span><br><span class="hljs-comment">//offset:对应data数组的起始下标</span><br><span class="hljs-comment">//length:截取的data数组的长度</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeByteArray</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data,<span class="hljs-type">int</span> offset , <span class="hljs-type">int</span> length)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeByteArray</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data,<span class="hljs-type">int</span> offset , <span class="hljs-type">int</span> length,Options opt)</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FileDescriptor :包含解码位图的数据文件的路径</span><br><span class="hljs-comment">//通过该方式从路径加载bitmap比decodeFile更节省内存，原因不解释了。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeFileDescriptor</span><span class="hljs-params">(FileDescriptor fd)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">decodeFileDescriptor</span><span class="hljs-params">(FileDescriptor fd,Rect outPadding,Options opt)</span>;<br><br></code></pre></td></tr></table></figure><p>decodeFile、 decodeResource、decodeStream和decodeByteArray,分别用于支持从文件系统、资源、输入流以及字节数组中加载出一个Bitmap对象，其中decodeFile和decodeResource又间接调用了decodeStream方法，这四类方法最终是在Android的底层实现的，对应着BitmapFactory类的几个native 方法。</p><blockquote><p>一个native方法就是一个Java调用非Java代码的接口。一个native方法是指该方法的实现由非Java语言实现，比如用C或C++实现。</p></blockquote><h3 id="1-2-Bitmap-Options"><a href="#1-2-Bitmap-Options" class="headerlink" title="1.2 Bitmap.Options"></a>1.2 Bitmap.Options</h3><p>想要创建一个<code>Bitmap</code>有很多种方法，其中很多方法都要求传入一个<code>Bitmap.Options</code>，它是什么呢，有什么作用呢？</p><p>这个参数的作用非常大，他可以设置Bitmap的<strong>采样率</strong>，通过改变图片的宽度高度和缩放比例等，以达到<strong>减少图片像素数的目的</strong>，一言以蔽之，通过设置这个参数我们可以很好的控制显示和使用<code>Bitmap</code>。实际开发过程中，可以灵活设置该值，以降低<code>OOM</code>发生的概率。</p><ol><li>如何高效地加载bitmap?</li></ol><p>通过<code>BitmapFactory.Options</code>按一定的<code>采样率</code>来加载缩小后的图片，将缩小后的图片在<code>ImageView</code>中显示，这样就会降低内存占用从而在一定程度上避免OOM，提高了Bitmap 加载时的性能。BitmapFactory提供的加载图片的四类方法都支持BitmapFactory.Options参数</p><ol start="2"><li>通过BitmapFactory.Options 来缩放图片，主要用到了inSampleSize参数，即采样率。</li></ol><p>当inSampleSize为1时，采样后的图片大小为图片的原始大小;<br>当inSampleSize大于1时，比如为2,那么采样后的图片其宽&#x2F;高均为原图大小的1&#x2F;2,而像素数为原图的1&#x2F;4,其占有的内存大小也为原图的1&#x2F;4。</p><blockquote><p>拿一张1024×1024像素的图片来说，假定采用ARGB8888格式存储，那么它占有的内存为1024×1024×4即4MB，如果inSampleSize为2，那么采样后的图片其内存占用只有512×512×4，即1MB。</p></blockquote><p>采样率同时作用于宽&#x2F;高，这将导致缩放后的图片大小以采样率的2次方形式递减，即缩放比例为1&#x2F; (inSampleSize的2次方)</p><p>​比如inSampleSize为4,那么缩放比例就是1&#x2F;16。<br>​有一种特殊情况，那就是当inSampleSize 小于1时，其作用相当于1,即无缩放效果。</p><p><strong>参数说明：</strong></p><p><img src="/2023/05/15/Bitmap%E9%87%8C%E9%9D%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASk1XMTQwNw==,size_20,color_FFFFFF,t_70,g_se,x_16-16841591976211.png" alt="在这里插入图片描述"></p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">BitmapFactory.<span class="hljs-type">Options</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BitmapFactory</span>.Options();<br><span class="hljs-comment">// 设置inJustDecodeBounds为true后，再使用decodeFile()等方法，并不会真正的分配空间，</span><br><span class="hljs-comment">//即解码出来的Bitmap为null，但是可计算出原始图片的宽度和高度，即options.outWidth和options.outHeight</span><br>options.inJustDecodeBounds = <span class="hljs-literal">true</span>;<br>BitmapFactory.decodeResource(getResources(), R.drawable.img3, options);<br><span class="hljs-type">float</span>  <span class="hljs-variable">srcWidth</span> <span class="hljs-operator">=</span> options.outWidth;<br><span class="hljs-type">float</span>  <span class="hljs-variable">srcHeight</span> <span class="hljs-operator">=</span> options.outHeight;<br><span class="hljs-type">int</span> <span class="hljs-variable">inSampleSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">float</span>  <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">float</span>  <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> <span class="hljs-number">528</span>;<br><br><span class="hljs-keyword">if</span> (srcHeight &gt; height || srcWidth &gt; width) &#123;<br>    <span class="hljs-keyword">if</span> (srcWidth &gt; srcHeight) &#123;<br>        inSampleSize = Math.round(srcHeight / height);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        inSampleSize = Math.round(srcWidth / width);<br>    &#125;<br>&#125;<br><br>options.inJustDecodeBounds = <span class="hljs-literal">false</span>;<br>options.inSampleSize = inSampleSize;<br><br><span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getResources(), R.drawable.img3, options);<br><span class="hljs-type">float</span>  <span class="hljs-variable">outWidth</span> <span class="hljs-operator">=</span> options.outWidth;<br><span class="hljs-type">float</span>  <span class="hljs-variable">outHeight</span> <span class="hljs-operator">=</span> options.outHeight;<br>binding.image.setImageBitmap(bitmap);<br><br><br>Log.d(TAG, <span class="hljs-string">&quot;图片的内存: &quot;</span> + bitmap.getAllocationByteCount());<br>Log.d(TAG, <span class="hljs-string">&quot;图片的采樣率: &quot;</span> + inSampleSize);<br>Log.d(TAG, <span class="hljs-string">&quot;原來图片的宽度/高度: &quot;</span> + srcWidth + <span class="hljs-string">&quot; / &quot;</span> + srcHeight);<br>Log.d(TAG, <span class="hljs-string">&quot;現在图片的宽度/高度: &quot;</span> + outWidth + <span class="hljs-string">&quot; / &quot;</span> + outHeight);<br></code></pre></td></tr></table></figure><p><img src="/2023/05/15/Bitmap%E9%87%8C%E9%9D%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/image-20230515220322103.png" alt="image-20230515220322103"></p><h2 id="二-Bitmap静态方法"><a href="#二-Bitmap静态方法" class="headerlink" title="二. Bitmap静态方法"></a>二. Bitmap静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//width和height是长和宽单位px,config是存储格式</span><br><span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createBitmap</span><span class="hljs-params">(<span class="hljs-type">int</span> width , <span class="hljs-type">int</span> height Bitmap.Config config)</span><br><span class="hljs-comment">// 根据一幅图像创建一份一模一样的实例</span><br><span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createBitmap</span><span class="hljs-params">(Bitmap bm)</span><br><span class="hljs-comment">//截取一幅bitmap，起点是（x，y）,width和height分别对应宽高</span><br><span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createBitmap</span><span class="hljs-params">(Bitmap bm,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> width,<span class="hljs-type">int</span> height)</span><br><span class="hljs-comment">//比上面的裁剪函数多了两个参数，Matrix:给裁剪后的图像添加矩阵 boolean filter:是否给图像添加滤波效果</span><br><span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createBitmap</span><span class="hljs-params">(Bitmap bm,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> width,<span class="hljs-type">int</span> height，Matrix m,<span class="hljs-type">boolean</span> filter)</span>;<br><span class="hljs-comment">//用于缩放bitmap,dstWidth和dstHeight分别是目标宽高</span><br>createScaledBitmap(Bitmap bm,<span class="hljs-type">int</span> dstWidth,<span class="hljs-type">int</span> dstHeight,<span class="hljs-type">boolean</span> filter)<br></code></pre></td></tr></table></figure><p><img src="/2023/05/15/Bitmap%E9%87%8C%E9%9D%A2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/image-20230515220522631.png" alt="image-20230515220522631"></p><p><strong>这些方法大致可以分为三类：</strong></p><ul><li>1、根据已有的Bitmap来创建新Bitmap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过矩阵的方式，返回原始 Bitmap 中的一个不可变子集。新 Bitmap 可能返回的就是原始的 Bitmap，也可能还是复制出来的。</span><br><span class="hljs-comment">* 新 Bitmap 与原始 Bitmap 具有相同的密度（density）和颜色空间;</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> source   原始 Bitmap</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> x        在原始 Bitmap 中 x方向的其起始坐标（你可能只需要原始 Bitmap x方向上的一部分）</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> y        在原始 Bitmap 中 y方向的其起始坐标（你可能只需要原始 Bitmap y方向上的一部分）</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> width    需要返回 Bitmap 的宽度（px）（如果超过原始Bitmap宽度会报错）</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> height   需要返回 Bitmap 的高度（px）（如果超过原始Bitmap高度会报错）</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> m        Matrix类型，表示需要做的变换操作</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> filter   是否需要过滤，只有 matrix 变换不只有平移操作才有效</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createBitmap</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Bitmap source, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height,</span><br><span class="hljs-params">            <span class="hljs-meta">@Nullable</span> Matrix m, <span class="hljs-type">boolean</span> filter)</span> <br><br><br></code></pre></td></tr></table></figure><ul><li>2、通过像素点数组创建空的Bitmap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 返回具有指定宽度和高度的不可变位图，每个像素值设置为colors数组中的对应值。</span><br><span class="hljs-comment">     * 其初始密度由给定的确定DisplayMetrics。新创建的位图位于sRGB 颜色空间中。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> display  显示将显示此位图的显示的度量标准</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> colors   用于初始化像素的sRGB数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset   颜色数组中第一个颜色之前要跳过的值的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stride   行之间数组中的颜色数（必须&gt; = width或&lt;= -width）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> width    位图的宽度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> height   位图的高度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> config   要创建的位图配置。如果配置不支持每像素alpha（例如RGB_565），</span><br><span class="hljs-comment">     * 那么colors []中的alpha字节将被忽略（假设为FF）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createBitmap</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> DisplayMetrics display,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> <span class="hljs-meta">@ColorInt</span> <span class="hljs-type">int</span>[] colors, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> stride,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, <span class="hljs-meta">@NonNull</span> Config config)</span> <br><br><br></code></pre></td></tr></table></figure><ul><li>3、 创建缩放的Bitmap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 对Bitmap进行缩放，缩放成宽 dstWidth、高 dstHeight 的新Bitmap</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">createScaledBitmap</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Bitmap src, <span class="hljs-type">int</span> dstWidth, <span class="hljs-type">int</span> dstHeight,<span class="hljs-type">boolean</span> filter)</span><br><br></code></pre></td></tr></table></figure><h2 id="三-创建Bitmap的总结"><a href="#三-创建Bitmap的总结" class="headerlink" title="三.创建Bitmap的总结"></a>三.创建Bitmap的总结</h2><ol><li>加载图像可以使用BitmapFactory和Bitmap.create系列方法</li><li>可以通过Options实现缩放图片，获取图片信息，配置缩放比例等功能</li><li>如果需要裁剪或者缩放图片，只能使用create系列函数</li><li>注意加载和创建bitmap事通过try catch捕捉OOM异常</li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Bitmap 全面详解</title>
    <link href="/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Bitmap-全面详解"><a href="#Android-Bitmap-全面详解" class="headerlink" title="Android Bitmap 全面详解"></a>Android Bitmap 全面详解</h1><p>明确整理这篇博客的目的：</p><ol><li>对自己了解的bitmap知识做一个梳理；</li><li>进一步了解OOM；</li><li>主要对是介绍怎么使用bitmap，可能会对部分重要的方法进行源码的解读</li></ol><h2 id="一-Bitmap的定义"><a href="#一-Bitmap的定义" class="headerlink" title="一.Bitmap的定义"></a>一.Bitmap的定义</h2><p>Bitmap是Android系统中的图像处理的最重要类之一。用它可以获取图像文件信息，进行图像剪切、旋转、缩放等操作，并可以指定格式保存图像文件。</p><p>首先让我们开始对一张图片转化成Bitmap 后，占用内存分析，开始这次的技术总结：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getResources(), R.drawable.img3);<br>binding.image.setImageBitmap(bitmap);<br>Log.d(TAG, <span class="hljs-string">&quot;onCreate: &quot;</span>+bitmap.getAllocationByteCount());<br></code></pre></td></tr></table></figure><p>我们可以通过 Bitmap.getAllocationByteCount() 方法获取 Bitmap 占用的字节大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">D/路茜: onCreate: <span class="hljs-number">2534464</span><br></code></pre></td></tr></table></figure><p>我在drawablewe文件夹下保存的是一张796*796的图片</p><p><img src="/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/image-20230515215603113.png" alt="image-20230515215603113"></p><p><strong>解释</strong>：</p><p>默认情况下 BitmapFactory 使用 Bitmap.Config.ARGB_8888 的存储方式来加载图片内容，而在这种存储模式下，每一个像素需要占用 4 个字节。因此上面图片 rodman 的内存大小可以使用如下公式来计算：</p><blockquote><p>796 * 796 * 4&#x3D; 2,534,464 bity&#x3D;2.4 MB</p></blockquote><p>原本就216kb的图片转化成bitmap之后竟然就有2.4MB，那么当我们加载很多图片的时候，就不奇怪为什么程序会奔溃了！！是我我也奔溃，自己写出来什么垃圾。</p><p>上面的引入，可以看出使用bitmap的两个需要的常规操作：对像素点的存储、对图片的压缩。</p><h2 id="二-Bitmap的格式"><a href="#二-Bitmap的格式" class="headerlink" title="二.Bitmap的格式"></a>二.Bitmap的格式</h2><p>我们知道<code>Bitmap</code>是位图，是由像素点组成的，这就涉及到两个问题，</p><ul><li><strong>第一：如何存储每个像素点？</strong></li><li><strong>第二：怎么压缩像素点？</strong></li></ul><p>Bitmap 中有两个内部枚举类：</p><blockquote><p><code>Config</code> 和 <code>CompressFormat</code>，<code>Config</code> 是用来设置颜色配置信息的，<code>CompressFormat</code> 是用来设置压缩方式的</p></blockquote><p><img src="/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/1736058-d530c7d0bb8e8cf6.png" alt="img"></p><h3 id="2-1-存储格式"><a href="#2-1-存储格式" class="headerlink" title="2.1 存储格式"></a>2.1 存储格式</h3><p><code>Bitmap</code>有常见的有前面四种存储方式，对应<code>Bitmap.Config</code>中的四个常量</p><p><img src="/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/image-20230515221256296.png" alt="image-20230515221256296"></p><p><img src="/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASk1XMTQwNw==,size_20,color_FFFFFF,t_70,g_se,x_16-16841590469981.png" alt="在这里插入图片描述"></p><h2 id="2-2-压缩格式"><a href="#2-2-压缩格式" class="headerlink" title="2.2 压缩格式"></a>2.2 压缩格式</h2><blockquote><p><strong>Bitmap.CompressFormat.JPEG</strong>:采用JPEG压缩算法，是一种有损压缩格式，会在压缩过程中改变图像原本质量，画质越差，对原来的图片质量损伤越大，但是得到的文件比较小，而且JPEG不支持透明度，当遇到透明度像素时，会以黑色背景填充。</p></blockquote><blockquote><p><strong>Bitmap.CompressFormat.PNG</strong>:采用PNG算法，是一种支持透明度的无损压缩格式。</p></blockquote><blockquote><p><strong>Bitmap.CompressFormat.WEBP</strong>:WEBP是一种同时提供了有损压缩和无损压缩的图片文件格式，在14&lt;&#x3D;api&lt;&#x3D;17时，WEBP是一种有损压缩格式，而且不支持透明度，在api18以后WEBP是一种无损压缩格式，而且支持透明度，有损压缩时，在质量相同的情况下，WEBP格式的图片体积比JPEG小40%，但是编码时间比JPEG长8倍。在无损压缩时，无损的WEBP图片比PNG压缩小26%，但是WEBP的压缩时间是PNG格式压缩时间的5倍。</p></blockquote><p><img src="/2023/05/15/Android-Bitmap-%E5%85%A8%E9%9D%A2%E8%AF%A6%E8%A7%A3/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASk1XMTQwNw==,size_20,color_FFFFFF,t_70,g_se,x_16-16841590469992.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Collection接口</title>
    <link href="/2023/04/24/Collection%E6%8E%A5%E5%8F%A3/"/>
    <url>/2023/04/24/Collection%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>因为接口无法创建对象。接口是抽象化的，无法实例化对象。所以下面将使用collection的子类来介绍collection里面的方法。</p><blockquote><p>这是多态，父类型的引用指向子类型的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Collection</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>return</strong></th><th>method</th><th>description</th></tr></thead><tbody><tr><td align="left">iterator&lt; &gt;</td><td>iterator()</td><td>返回在此 collection 的元素上进行迭代的迭代器</td></tr><tr><td align="left">boolean</td><td>add(E o)</td><td>向集合中添加元素。</td></tr><tr><td align="left">int</td><td>size()</td><td>返回此 collection 中的元素数。</td></tr><tr><td align="left">void</td><td>clear()</td><td>清空集合</td></tr><tr><td align="left">void</td><td>isEmpty()</td><td>判断集合是否为空，个数是否为0；</td></tr><tr><td align="left">boolean</td><td>remov(Object o)</td><td>删除集合中的某个元素</td></tr><tr><td align="left">boolean</td><td>contains(Object o)</td><td>判断集合中是否包含元素o，包含返回true</td></tr><tr><td align="left">Objec[ ]</td><td>toArray()</td><td>将集合转化成数组</td></tr><tr><td align="left">boolean</td><td>addAll(Collection&lt; ? extend E  &gt;)</td><td>向集合中添加一个集合</td></tr><tr><td align="left">boolean</td><td>retainAll(Collecyion  &lt; ? &gt;  o )</td><td>两个集合合并，取交集。</td></tr></tbody></table><p>开始测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Collection&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//自动装箱，集合中只能存储对象的地址，不能存放基本数据类型和对象。</span><br>        list.add(<span class="hljs-number">212</span>);<br>        list.add(<span class="hljs-string">&#x27;3&#x27;</span>);<br>        list.add(<span class="hljs-number">2.454</span>);<br>        list.add(<span class="hljs-string">&quot;夸克&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> list.size();<br>        System.out.println(a);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> list.contains(<span class="hljs-string">&quot;夸克&quot;</span>);<br>        System.out.println(b);<br>        list.clear();<br>        System.out.println(list.isEmpty());<br>        Collection&lt;Object&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list2.add(<span class="hljs-string">&quot;浩克&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;浩克&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;夸克&quot;</span>);<br>        list.addAll(list2);<br>        list.retainAll(list2);<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重点：iterator迭代器"><a href="#重点：iterator迭代器" class="headerlink" title="重点：iterator迭代器"></a>重点：iterator迭代器</h2><p>迭代器是一个对象，里面的方法有：</p><table><thead><tr><th><strong>方法摘要</strong></th><th></th><th></th></tr></thead><tbody><tr><td><code> boolean</code></td><td>hasNext()</td><td>如果仍有元素可以迭代，则返回 <code>true</code>。</td></tr><tr><td><code> E</code></td><td>next()</td><td>返回迭代的下一个元素。</td></tr><tr><td><code> void</code></td><td>remove() 。</td><td>从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）</td></tr></tbody></table><img src="/2023/04/24/Collection%E6%8E%A5%E5%8F%A3/004-迭代集合的原理.png" alt="004-迭代集合的原理" style="zoom: 200%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Collection&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-comment">//自动装箱，集合中只能存储对象的地址，不能存放基本数据类型和对象。</span><br>        list.add(<span class="hljs-number">212</span>);<br>        list.add(<span class="hljs-string">&#x27;3&#x27;</span>);<br>        list.add(<span class="hljs-number">2.454</span>);<br>        list.add(<span class="hljs-string">&quot;夸克&quot;</span>);<br>        Iterator&lt;Object&gt; iterator = list.iterator();<br>       <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(a.toString());<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2023/04/19/%E9%9B%86%E5%90%88/"/>
    <url>/2023/04/19/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>数组其实就是一个集合。集合实际上就是一个容器。可以来容纳其它类型的数据。</p><ol><li><p>集合不能直接存储基本数据类型，另外集合也不能直接存储java对象，</p></li><li><p>集合当中存储的都是java对象的内存地址。（或者说集合中存储的是引用。）<br>    list.add(100); &#x2F;&#x2F;自动装箱Integer<br>       注意：<br>           集合在java中本身是一个容器，是一个对象。<br>           集合中任何时候存储的都是“引用”。</p></li><li><p>在java中每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，等于将数据放到了不同的数据结构当中。</p><p>什么是数据结构？数据存储的结构就是数据结构。不同的数据结构，数据存储方式不同。例如：<br>数组、二叉树、链表、哈希表…</p></li><li><p>在java中集合分为两大类：<br>    一类是单个方式存储元素：单个方式存储元素，这一类集合中超级父接口：java.util.Collection;</p></li></ol><img src="/2023/04/19/%E9%9B%86%E5%90%88/image-20230419145302429.png" alt="image-20230419145302429"><p>一类是以键值对儿的方式存储元素：以键值对的方式存储元素，这一类集合中超级父接口：java.util.Map;</p><p><img src="/2023/04/19/%E9%9B%86%E5%90%88/image-20230419160047240.png" alt="image-20230419160047240"></p><p>注意：</p><ol><li>Map集合和Collection集合没有任何关系</li><li>Map集合以key和value这种键值对的方式存储元素</li><li>key和value都是存储java对象的内存地址</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中字符串的拼接</title>
    <link href="/2023/04/19/Java%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5/"/>
    <url>/2023/04/19/Java%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>Java中字符串一旦创建，就是不可变的。</p><h1 id="一、“-”-操作符"><a href="#一、“-”-操作符" class="headerlink" title="一、“+” 操作符"></a>一、“+” 操作符</h1><p>“+” 操作符是字符串拼接最常用的方法之一。</p><p>使用“+”，字符串的发生拼接时候，会创建一个新的字符串，如果发生大量的字符串的拼接，就会在方法区里面的字符串常量池内不断的出现新的字符串。导致内存大量的浪费。给Java的方法区常量池带来很大的压力。</p><h1 id="二、StringBuffer"><a href="#二、StringBuffer" class="headerlink" title="二、StringBuffer"></a>二、StringBuffer</h1><p>构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br></code></pre></td></tr></table></figure><p>底层是一个char类型的数组。如果char类型的数组满了，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">AbstractStringBuilder(<span class="hljs-params">int</span> <span class="hljs-params">capacity</span>)</span> &#123;<br>    value = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span><span class="hljs-literal">[<span class="hljs-identifier">capacity</span>]</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>append方法是追加的意思，如果char类型的数组满了，append方法会给数组扩容。</p><p>简要分析一下append的底层逻辑：</p><ol><li>可以看到append方法，这个是追加String类型的字符。方法重载，对应的还有int、float、long、boolean等类型的append方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span> &#123;<br>    toStringCache = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">super</span>.append(str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>append方法调用的是父类的方法。我们可以看到方法体里面有一个ensureCapasityInternal方法——确保内部容量。在它的底层就有数组扩容的逻辑。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span> &#123;<br>    <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> appendNull();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> str.length();<br>    ensureCapacityInternal(count + len);<br>    str.getChars(<span class="hljs-number">0</span>, len, value, count);<br>    count += len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此外，我们可以看到str&#x3D;&#x3D;null时候，这时候会给字符串追加一个null的字符串。如下：<img src="/2023/04/19/Java%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5/image-20230419021203366.png" alt="image-20230419021203366"></p><p>将这个字符串中的字符复制到目标字符数组中： str.getChars(0, len, value, count);</p><ol start="3"><li>如果我们研究ensureCapasityInternal的底层逻辑，会发现它是通过数组复制实现的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] copyOf(<span class="hljs-type">char</span>[] original, <span class="hljs-type">int</span> newLength) &#123;<br>    <span class="hljs-type">char</span>[] copy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[newLength];<br>    System.arraycopy(original, <span class="hljs-number">0</span>, copy, <span class="hljs-number">0</span>,<br>                     Math.min(original.length, newLength));<br>    <span class="hljs-keyword">return</span> copy;<br>&#125;<br></code></pre></td></tr></table></figure><p>总之，append方法当追加的字符超过数组容量时，会自动扩容。</p><h3 id="如何优化StringBuffer的性能？"><a href="#如何优化StringBuffer的性能？" class="headerlink" title="如何优化StringBuffer的性能？"></a>如何优化StringBuffer的性能？</h3><p>在创建StringBuffer时候尽可能的给定一个初始化容量，最好减少底层数组的扩容次数，与估计一下，给出一个合适的数组容量。</p><p>可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">44</span>);<br></code></pre></td></tr></table></figure><h1 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h1><p>为什么String字符串，使用“+”会创建一个新的字符串，而不是使用之前的字符串？</p><p>String底层也是一个char数组，但是使用了fina修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** The value is used for character storage. */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br></code></pre></td></tr></table></figure><p>但是StringBuffer底层的char数组没有使用final修饰。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The value is used for character storage.</span><br><span class="hljs-comment"> */</span><br>char<span class="hljs-selector-attr">[]</span> value;<br></code></pre></td></tr></table></figure><p><a href="https://www.5axxw.com/tools/api/jdk_cn_6.html">StringBuffer的相关方法</a></p><h1 id="三、StringBuilder"><a href="#三、StringBuilder" class="headerlink" title="三、StringBuilder"></a>三、StringBuilder</h1><p>使用和StringBuffer类似，里面的方法也类似。</p><p>区别：  StringBuilder的方法线程不安全；</p><p>​            StringBuffer的方法都有synchronized关键字修饰，是线程安全的。</p>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android 里面的Context</title>
    <link href="/2023/04/15/android-%E9%87%8C%E9%9D%A2%E7%9A%84Context/"/>
    <url>/2023/04/15/android-%E9%87%8C%E9%9D%A2%E7%9A%84Context/</url>
    
    <content type="html"><![CDATA[<h1 id="Context都没弄明白，还怎么做Android开发？"><a href="#Context都没弄明白，还怎么做Android开发？" class="headerlink" title="Context都没弄明白，还怎么做Android开发？"></a>Context都没弄明白，还怎么做Android开发？</h1><p><strong>Activity mActivity &#x3D;new Activity()</strong></p><p>作为Android开发者，不知道你有没有思考过这个问题，Activity可以new吗？Android的应用程序开发采用JAVA语言，Activity本质上也是一个对象，那上面的写法有什么问题呢？估计很多人说不清道不明。Android程序不像Java程序一样，随便创建一个类，写个main()方法就能运行，Android应用模型是基于组件的应用设计模式，组件的运行要有一个完整的Android工程环境，在这个环境下，Activity、Service等系统组件才能够正常工作，而这些组件并不能采用普通的Java对象创建方式，new一下就能创建实例了，而是要有它们各自的上下文环境，也就是我们这里讨论的Context。可以这样讲，Context是维持Android程序中各组件能够正常工作的一个核心功能类。</p><h2 id="Context到底是什么"><a href="#Context到底是什么" class="headerlink" title="Context到底是什么"></a>Context到底是什么</h2><p>Context的中文翻译为：语境; 上下文; 背景; 环境，在开发中我们经常说称之为“上下文”，那么这个“上下文”到底是指什么意思呢？在语文中，我们可以理解为语境，在程序中，我们可以理解为当前对象在程序中所处的一个环境，一个与系统交互的过程。比如微信聊天，此时的“环境”是指聊天的界面以及相关的数据请求与传输，Context在加载资源、启动Activity、获取系统服务、创建View等操作都要参与。</p><p>那Context到底是什么呢？一个Activity就是一个Context，一个Service也是一个Context。Android程序员把“场景”抽象为Context类，他们认为用户和操作系统的每一次交互都是一个场景，比如打电话、发短信，这些都是一个有界面的场景，还有一些没有界面的场景，比如后台运行的服务（Service）。一个应用程序可以认为是一个工作环境，用户在这个环境中会切换到不同的场景，这就像一个前台秘书，她可能需要接待客人，可能要打印文件，还可能要接听客户电话，而这些就称之为不同的场景，前台秘书可以称之为一个应用程序。</p><h2 id="如何生动形象的理解Context"><a href="#如何生动形象的理解Context" class="headerlink" title="如何生动形象的理解Context"></a>如何生动形象的理解Context</h2><p>上面的概念中采用了通俗的理解方式，将Context理解为“上下文”或者“场景”，如果你仍然觉得很抽象，不好理解。在这里我给出一个可能不是很恰当的比喻，希望有助于大家的理解：一个Android应用程序，可以理解为一部电影或者一部电视剧，Activity，Service，Broadcast Receiver，Content Provider这四大组件就好比是这部戏里的四个主角：胡歌，霍建华，诗诗，Baby。他们是由剧组（系统）一开始就定好了的，整部戏就是由这四位主演领衔担纲的，所以这四位主角并不是大街上随随便便拉个人（new 一个对象）都能演的。有了演员当然也得有摄像机拍摄啊，他们必须通过镜头（Context）才能将戏传递给观众，这也就正对应说四大组件（四位主角）必须工作在Context环境下（摄像机镜头）。那Button，TextView，LinearLayout这些控件呢，就好比是这部戏里的配角或者说群众演员，他们显然没有这么重用，随便一个路人甲路人乙都能演（可以new一个对象），但是他们也必须要面对镜头（工作在Context环境下），所以<code>Button mButton=new Button（Context）</code>是可以的。虽然不很恰当，但还是很容易理解的，希望有帮助。</p><h3 id="源码中的Context"><a href="#源码中的Context" class="headerlink" title="源码中的Context"></a>源码中的Context</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment"><span class="language-markdown">/**</span></span><br><span class="language-markdown"><span class="hljs-comment"> <span class="hljs-emphasis">*</span></span> Interface to global <span class="language-markdown"><span class="hljs-emphasis">information about an application environment.  This is</span></span></span><br><span class="hljs-emphasis"><span class="language-markdown"><span class="hljs-comment"> *</span> an</span> abstract class whose <span class="language-markdown">implementation is provided by</span></span><br><span class="language-markdown"><span class="hljs-comment"> <span class="hljs-emphasis">*</span></span> the Android system. <span class="language-markdown"><span class="hljs-emphasis"> It</span></span></span><br><span class="hljs-emphasis"><span class="language-markdown"><span class="hljs-comment"> *</span></span> allows access to <span class="language-markdown">application-specific resources and classes, as well as</span></span><br><span class="language-markdown"><span class="hljs-comment"> <span class="hljs-emphasis">*</span></span> up-calls for application-level <span class="language-markdown"><span class="hljs-emphasis">operations such as launching activities,</span></span></span><br><span class="hljs-emphasis"><span class="language-markdown"><span class="hljs-comment"> *</span></span> broadcasting and receiving <span class="language-markdown">intents, etc.</span></span><br><span class="language-markdown"><span class="hljs-comment"> <span class="hljs-emphasis">*/</span></span></span><br>public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span> </span>&#123;<br>    <span class="hljs-comment"><span class="language-markdown"><span class="hljs-emphasis">/*</span>*</span></span><br><span class="language-markdown"><span class="hljs-comment"><span class="hljs-code">     *</span></span> File creation mode: <span class="language-markdown"><span class="hljs-code">the default mode,</span></span> where the created <span class="language-markdown"><span class="hljs-code">file can only</span></span></span><br><span class="hljs-code"><span class="language-markdown"><span class="hljs-comment">     * be accessed by</span></span> the calling application <span class="language-markdown"><span class="hljs-code">(or</span></span> all applications sharing <span class="language-markdown"><span class="hljs-code">the</span></span></span><br><span class="hljs-code"><span class="language-markdown"><span class="hljs-comment">     * same user ID).</span></span></span><br><span class="hljs-code"><span class="language-markdown"><span class="hljs-comment">     * @see #MODE_WORLD_READABLE</span></span></span><br><span class="hljs-code"><span class="language-markdown"><span class="hljs-comment">     * @see #MODE_WORLD_WRITEABLE</span></span></span><br><span class="hljs-code"><span class="language-markdown"><span class="hljs-comment">     */</span></span></span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> MODE_PRIVATE = <span class="hljs-number">0x0000</span>;<br>    <br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> MODE_WORLD_WRITEABLE = <span class="hljs-number">0x0002</span>;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> MODE_APPEND = <span class="hljs-number">0x8000</span>;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> MODE_MULTI_PROCESS = <span class="hljs-number">0x0004</span>;<br><br>    .<br>    .<br>    .<br>    &#125;<br></code></pre></td></tr></table></figure><p>源码中的注释是这么来解释Context的：Context提供了关于应用环境全局信息的接口。它是一个抽象类，它的执行被Android系统所提供。它允许获取以应用为特征的资源和类型，是一个统领一些资源（应用程序环境变量等）的上下文。就是说，它描述一个应用程序环境的信息（即上下文）；是一个抽象类，Android提供了该抽象类的具体实现类；通过它我们可以获取应用程序的资源和类（包括应用级别操作，如启动Activity，发广播，接受Intent等）。既然上面Context是一个抽象类，那么肯定有他的实现类咯，我们在Context的源码中通过IDE可以查看到他的子类最终可以得到如下关系图：</p><p><img src="/2023/04/15/android-%E9%87%8C%E9%9D%A2%E7%9A%84Context/1187237-1b4c0cd31fd0193f-16814889776081.webp" alt="Context.png"></p><p>Context类本身是一个纯abstract类，它有两个具体的实现子类：ContextImpl和ContextWrapper。其中ContextWrapper类，如其名所言，这只是一个包装而已，ContextWrapper构造函数中必须包含一个真正的Context引用，同时ContextWrapper中提供了attachBaseContext（）用于给ContextWrapper对象中指定真正的Context对象，调用ContextWrapper的方法都会被转向其所包含的真正的Context对象。ContextThemeWrapper类，如其名所言，其内部包含了与主题（Theme）相关的接口，这里所说的主题就是指在AndroidManifest.xml中通过android：theme为Application元素或者Activity元素指定的主题。当然，只有Activity才需要主题，Service是不需要主题的，因为Service是没有界面的后台场景，所以Service直接继承于ContextWrapper，Application同理。而ContextImpl类则真正实现了Context中的所以函数，应用程序中所调用的各种Context类的方法，其实现均来自于该类。一句话总结：Context的两个子类分工明确，其中ContextImpl是Context的具体实现类，ContextWrapper是Context的包装类。Activity，Application，Service虽都继承自ContextWrapper（Activity继承自ContextWrapper的子类ContextThemeWrapper），但它们初始化的过程中都会创建ContextImpl对象，由ContextImpl实现Context中的方法。</p><h2 id="一个应用程序有几个Context"><a href="#一个应用程序有几个Context" class="headerlink" title="一个应用程序有几个Context"></a>一个应用程序有几个Context</h2><p>其实这个问题本身并没有什么意义，关键还是在于对Context的理解，从上面的关系图我们已经可以得出答案了，在应用程序中Context的具体实现子类就是：Activity，Service，Application。那么<code>Context数量=Activity数量+Service数量+1</code>。当然如果你足够细心，可能会有疑问：我们常说四大组件，这里怎么只有Activity，Service持有Context，那Broadcast Receiver，Content Provider呢？Broadcast Receiver，Content Provider并不是Context的子类，他们所持有的Context都是其他地方传过去的，所以并不计入Context总数。上面的关系图也从另外一个侧面告诉我们Context类在整个Android系统中的地位是多么的崇高，因为很显然Activity，Service，Application都是其子类，其地位和作用不言而喻。</p><h2 id="Context能干什么"><a href="#Context能干什么" class="headerlink" title="Context能干什么"></a>Context能干什么</h2><p>Context到底可以实现哪些功能呢？这个就实在是太多了，弹出Toast、启动Activity、启动Service、发送广播、操作数据库等等都需要用到Context。</p><h2 id="Context作用域"><a href="#Context作用域" class="headerlink" title="Context作用域"></a>Context作用域</h2><p>虽然Context神通广大，但并不是随便拿到一个Context实例就可以为所欲为，它的使用还是有一些规则限制的。由于Context的具体实例是由ContextImpl类去实现的，因此在绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如启动Activity，还有弹出Dialog。出于安全原因的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。</p><p><img src="/2023/04/15/android-%E9%87%8C%E9%9D%A2%E7%9A%84Context/1187237-fb32b0f992da4781.webp" alt="Context作用域.png"></p><p>从上图我们可以发现Activity所持有的Context的作用域最广，无所不能。因为Activity继承自ContextThemeWrapper，而Application和Service继承自ContextWrapper，很显然ContextThemeWrapper在ContextWrapper的基础上又做了一些操作使得Activity变得更强大，这里我就不再贴源码给大家分析了，有兴趣的童鞋可以自己查查源码。上图中的YES和NO我也不再做过多的解释了，这里我说一下上图中Application和Service所不推荐的两种使用情况。</p><p>1：如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错<code>android.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</code>这是因为非Activity类型的Context并没有所谓的任务栈，所以待启动的Activity就找不到栈了。解决这个问题的方法就是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就为它创建一个新的任务栈，而此时Activity是以singleTask模式启动的。所有这种用Application启动Activity的方式不推荐使用，Service同Application。<br> 2：在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。<br> 一句话总结：凡是跟UI相关的，都应该使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例都可以，当然了，注意Context引用的持有，防止内存泄漏。</p><h2 id="如何获取Context"><a href="#如何获取Context" class="headerlink" title="如何获取Context"></a>如何获取Context</h2><p>通常我们想要获取Context对象，主要有以下四种方法<br> 1：View.getContext,返回当前View对象的Context对象，通常是当前正在展示的Activity对象。<br> 2：Activity.getApplicationContext,获取当前Activity所在的(应用)进程的Context对象，通常我们使用Context对象时，要优先考虑这个全局的进程Context。<br> 3：ContextWrapper.getBaseContext():用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，这个方法在实际开发中使用并不多，也不建议使用。<br> 4：Activity.this 返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。</p><h3 id="getApplication-和getApplicationContext"><a href="#getApplication-和getApplicationContext" class="headerlink" title="getApplication()和getApplicationContext()"></a>getApplication()和getApplicationContext()</h3><p>上面说到获取当前Application对象用getApplicationContext，不知道你有没有联想到getApplication()，这两个方法有什么区别？相信这个问题会难倒不少开发者。</p><p>![getApplication(C:&#x2F;Users&#x2F;sc&#x2F;Desktop&#x2F;新建文件夹&#x2F;android 里面的Context&#x2F;1187237-593b912ecd199046.webp)&amp;getApplicationContext().png](android 里面的Context&#x2F;1187237-593b912ecd199046.webp)</p><p>程序是不会骗人的，我们通过上面的代码，打印得出两者的内存地址都是相同的，看来它们是同一个对象。其实这个结果也很好理解，因为前面已经说过了，Application本身就是一个Context，所以这里获取getApplicationContext()得到的结果就是Application本身的实例。那么问题来了，既然这两个方法得到的结果都是相同的，那么Android为什么要提供两个功能重复的方法呢？实际上这两个方法在作用域上有比较大的区别。getApplication()方法的语义性非常强，一看就知道是用来获取Application实例的，但是这个方法只有在Activity和Service中才能调用的到。那么也许在绝大多数情况下我们都是在Activity或者Service中使用Application的，但是如果在一些其它的场景，比如BroadcastReceiver中也想获得Application的实例，这时就可以借助getApplicationContext()方法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">publicclassMyReceiverextendsBroadcastReceiver&#123;<br><br><span class="hljs-meta">@Override</span><br>publicvoidonReceive(Contextcontext,Intentintent)&#123;<br>ApplicationmyApp=(Application)context.getApplicationContext();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Context引起的内存泄露"><a href="#Context引起的内存泄露" class="headerlink" title="Context引起的内存泄露"></a>Context引起的内存泄露</h2><p>但Context并不能随便乱用，用的不好有可能会引起内存泄露的问题，下面就示例两种错误的引用方式。</p><h3 id="错误的单例模式"><a href="#错误的单例模式" class="headerlink" title="错误的单例模式"></a>错误的单例模式</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-keyword">private</span> Context mContext;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>(<span class="hljs-params">Context context</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.mContext = context;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span>(<span class="hljs-params">Context context</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton(context);<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个非线程安全的单例模式，instance作为静态对象，其生命周期要长于普通的对象，其中也包含Activity，假如Activity A去getInstance获得instance对象，传入this，常驻内存的Singleton保存了你传入的Activity A对象，并一直持有，即使Activity被销毁掉，但因为它的引用还存在于一个Singleton中，就不可能被GC掉，这样就导致了内存泄漏。</p><h3 id="View持有Activity引用"><a href="#View持有Activity引用" class="headerlink" title="View持有Activity引用"></a>View持有Activity引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Drawable mDrawable;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle saveInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(saveInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-type">ImageView</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageView</span>(<span class="hljs-built_in">this</span>);<br>        mDrawable = getResources().getDrawable(R.drawable.ic_launcher);<br>        iv.setImageDrawable(mDrawable);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有一个静态的Drawable对象当ImageView设置这个Drawable时，ImageView保存了mDrawable的引用，而ImageView传入的this是MainActivity的mContext，因为被static修饰的mDrawable是常驻内存的，MainActivity是它的间接引用，MainActivity被销毁时，也不能被GC掉，所以造成内存泄漏。</p><h2 id="正确使用Context"><a href="#正确使用Context" class="headerlink" title="正确使用Context"></a>正确使用Context</h2><p>一般Context造成的内存泄漏，几乎都是当Context销毁的时候，却因为被引用导致销毁失败，而Application的Context对象可以理解为随着进程存在的，所以我们总结出使用Context的正确姿势：<br> 1：当Application的Context能搞定的情况下，并且生命周期长的对象，优先使用Application的Context。<br> 2：不要让生命周期长于Activity的对象持有到Activity的引用。<br> 3：尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用，如果使用静态内部类，将外部实例引用作为弱引用持有。</p><p>本文参考阅读：<br> <a href="https://link.jianshu.com/?t=http://blog.csdn.net/guolin_blog/article/details/47028975">Android Context完全解析，你所不知道的Context的各种细节</a><br> <a href="https://link.jianshu.com/?t=http://blog.csdn.net/yanbober/article/details/45967639">Android应用Context详解及源码解析</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android下的资源目录</title>
    <link href="/2023/04/15/Android%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95/"/>
    <url>/2023/04/15/Android%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Android项目后会产生assets与res的两个文件夹。"><a href="#Android项目后会产生assets与res的两个文件夹。" class="headerlink" title="Android项目后会产生assets与res的两个文件夹。"></a>Android项目后会产生assets与res的两个文件夹。</h1><p>相同：理论上他们都是存放资源的文件夹。</p><p>区别： 1.assets:不会在R.java文件下生成相应的标记，存放到这里的资源在运行打包的时候都会打入程序安装包中。<strong>无法通过R资源清单访问的原生资源</strong></p><p>​2.res：会在R.java文件下生成标记，这里的资源会在运行打包操作的时候判断哪些被使用到了，没有被使用到的文件资源是不会打包到安装包中的。<strong>可通过R资源清单类访问的资源</strong></p><h1 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h1><p>assets 目录是专门用于保存各种外部文件的。常见的有：图像、音视频、配置文件、字体、自带数据库等。之所以说它适合用来管理这些文件，是因为应用程序在编译时不会去处理这个目录下的文件，但是却会将它们打包进 APK 中。而其它你随便创建的目录在编译时就会被直接忽略掉。同时，你可以在 assets 目录内任意创建目录层级关系，这对于有大量外部文件需要集成的应用来说，就能很方便地分类管理了。</p><p>在 APK 开发中，有一种管理配置信息的做法比较常见：直接将配置信息文件放入 assets 目录中管理，程序首次运行时将这里面的配置信息拷贝到外部的可操作的目录下，后续程序的运行均靠这份保存在外部的配置信息为准，assets 中的信息仅作为原始配置信息的备份。</p><p>但是，assets 目录在使用上也还是有一点小缺憾的。</p><p>assets 目录内的文件在程序打包发布以后就是只读的。就是你只能读取那里面的文件，而无法修改或增加文件。这条特性其实也可以理解，因为应用程序一旦打包发布了，它就应该是只读的。而 assets 目录又是直接保存在 APK 内部的，所以它自然也不能修改或增加内容了。实在要想增加内容，通过 Database 或者 SharedPreferences 往 &#x2F;data&#x2F;data 目录下保存就好了嘛。再或者这两者不能满足你的要求，你也可以直接将它们保存在 sdcard 下面嘛。反正现在市面上的 APK 在 sdcard 里创建自己的数据文件夹的可不少。</p><h1 id="res"><a href="#res" class="headerlink" title="res"></a>res</h1><p>在res文件夹下其实还可以定义子目录：</p><p>资源文件</p><blockquote><p>&#x2F;res&#x2F;drawable：存放各种位图文件或者对应的可使用的 XML 文件。</p></blockquote><p>存放布局文件</p><blockquote><p>&#x2F;res&#x2F;layout：存放各种用户界面的布局文件</p></blockquote><p>存放动画资源</p><blockquote><p>&#x2F;res&#x2F;anim：存放定义补间动画的xml文件</p></blockquote><p>放基于XML的菜单描述</p><blockquote><p>res&#x2F;menu：存放为应用程序定义各种菜单的资源，包括选项菜单，子菜单，上下文菜单的资源</p></blockquote><p>存放通用的文件， 该文件夹内的文件将不会被编译成二进制文件，按原样复制到设备上。</p><blockquote><p>res&#x2F;raw： 该文件夹内的文件将不会被编译成二进制文件，按原样复制到设备上。使用方法是getResource().OpenRawResources(ID),其中参数ID的形式是R.raw.XXX.。</p></blockquote><p>存放字符串、尺寸值</p><blockquote><p>res&#x2F;values：存放各种简单值的xml文件。这些简单值包括字符串值，整数值，颜色值，数组等</p></blockquote><p>存放通用的XML文件</p><blockquote><p>res&#x2F;xml：可以在Activity中使用getResource().getXML()读取这里的资源文件</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>短句</title>
    <link href="/2023/04/10/%E7%9F%AD%E5%8F%A5/"/>
    <url>/2023/04/10/%E7%9F%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>人生是旷野而非轨道。</p><p>盲目冒险，不是勇敢，而是愚蠢。</p><p>我们都是平凡的小人，我们都想要走出平凡的深渊。</p><p>千万不要低估旁人的智慧，往往只有蠢才会认为别人愚蠢。</p><p>但凡上当受骗的人，难道真的是他们愚蠢吗？不是，只是他们内心愿意去相信罢了。</p><p>事情既然已经发生，就无法阻止。我需要积极的改变自己，哪怕最终所有的事情都面目全非，也不会因为顾及这些。而放缓自己成长的脚步。</p><p>其实真正禁锢一个人成就的，往往不是天资，而是思想。</p><p>生死是世间最大的公平。</p><p>心胸浅薄之人，常会因为谩骂而愤怒，因为夸赞而喜悦。但其实这不过都是旁人对你的看法罢了。因为旁人的看法，而活着的人，注定是可怜的人。</p><p>有时候，阻止人行动的，往往不是物质上的难题，而是心灵上的枷锁。</p><p>命是定数，运是变数。</p><p>态度是心的面具。</p><p>面对困境，就把心交给希望。</p><p>雄关漫道真如铁，如今迈步从头越。险就一身乾坤精，我心依旧望苍天。</p>]]></content>
    
    
    
    <tags>
      
      <tag>文字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何实现图片模糊</title>
    <link href="/2023/03/31/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A/"/>
    <url>/2023/03/31/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="1-项目需求："><a href="#1-项目需求：" class="headerlink" title="1.项目需求："></a>1.项目需求：</h1><p>​当系统软件弹出dialog时候，将当前的页面背景设置成dialog的模糊背景。</p><h1 id="2-实现思路："><a href="#2-实现思路：" class="headerlink" title="2.实现思路："></a>2.实现思路：</h1><ol><li>截屏，获取当前activity的界面</li><li>对截取到的图片做高斯模糊处理</li><li>将处理好的图片作为背景图</li></ol><h2 id="1-截屏的方法"><a href="#1-截屏的方法" class="headerlink" title="1.截屏的方法"></a>1.截屏的方法</h2><p>Android 截屏分为四种：<strong>View 截屏</strong>、<strong>WebView 截屏</strong>、<strong>系统截屏</strong> 和 <strong>adb 截屏</strong></p><h3 id="1-View-截屏"><a href="#1-View-截屏" class="headerlink" title="1.View 截屏"></a>1.View 截屏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 截屏</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activity 截屏的activity</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 截屏图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">takeScreenShot</span><span class="hljs-params">(Activity activity)</span> &#123;<br>        <span class="hljs-comment">/*获取windows中最顶层的view*/</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> activity.getWindow().getDecorView();<br><br>        <span class="hljs-comment">//允许当前窗口保存缓存信息</span><br>        view.setDrawingCacheEnabled(<span class="hljs-literal">true</span>);<br>        view.buildDrawingCache();<br><br>        <span class="hljs-comment">//获取状态栏高度</span><br>        <span class="hljs-type">Rect</span> <span class="hljs-variable">rect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>();<br>        view.getWindowVisibleDisplayFrame(rect);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">statusBarHeight</span> <span class="hljs-operator">=</span> rect.top;<br><br>        <span class="hljs-type">WindowManager</span> <span class="hljs-variable">windowManager</span> <span class="hljs-operator">=</span> activity.getWindowManager();<br><br>        <span class="hljs-comment">//获取屏幕宽和高</span><br>        <span class="hljs-type">DisplayMetrics</span> <span class="hljs-variable">outMetrics</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayMetrics</span>();<br>        windowManager.getDefaultDisplay().getMetrics(outMetrics);<br><span class="hljs-comment">//        int width = outMetrics.widthPixels;</span><br><span class="hljs-comment">//        int height = outMetrics.heightPixels;</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span>  activity.getWindow().getDecorView().getRootView().getWidth();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span>  activity.getWindow().getDecorView().getRootView().getHeight();<br><br>        <span class="hljs-comment">//去掉状态栏</span><br><span class="hljs-comment">//        Bitmap bitmap = Bitmap.createBitmap(view.getDrawingCache(), 0, statusBarHeight, width,</span><br><span class="hljs-comment">//                height - statusBarHeight);</span><br>        <span class="hljs-keyword">if</span> (HideBottomMenuUtils.hasNavBar(activity)) &#123;<br>            HideBottomMenuUtils.hideBottomUIMenu(activity.getWindow());<br>        &#125;<br><br>        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> Bitmap.createBitmap( width, height, Bitmap.Config.ARGB_8888);<br>        <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(bitmap);<br>        view.draw(canvas);<br><br>        <span class="hljs-comment">//销毁缓存信息</span><br>        view.destroyDrawingCache();<br>        view.setDrawingCacheEnabled(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-keyword">return</span> bitmap;<br>    &#125;<br></code></pre></td></tr></table></figure><p>View 截图是将当前 View 界面截取下来，而对于屏幕上其他信息比如：状态栏或其他应用的界面将无法截取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.app.Activity;<br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.graphics.Canvas;<br><span class="hljs-keyword">import</span> android.graphics.Matrix;<br><span class="hljs-keyword">import</span> android.graphics.Rect;<br><span class="hljs-keyword">import</span> android.util.DisplayMetrics;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.WindowManager;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@desc</span>  设置模糊背景 </span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> luxi </span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/3/14 9:09</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastBlurUtility</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * 获得模糊化的背景图片</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> activity 获取模糊化的背景activity</span><br><span class="hljs-comment">           <span class="hljs-doctag">@return</span> 模糊化的背景图片</span><br><span class="hljs-comment">               */</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">getBlurBackgroundDrawer</span><span class="hljs-params">(Activity activity)</span> &#123;<br>          <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bmp</span> <span class="hljs-operator">=</span> takeScreenShot(activity);<br>          <span class="hljs-keyword">return</span> startBlurBackground(bmp);<br>              &#125;<br><br>​    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * 截屏</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> activity 截屏的activity</span><br><span class="hljs-comment">           <span class="hljs-doctag">@return</span> 截屏图片</span><br><span class="hljs-comment">               */</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">takeScreenShot</span><span class="hljs-params">(Activity activity)</span> &#123;<br>          <span class="hljs-comment">/*获取windows中最顶层的view*/</span><br>          <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> activity.getWindow().getDecorView();<br><br>     <span class="hljs-comment">//允许当前窗口保存缓存信息</span><br>     view.setDrawingCacheEnabled(<span class="hljs-literal">true</span>);<br>     view.buildDrawingCache();<br><br>     <span class="hljs-comment">//获取状态栏高度</span><br>     <span class="hljs-type">Rect</span> <span class="hljs-variable">rect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>();<br>     view.getWindowVisibleDisplayFrame(rect);<br>     <span class="hljs-type">int</span> <span class="hljs-variable">statusBarHeight</span> <span class="hljs-operator">=</span> rect.top;<br><br>     <span class="hljs-type">WindowManager</span> <span class="hljs-variable">windowManager</span> <span class="hljs-operator">=</span> activity.getWindowManager();<br><br>     <span class="hljs-comment">//获取屏幕宽和高</span><br>     <span class="hljs-type">DisplayMetrics</span> <span class="hljs-variable">outMetrics</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayMetrics</span>();<br>     windowManager.getDefaultDisplay().getMetrics(outMetrics);<br>     <span class="hljs-comment">//        int width = outMetrics.widthPixels;</span><br>     <span class="hljs-comment">//        int height = outMetrics.heightPixels;</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span>  activity.getWindow().getDecorView().getRootView().getWidth();<br>     <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span>  activity.getWindow().getDecorView().getRootView().getHeight();<br><br>     <span class="hljs-comment">//去掉状态栏</span><br>     <span class="hljs-comment">//        Bitmap bitmap = Bitmap.createBitmap(view.getDrawingCache(), 0, statusBarHeight, width,</span><br>     <span class="hljs-comment">//                height - statusBarHeight);</span><br>     <span class="hljs-keyword">if</span> (HideBottomMenuUtils.hasNavBar(activity)) &#123;<br>         HideBottomMenuUtils.hideBottomUIMenu(activity.getWindow());<br>     &#125;<br><br>     <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> Bitmap.createBitmap( width, height, Bitmap.Config.ARGB_8888);<br>     <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(bitmap);<br>     view.draw(canvas);<br><br>     <span class="hljs-comment">//销毁缓存信息</span><br>     view.destroyDrawingCache();<br>     view.setDrawingCacheEnabled(<span class="hljs-literal">false</span>);<br><br>     <span class="hljs-keyword">return</span> bitmap;<br>         &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">startBlurBackground</span><span class="hljs-params">(Bitmap bkg)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startMs</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">radius</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>; <span class="hljs-comment">//模糊程度</span><br>        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">overlay</span> <span class="hljs-operator">=</span> fastblur(small(bkg), (<span class="hljs-type">int</span>) radius);<br>        Log.i(<span class="hljs-string">&quot;FastBlurUtility&quot;</span>, <span class="hljs-string">&quot;=====blur time:&quot;</span> + (System.currentTimeMillis() - startMs));<br>        <span class="hljs-keyword">return</span> big(overlay);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * 放大图片</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> bitmap 需要放大的图片</span><br><span class="hljs-comment">           <span class="hljs-doctag">@return</span> 放大的图片</span><br><span class="hljs-comment">               */</span><br>              <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">big</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br>          <span class="hljs-type">Matrix</span> <span class="hljs-variable">matrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Matrix</span>();<br>          matrix.postScale(<span class="hljs-number">4f</span>, <span class="hljs-number">4f</span>);<br>          <span class="hljs-type">Bitmap</span> <span class="hljs-variable">resizeBmp</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(bitmap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class="hljs-literal">true</span>);<br>          <span class="hljs-keyword">return</span> resizeBmp;<br>              &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * 缩小图片</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> bitmap 需要缩小的图片</span><br><span class="hljs-comment">           <span class="hljs-doctag">@return</span> 缩小的图片</span><br><span class="hljs-comment">               */</span><br>              <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bitmap <span class="hljs-title function_">small</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br>          <span class="hljs-type">Matrix</span> <span class="hljs-variable">matrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Matrix</span>();<br>          matrix.postScale(<span class="hljs-number">0.25f</span>, <span class="hljs-number">0.25f</span>);<br>          <span class="hljs-type">Bitmap</span> <span class="hljs-variable">resizeBmp</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(bitmap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class="hljs-literal">true</span>);<br>          <span class="hljs-keyword">return</span> resizeBmp;<br>              &#125;<br><br>​    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * 将图片模糊化</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> sentBitmap 需要模糊的图片</span><br><span class="hljs-comment">           <span class="hljs-doctag">@param</span> radius     模糊程度</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@return</span> 模糊后的图片</span><br><span class="hljs-comment">               /</span><br><span class="hljs-comment">                   private static Bitmap fastblur(Bitmap sentBitmap, int radius) &#123;</span><br><span class="hljs-comment">               Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);</span><br><span class="hljs-comment">               if (radius &lt; 1) &#123;</span><br><span class="hljs-comment">                   return (null);</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               int w = bitmap.getWidth();</span><br><span class="hljs-comment">               int h = bitmap.getHeight();</span><br><span class="hljs-comment">               int[] pix = new int[w * h];</span><br><span class="hljs-comment">               bitmap.getPixels(pix, 0, w, 0, 0, w, h);</span><br><span class="hljs-comment">               int wm = w - 1;</span><br><span class="hljs-comment">               int hm = h - 1;</span><br><span class="hljs-comment">               int wh = w * h;</span><br><span class="hljs-comment">               int div = radius + radius + 1;</span><br><span class="hljs-comment">               int r[] = new int[wh];</span><br><span class="hljs-comment">               int g[] = new int[wh];</span><br><span class="hljs-comment">               int b[] = new int[wh];</span><br><span class="hljs-comment">               int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;</span><br><span class="hljs-comment">               int vmin[] = new int[Math.max(w, h)];</span><br><span class="hljs-comment">               int divsum = (div + 1) &gt;&gt; 1;</span><br><span class="hljs-comment">               divsum *= divsum;</span><br><span class="hljs-comment">               int dv[] = new int[256 * divsum];</span><br><span class="hljs-comment">               for (i = 0; i &lt; 256 * divsum; i++) &#123;</span><br><span class="hljs-comment">                   dv[i] = (i / divsum);</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               yw = yi = 0;</span><br><span class="hljs-comment">               int[][] stack = new int[div][3];</span><br><span class="hljs-comment">               int stackpointer;</span><br><span class="hljs-comment">               int stackstart;</span><br><span class="hljs-comment">               int[] sir;</span><br><span class="hljs-comment">               int rbs;</span><br><span class="hljs-comment">               int r1 = radius + 1;</span><br><span class="hljs-comment">               int routsum, goutsum, boutsum;</span><br><span class="hljs-comment">               int rinsum, ginsum, binsum;</span><br><span class="hljs-comment">               for (y = 0; y &lt; h; y++) &#123;</span><br><span class="hljs-comment">                   rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;</span><br><span class="hljs-comment">                   for (i = -radius; i &lt;= radius; i++) &#123;</span><br><span class="hljs-comment">               p = pix[yi + Math.min(wm, Math.max(i, 0))];</span><br><span class="hljs-comment">               sir = stack[i + radius];</span><br><span class="hljs-comment">               sir[0] = (p &amp; 0xff0000) &gt;&gt; 16;</span><br><span class="hljs-comment">               sir[1] = (p &amp; 0x00ff00) &gt;&gt; 8;</span><br><span class="hljs-comment">               sir[2] = (p &amp; 0x0000ff);</span><br><span class="hljs-comment">               rbs = r1 - Math.abs(i);</span><br><span class="hljs-comment">               rsum += sir[0] * rbs;</span><br><span class="hljs-comment">               gsum += sir[1] * rbs;</span><br><span class="hljs-comment">               bsum += sir[2] * rbs;</span><br><span class="hljs-comment">               if (i &gt; 0) &#123;</span><br><span class="hljs-comment">                   rinsum += sir[0];</span><br><span class="hljs-comment">                   ginsum += sir[1];</span><br><span class="hljs-comment">                   binsum += sir[2];</span><br><span class="hljs-comment">               &#125; else &#123;</span><br><span class="hljs-comment">                   routsum += sir[0];</span><br><span class="hljs-comment">                   goutsum += sir[1];</span><br><span class="hljs-comment">                   boutsum += sir[2];</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">                   &#125;</span><br><span class="hljs-comment">                   stackpointer = radius;</span><br><span class="hljs-comment">                   for (x = 0; x &lt; w; x++) &#123;</span><br><span class="hljs-comment">               r[yi] = dv[rsum];</span><br><span class="hljs-comment">               g[yi] = dv[gsum];</span><br><span class="hljs-comment">               b[yi] = dv[bsum];</span><br><span class="hljs-comment">               rsum -= routsum;</span><br><span class="hljs-comment">               gsum -= goutsum;</span><br><span class="hljs-comment">               bsum -= boutsum;</span><br><span class="hljs-comment">               stackstart = stackpointer - radius + div;</span><br><span class="hljs-comment">               sir = stack[stackstart % div];</span><br><span class="hljs-comment">               routsum -= sir[0];</span><br><span class="hljs-comment">               goutsum -= sir[1];</span><br><span class="hljs-comment">               boutsum -= sir[2];</span><br><span class="hljs-comment">               if (y == 0) &#123;</span><br><span class="hljs-comment">                   vmin[x] = Math.min(x + radius + 1, wm);</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               p = pix[yw + vmin[x]];</span><br><span class="hljs-comment">               sir[0] = (p &amp; 0xff0000) &gt;&gt; 16;</span><br><span class="hljs-comment">               sir[1] = (p &amp; 0x00ff00) &gt;&gt; 8;</span><br><span class="hljs-comment">               sir[2] = (p &amp; 0x0000ff);</span><br><span class="hljs-comment">               rinsum += sir[0];</span><br><span class="hljs-comment">               ginsum += sir[1];</span><br><span class="hljs-comment">               binsum += sir[2];</span><br><span class="hljs-comment">               rsum += rinsum;</span><br><span class="hljs-comment">               gsum += ginsum;</span><br><span class="hljs-comment">               bsum += binsum;</span><br><span class="hljs-comment">               stackpointer = (stackpointer + 1) % div;</span><br><span class="hljs-comment">               sir = stack[(stackpointer) % div];</span><br><span class="hljs-comment">               routsum += sir[0];</span><br><span class="hljs-comment">               goutsum += sir[1];</span><br><span class="hljs-comment">               boutsum += sir[2];</span><br><span class="hljs-comment">               rinsum -= sir[0];</span><br><span class="hljs-comment">               ginsum -= sir[1];</span><br><span class="hljs-comment">               binsum -= sir[2];</span><br><span class="hljs-comment">               yi++;</span><br><span class="hljs-comment">                   &#125;</span><br><span class="hljs-comment">                   yw += w;</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               for (x = 0; x &lt; w; x++) &#123;</span><br><span class="hljs-comment">                   rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;</span><br><span class="hljs-comment">                   yp = -radius * w;</span><br><span class="hljs-comment">                   for (i = -radius; i &lt;= radius; i++) &#123;</span><br><span class="hljs-comment">               yi = Math.max(0, yp) + x;</span><br><span class="hljs-comment">               sir = stack[i + radius];</span><br><span class="hljs-comment">               sir[0] = r[yi];</span><br><span class="hljs-comment">               sir[1] = g[yi];</span><br><span class="hljs-comment">               sir[2] = b[yi];</span><br><span class="hljs-comment">               rbs = r1 - Math.abs(i);</span><br><span class="hljs-comment">               rsum += r[yi] * rbs;</span><br><span class="hljs-comment">               gsum += g[yi] * rbs;</span><br><span class="hljs-comment">               bsum += b[yi] * rbs;</span><br><span class="hljs-comment">               if (i &gt; 0) &#123;</span><br><span class="hljs-comment">                   rinsum += sir[0];</span><br><span class="hljs-comment">                   ginsum += sir[1];</span><br><span class="hljs-comment">                   binsum += sir[2];</span><br><span class="hljs-comment">               &#125; else &#123;</span><br><span class="hljs-comment">                   routsum += sir[0];</span><br><span class="hljs-comment">                   goutsum += sir[1];</span><br><span class="hljs-comment">                   boutsum += sir[2];</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               if (i &lt; hm) &#123;</span><br><span class="hljs-comment">                   yp += w;</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">                   &#125;</span><br><span class="hljs-comment">                   yi = x;</span><br><span class="hljs-comment">                   stackpointer = radius;</span><br><span class="hljs-comment">                   for (y = 0; y &lt; h; y++) &#123;</span><br><span class="hljs-comment">               pix[yi] = (0xff000000 &amp; pix[yi]) | (dv[rsum] &lt;&lt; 16) | (dv[gsum] &lt;&lt; 8) | dv[bsum];</span><br><span class="hljs-comment">               rsum -= routsum;</span><br><span class="hljs-comment">               gsum -= goutsum;</span><br><span class="hljs-comment">               bsum -= boutsum;</span><br><span class="hljs-comment">               stackstart = stackpointer - radius + div;</span><br><span class="hljs-comment">               sir = stack[stackstart % div];</span><br><span class="hljs-comment">               routsum -= sir[0];</span><br><span class="hljs-comment">               goutsum -= sir[1];</span><br><span class="hljs-comment">               boutsum -= sir[2];</span><br><span class="hljs-comment">               if (x == 0) &#123;</span><br><span class="hljs-comment">                   vmin[y] = Math.min(y + r1, hm) * w;</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               p = x + vmin[y];</span><br><span class="hljs-comment">               sir[0] = r[p];</span><br><span class="hljs-comment">               sir[1] = g[p];</span><br><span class="hljs-comment">               sir[2] = b[p];</span><br><span class="hljs-comment">               rinsum += sir[0];</span><br><span class="hljs-comment">               ginsum += sir[1];</span><br><span class="hljs-comment">               binsum += sir[2];</span><br><span class="hljs-comment">               rsum += rinsum;</span><br><span class="hljs-comment">               gsum += ginsum;</span><br><span class="hljs-comment">               bsum += binsum;</span><br><span class="hljs-comment">               stackpointer = (stackpointer + 1) % div;</span><br><span class="hljs-comment">               sir = stack[stackpointer];</span><br><span class="hljs-comment">               routsum += sir[0];</span><br><span class="hljs-comment">               goutsum += sir[1];</span><br><span class="hljs-comment">               boutsum += sir[2];</span><br><span class="hljs-comment">               rinsum -= sir[0];</span><br><span class="hljs-comment">               ginsum -= sir[1];</span><br><span class="hljs-comment">               binsum -= sir[2];</span><br><span class="hljs-comment">               yi += w;</span><br><span class="hljs-comment">                   &#125;</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">               bitmap.setPixels(pix, 0, w, 0, 0, w, h);</span><br><span class="hljs-comment">               return (bitmap);</span><br><span class="hljs-comment">                   &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导入litepal依赖遇到的问题</title>
    <link href="/2023/03/31/%E5%AF%BC%E5%85%A5litepal%E4%BE%9D%E8%B5%96%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/03/31/%E5%AF%BC%E5%85%A5litepal%E4%BE%9D%E8%B5%96%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>添加litepal时候遇到了这个问题。</p><p><img src="/2023/03/31/%E5%AF%BC%E5%85%A5litepal%E4%BE%9D%E8%B5%96%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/litepal%E9%97%AE%E9%A2%98_1.png" alt="litepal问题_1"></p><p>参考资料：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/22351830">发布库AAR至mavenCentral看这篇文章就可以了</a></p></li><li><p><a href="https://blog.csdn.net/oubin66/article/details/100171069?spm=1001.2014.3001.5502">一篇文章看懂gradle</a></p></li><li><p><a href="https://docs.gradle.org/current/dsl/index.html">Gradle 官方文档</a></p></li></ul><p>那么buildscript中的repositories和allprojects的repositories的作用和区别是什么呢？<br> 答：<br> 1、 <code>buildscript</code>里是gradle脚本执行所需依赖，分别是对应的maven库和插件<br> 2、 <code>allprojects</code>里是项目本身需要的依赖，比如我现在要依赖我自己maven库的<code>toastutils</code>库，那么我应该将<code>maven &#123;url &#39;https://dl.bintray.com/calvinning/maven&#39;&#125;</code>写在这里，而不是<code>buildscript</code>中，不然找不到。</p><p>作者：CalvinNing<br>链接：<a href="https://www.jianshu.com/p/ee57e4de78a3">https://www.jianshu.com/p/ee57e4de78a3</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">pluginManagement</span> &#123;<br>    <span class="hljs-variable">repositories</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">gradlePluginPortal</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">google</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">mavenCentral</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">jcenter</span>()</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//1.功能位置迁移，原来在工程 build.gradle 的 buildscript 和 allprojects 移动至setting.gradle并改名为pluginManagement 和dependencyResolutionManagement。</span><br><span class="hljs-comment">// 里面的东西依旧可以按照原来的copy过来。</span><br><span class="hljs-variable">dependencyResolutionManagement</span> &#123;<br>    <span class="hljs-variable">repositoriesMode.set</span>(<span class="hljs-variable">RepositoriesMode.FAIL_ON_PROJECT_REPOS</span>)<br>    <span class="hljs-variable">repositories</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">google</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">mavenCentral</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">jcenter</span>()</span><br>        <span class="hljs-variable">maven</span> &#123; <span class="hljs-variable">url</span> <span class="hljs-string">&#x27;https://jitpack.io&#x27;</span> &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-variable">rootProject.name</span> = <span class="hljs-string">&quot;WeatherAPP&quot;</span><br><span class="hljs-comment">// 上述字符串换中的冒号是用于分割目录的 , 如果再次创建一个 app2 目录 , 配置文件会自动变为</span><br><span class="hljs-variable">include</span> <span class="hljs-string">&#x27;:app&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常见命令</title>
    <link href="/2023/03/30/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/30/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="删除所关联的远程仓库地址"><a href="#删除所关联的远程仓库地址" class="headerlink" title="删除所关联的远程仓库地址"></a>删除所关联的远程仓库地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote <span class="hljs-built_in">rm</span> origin<br></code></pre></td></tr></table></figure><h2 id="关联新的远程仓库"><a href="#关联新的远程仓库" class="headerlink" title="关联新的远程仓库"></a>关联新的远程仓库</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/youName/y</span>ouName.github.io.git<br></code></pre></td></tr></table></figure><h2 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><h2 id="提交暂存区到本地仓库。"><a href="#提交暂存区到本地仓库。" class="headerlink" title="提交暂存区到本地仓库。"></a>提交暂存区到本地仓库。</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;commit message&quot;</span><br></code></pre></td></tr></table></figure><h2 id="推送到远程库source分支"><a href="#推送到远程库source分支" class="headerlink" title="推送到远程库source分支"></a>推送到远程库source分支</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin Source<br></code></pre></td></tr></table></figure><h2 id="查看仓库当前的状态，显示有变更的文件。"><a href="#查看仓库当前的状态，显示有变更的文件。" class="headerlink" title="查看仓库当前的状态，显示有变更的文件。"></a>查看仓库当前的状态，显示有变更的文件。</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><h2 id="获取所有-Git-远程分支"><a href="#获取所有-Git-远程分支" class="headerlink" title="获取所有 Git 远程分支"></a>获取所有 Git 远程分支</h2><p>借助以下命令，我们将从其仓库中获取远程分支。origin 是我们定位的远程分支的名称。如果我们有一个 upstream 远程名称，我们可以将其称为 git fetch upstream。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">git fetch origin<br></code></pre></td></tr></table></figure><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout "></a>git checkout <name-of-your-branch></name-of-your-branch></h2><p>这也是最常用的 Git 命令之一。要在分支中工作，首先需要切换到该分支。我们通常使用 <strong>git checkou</strong>t 从一个分支切换到另一个分支。我们还可以使用它来检出文件和提交（commits）。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">git checkout remotes<span class="hljs-regexp">/origin/</span><span class="hljs-keyword">Source</span><br>git checkout remotes<span class="hljs-regexp">/origin/m</span>aster<br></code></pre></td></tr></table></figure><h2 id="同时创建并切换到分支"><a href="#同时创建并切换到分支" class="headerlink" title="同时创建并切换到分支"></a><strong>同时创建并切换到分支</strong></h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> &lt;name-of-your-branch&gt;<br></code></pre></td></tr></table></figure><h2 id="列出-Git-可用的分支"><a href="#列出-Git-可用的分支" class="headerlink" title="列出 Git 可用的分支"></a>列出 Git 可用的分支</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">git branch -a<br></code></pre></td></tr></table></figure><h2 id="推送到追踪的分支"><a href="#推送到追踪的分支" class="headerlink" title="推送到追踪的分支"></a>推送到追踪的分支</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">git <span class="hljs-keyword">push</span> origin HEAD:<span class="hljs-keyword">Source</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+Fluid主题美化</title>
    <link href="/2023/03/28/hexo-Fluid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <url>/2023/03/28/hexo-Fluid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43471926/article/details/109798811"> Hexo-Fluid主题美化_hexo fluid_林慕凡的博客-CSDN博客</a></p><p><a href="http://lzqlearn.com/blog/6560820db005/#2-4-2-%E6%A0%87%E9%A2%98%E9%A2%9C%E8%89%B2">hexo博客fluid主题美化 - Gilgamesh’s Blog (lzqlearn.com)</a></p><p><a href="https://jin-yuhan.github.io/posts/60584518/">Fluid 主题美化汇总 - Stalo’s Blog (jin-yuhan.github.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio的快捷键</title>
    <link href="/2023/03/28/AS%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2023/03/28/AS%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>AS快捷键</p><table><thead><tr><th>作用</th><th>快捷键</th><th>注释</th></tr></thead><tbody><tr><td>格式化代码</td><td>Ctrl + Alt + L</td><td></td></tr><tr><td>隐藏所有面板</td><td>Ctrl + Shift + F12</td><td>切换编辑器铺满整个程序界面，隐藏其他的面板。再次执行该操作，将会回到隐藏前的状态。</td></tr><tr><td>最近访问</td><td>Ctrl + E</td><td>该操作可以得到一个最近访问文件的可搜索的列表。</td></tr><tr><td>最近修改的文件</td><td>Ctrl + Shift + E</td><td>该操作类似于“最近访问（Recents）”弹窗，会显示最近本地修改过的文件列表，根据修改时间排列。可以输入字符来过滤列表结果。</td></tr><tr><td>清除无效包引用</td><td>Alt + Ctrl + O</td><td></td></tr><tr><td>查找</td><td>Ctrl + F</td><td></td></tr><tr><td>查找+替换</td><td>Ctrl + R</td><td></td></tr><tr><td>上下移动代码</td><td>Alt + Shift + Up&#x2F;Down</td><td></td></tr><tr><td>快速查看定义</td><td>Ctrl + Shift + I</td><td>在不离开当前界面，快速查看其原始定义</td></tr><tr><td>语句补全</td><td>Ctrl + Shift + Enter</td><td>这个方法将会生成缺失的代码来补全语句。补全；) }</td></tr><tr><td>行复制</td><td>Ctrl + D</td><td>复制当前行，并粘贴到下一行，这个操作不会影响剪贴板的内容。这个命令配合移动行快捷键非常有用。</td></tr><tr><td>展开全部代            码块</td><td>ctrl+shift+加号</td><td></td></tr><tr><td>折叠全部代码  块</td><td>ctrl+shift+减号</td><td></td></tr><tr><td>Sublime Text            式的多处选择</td><td>Alt + Ｊ</td><td>该操作会识别当前选中字符串，选择下一个同样的字符串，并且添加一个光标。这意味着你可以在同一个文件里拥有多个光标，你可以同时在所有光标处输入任何东西。</td></tr><tr><td>切换器</td><td>Ctrl + Tab</td><td>该快捷键基本上就是IDE的alt+tab&#x2F;cmd+tab命令。你可以用它在导航tab或者面板切换。一旦打开这个窗口，只要一直按着ctrl键，你可以通过对应的数字或者字母快捷键快速选择。你也可以通过backspace键来关闭一个已选中的tab或者面板。</td></tr><tr><td>提取方法</td><td>Ctrl + Alt + M</td><td>提取一段代码块，生成一个新的方法。当你发现某个方法里面过于复杂，需要将某一段代码提取成单独的方法时，该技巧是很有用的。</td></tr><tr><td>重命名</td><td>Shift + F6</td><td>你可以通过该操作重命名变量、字段、方法、类、包。当然了，该操作会确保重命名对上下文有意义，不会无脑替换掉所有文件中的名字；</td></tr><tr><td>书签</td><td>添加&#x2F;移除书签：F11     添加&#x2F;移除书签(带标记)：Ctrl + F11;      显示全部书签：Shift + F11</td><td>这是一个很有用的功能，让你可以在某处做个标记（书签），方便后面再跳转到此处</td></tr></tbody></table><p><a href="https://blog.csdn.net/Pandafz1997/article/details/117716771">快速编程法宝之掌握AS和IDEA快捷键</a></p><p><a href="https://blog.csdn.net/lyp13243189027/article/details/52329991">AS快捷键</a></p>]]></content>
    
    
    <categories>
      
      <category>工具知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio里面gradle相关配置</title>
    <link href="/2023/03/28/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/03/28/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>对我自己掌握的关于gradle相关的知识进行一个整理。</p><p>下面是Android studio里面比较重要的gradle文件。会逐一的进行解析。</p><p><img src="/2023/03/28/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE_1-16801876551372.jpg"></p><h2 id="1-build-gradle-模块里面"><a href="#1-build-gradle-模块里面" class="headerlink" title="1. build.gradle(模块里面)"></a>1. build.gradle(模块里面)</h2><p>   里面的具体内容参考我之前写的一篇博客：<a href="https://blog.csdn.net/qq_43867812/article/details/126850708">详解build.gradle文件</a>。这个文件里面是对当前的module进行配置。</p><h2 id="2-build-gradle（项目里面）"><a href="#2-build-gradle（项目里面）" class="headerlink" title="2. build.gradle（项目里面）"></a>2. build.gradle（项目里面）</h2><p>   这个文件添加所有子项目&#x2F;模块通用的配置选项。可以看到他自动生成的里面添加了gradle的依赖，我的版本是7.2.1。当我们需要清除gradle生成的配置文件，也就是build文件夹，就会执行<img src="/2023/03/28/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/e881b49610a0494d97cc290c6eb0da81.png" alt="在这里插入图片描述"><br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br>plugins &#123;<br>    id <span class="hljs-string">&#x27;com.android.application&#x27;</span> version <span class="hljs-string">&#x27;7.2.1&#x27;</span> apply <span class="hljs-literal">false</span><br>    id <span class="hljs-string">&#x27;com.android.library&#x27;</span> version <span class="hljs-string">&#x27;7.2.1&#x27;</span> apply <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">// 运行gradle clean时，执行此处定义的task任务。</span><br><span class="hljs-comment">// 该任务继承自Delete，删除根目录中的build目录。</span><br><span class="hljs-comment">// 相当于执行Delete.delete(rootProject.buildDir)。</span><br><span class="hljs-comment">// gradle使用groovy语言，调用method时可以不用加（）。</span><br>task clean(<span class="hljs-attr">type:</span> Delete) &#123;<br>    delete rootProject.buildDir<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="3-gradle-properties"><a href="#3-gradle-properties" class="headerlink" title="3. gradle.properties"></a>3. gradle.properties</h2><p>   主要是增加和修改一些可以在构建过程中直接使用的参数。具体怎么使用，暂时没有研究，也许未来会进行补充。</p><h2 id="4-setting-gradle"><a href="#4-setting-gradle" class="headerlink" title="4. setting.gradle"></a>4. setting.gradle</h2><p>   这个文件是我今天之前了解最少的，今天查了不少其他人的博客，终于大致弄懂了一些。</p><p>   首先第一个注意事项：在gradle7.1以后的版本中，发生了功能模块迁移。</p><p>   原来在工程build.gradle的buildscript和allprojects移动至setting.gradle并改名为pluginManagement 和dependencyResolutionManagement。里面的东西依旧可以按照原来的copy过来。</p><p>  <a href="https://blog.csdn.net/sinat_38167329/article/details/123175556">Android Gradle 7.1+新版本依赖变化</a></p><p>   下面我讲对里面的相关配置进行解析：</p><ol><li><p>pluginManagement ：</p><p><code>pluginManagement&#123;&#125;</code>语法块是专门用于管理整个项目插件的，只能出现在<code>settings.gradle</code>文件或”初始化脚本“中，并且在<code>settings.gradle</code>文件中<code>pluginManagement&#123;&#125;</code>必须是文件中的第一个块。</p><ul><li>repositories{}语法块，用于指定仓库，有以下常用选项：<ul><li>mavenLocal()：本地Maven仓库（ ${user.home}&#x2F;.m2&#x2F;repository ）</li><li>mavenCentral()：中央Maven仓库（ <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ）</li><li>maven { url ‘https:&#x2F;&#x2F;…’ }：可用于Maven私服、镜像服务器等</li><li>ivy {url “..&#x2F;local-repo”}：本地的ivy仓库</li><li>ivy {url “<a href="http://repo.mycompany.com/repo%22%7D%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%9A%84ivy%E4%BB%93%E5%BA%93">http://repo.mycompany.com/repo&quot;}：远程的ivy仓库</a></li><li>google()：google仓库（<a href="https://maven.google.com)/">https://maven.google.com）</a></li></ul></li><li>dependencies{}语法块，用于指定要使用的插件，由classpath关键字指定，格式为：classpath ‘group:name:version’</li></ul><p><a href="https://blog.csdn.net/LiMubai_CN/article/details/102790699">Gradle入门教程</a></p><p>那么buildscript中的repositories和allprojects的repositories的作用和区别是什么呢？</p><ol><li><code>buildscript</code>里是gradle脚本执行所需依赖，分别是对应的maven库和插件</li><li><code>allprojects</code>里是项目本身需要的依赖，比如我现在要依赖我自己maven库的<code>toastutils</code>库，那么我应该将<code>maven &#123;url &#39;https://d l.bin tray.com/calvinning/maven&#39;&#125;</code>写在这里，而不是<code>buildscript</code>中，不然找不到。</li></ol><p>  <strong><a href="https://www.jianshu.com/p/ee57e4de78a3">buildscript和allprojects的作用和区别是什么？</a></strong></p></li></ol><p><img src="/2023/03/28/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/b0daea2d7185444abe7de6dfe4a188a9.png" alt="在这里插入图片描述"></p><p>上图应该和自动生成的有些许区别。多了下面的代码。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">jcenter</span><span class="hljs-params">()</span></span><br>maven &#123; url <span class="hljs-string">&#x27;https://jitpack.io&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>这里就是导入了<a href="https://link.zhihu.com/?target=https://jitpack.io/">jitpack.io</a>。</p><p>科普记录：在之前的Android gradle里面生成的应该是jcenter()，但是现在MavenCentral，原因是Jcenter服务即将关闭，谷歌没有收购他，所以改用mavenCentral，所以之前很多第三方库都不能使用了，不过很多个人开发者将自己开发的库也移植到了新的服务器。例如<a href="https://link.zhihu.com/?target=https://jitpack.io/">jitpack.io</a>。所以我们可以通过上面的代码导入地址。</p><p><a href="https://zhuanlan.zhihu.com/p/363156372">Jcenter服务即将关闭，改用mavenCentral</a></p><p>下面的两行代码理解应该是比较简单的。include是groovy里面的代码。<br><img src="/2023/03/28/AndroidStudio%E9%87%8C%E9%9D%A2gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/72dc8fd3d64a4d6a94b0f1f84fd7ece8.png" alt="在这里插入图片描述"></p><p>在 <a href="https://so.csdn.net/so/search?q=Groovy&spm=1001.2101.3001.7020">Groovy</a> 语法中 , 就是调用了 include 方法 , 传入了 ‘:app’ 字符串作为参数 ;</p><p>当我们在项目中new 一个module时，下面会增加一个新的include。<br>附上我看到的别人的博客记录：</p><blockquote><p>AndroidStudio gradle 7.0+配置说明<br>本文链接：<a href="https://blog.csdn.net/Jun_P/article/details/126792012">https://blog.csdn.net/Jun_P/article/details/126792012</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android隐藏头部状态栏</title>
    <link href="/2023/03/28/Android%E9%9A%90%E8%97%8F%E5%A4%B4%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <url>/2023/03/28/Android%E9%9A%90%E8%97%8F%E5%A4%B4%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Android隐藏头部状态栏"><a href="#Android隐藏头部状态栏" class="headerlink" title="Android隐藏头部状态栏"></a>Android隐藏头部状态栏</h1><h3 id="1-onCreate-中通过代码隐藏（MainActivity）"><a href="#1-onCreate-中通过代码隐藏（MainActivity）" class="headerlink" title="1. onCreate 中通过代码隐藏（MainActivity）"></a>1. onCreate 中通过代码隐藏（MainActivity）</h3><p>首先贴上官网介绍的方法</p><p><a href="https://developer.android.google.cn/training/system-ui/status?hl=zh-cn#41">隐藏状态栏  | Android 开发者  | Android Developers</a></p><p>在Android4.1之后，如果Activity继承的是Application，则用官方介绍的办法来隐藏状态栏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">View</span> <span class="hljs-variable">decorView</span> <span class="hljs-operator">=</span> getWindow().getDecorView();<br><span class="hljs-comment">// Hide the status bar.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">uiOptions</span> <span class="hljs-operator">=</span> View.SYSTEM_UI_FLAG_FULLSCREEN;<br>decorView.setSystemUiVisibility(uiOptions);<br><span class="hljs-comment">// Remember that you should never show the action bar if the</span><br><span class="hljs-comment">// status bar is hidden, so hide that too if necessary.</span><br><span class="hljs-type">ActionBar</span> <span class="hljs-variable">actionBar</span> <span class="hljs-operator">=</span> getActionBar();<br>actionBar.hide();<br></code></pre></td></tr></table></figure><p>存下错误：getActionBar的值是null。</p><p><strong>如果Activity继承了Appcompat，则必须使用getSupportActionBar()来获取ActionBar</strong></p><p>我实验之后发现这部分代码有部分废弃了。具体作用也不是很明确。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">View decorView <span class="hljs-operator">=</span> getWindow().getDecorView()<span class="hljs-comment">;</span><br>int uiOptions <span class="hljs-operator">=</span> View.SYSTEM_UI_FLAG_FULLSCREEN<span class="hljs-comment">;</span><br>decorView.setSystemUiVisibility(uiOptions)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol><li><p>MainActivity 继承 Activity 时<br>如果在 onCreate –&gt; setContentView 方法之后加则会报错。<br>onCreate –&gt; setContentView 方法前加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">requestWindowFeature(Window.FEATURE_NO_TITLE);<br></code></pre></td></tr></table></figure></li><li><p>MainActivity 继承 AppCompatActivity 时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ActionBar</span> <span class="hljs-variable">actionBar</span> <span class="hljs-operator">=</span> getSupportActionBar();<br>        <span class="hljs-keyword">if</span> (actionBar!=<span class="hljs-literal">null</span>) &#123;<br>            actionBar.hide();<br>        &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-布局清单中通过-Activity-theme-隐藏（AndroidMainfest）"><a href="#2-布局清单中通过-Activity-theme-隐藏（AndroidMainfest）" class="headerlink" title="2.布局清单中通过 Activity theme 隐藏（AndroidMainfest）"></a>2.布局清单中通过 Activity theme 隐藏（AndroidMainfest）</h3><p>这种方式，MainActivity 继承 Activity 或 AppCompatActivity 都可用</p><p>在 res —&gt; values —&gt; styles —&gt; 中加入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;HideStyle&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>然后在需要隐藏标题栏的activity标签声明中，加入以下代码即可；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:theme=&quot;@style/HideStyle&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android动态申请权限</title>
    <link href="/2023/03/28/Android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/"/>
    <url>/2023/03/28/Android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="1-可以在AndroidManifest里面注册的权限："><a href="#1-可以在AndroidManifest里面注册的权限：" class="headerlink" title="1.可以在AndroidManifest里面注册的权限："></a>1.可以在AndroidManifest里面注册的权限：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCEPT_HANDOVER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许呼应用继续在另一个应用中启动的呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用访问后台的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BLOBS_ACROSS_USERS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问跨用户的数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_CHECKIN_PROPERTIES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许阅读/写入检查数据库中的&quot;属性&quot;表，以更改上传的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问大致位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用访问精确位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许程序访问额外的定位提供者指令 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_MEDIA_LOCATION&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序访问用户共享集合中持续存在的任何地理位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问有关网络的信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NOTIFICATION_POLICY&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 希望访问通知策略的应用程序的标记权限 此权限不支持托管配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问有关 Wi-Fi 网络的信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCOUNT_MANAGER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序调用到帐户授权人 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACTIVITY_RECOGNITION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序识别身体活动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ADD_VOICEMAIL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序向系统添加语音信箱 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ANSWER_PHONE_CALLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接听来电 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BATTERY_STATS&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序收集电池统计数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_ACCESSIBILITY_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 确保只有系统可以绑定它 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_APPWIDGET&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序告诉AppWidget服务哪些应用程序可以访问AppWidget数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_CARRIER_SERVICES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许与运营商应用中的服务绑定的系统过程将获得此权限 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_COMPANION_DEVICE_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 任何 s 都必须确保只有系统才能与系统结合 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_CONTROLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许系统UI请求第三方控制 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_DEVICE_ADMIN&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 设备管理接收器必须要求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序连接到配对蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_ADMIN&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序发现和配对蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_ADVERTISE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够向附近的蓝牙设备做广告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_CONNECT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够连接到配对蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_PRIVILEGED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在不进行用户交互的情况下对蓝牙设备进行配对，并允许或不允许电话簿访问或消息访问 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_SCAN&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够发现和配对附近的蓝牙设备 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BODY_SENSORS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序从用户用来测量体内发生的情况（如心率）的传感器访问数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_PACKAGE_REMOVED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播已删除应用程序包的通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播短信收据通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_STICKY&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播粘性意图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_WAP_PUSH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播 WAP 推送接收通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_COMPANION_APP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许实现 API 的应用有资格作为呼叫伴侣应用启用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_PHONE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序启动电话呼叫，而无需通过拨号器用户界面，以便用户确认呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_PRIVILEGED&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序拨打任何电话号码（包括紧急号码），而无需通过 Dialer 用户界面为用户确认已放置的呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够访问摄像机设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAPTURE_AUDIO_OUTPUT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序捕获音频输出 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_COMPONENT_ENABLED_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更改应用程序组件（其自身除外）是否启用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_CONFIGURATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改当前配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更改网络连接状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_WIFI_MULTICAST_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序进入 Wi-Fi 多播模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序更改 Wi-Fi 连接状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CLEAR_APP_CACHE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序清除设备上所有已安装应用程序的缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CONTROL_LOCATION_UPDATES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许启用/禁用来自收音机的位置更新通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DELETE_CACHE_FILES&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 删除应用缓存文件的旧权限不再使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DELETE_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序删除包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DIAGNOSTIC&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许将 RW 应用到诊断资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DISABLE_KEYGUARD&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 如果密钥防护系统不安全，允许应用程序禁用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DUMP&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序从系统服务中检索状态转储信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.允许应用程序扩展或折叠状态栏&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- EXPAND_STATUS_BAR --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FACTORY_TEST&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 作为制造商测试应用程序运行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许使用常规应用程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.GET_ACCOUNTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许访问帐户服务中的帐户列表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.GET_PACKAGE_SIZE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序找出任何包所使用的空间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.GLOBAL_SEARCH&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 此权限可用于内容提供商，以便全球搜索系统访问其数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.HIDE_OVERLAY_WINDOWS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用在上面绘制非系统覆盖窗口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.HIGH_SAMPLING_RATE_SENSORS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用访问采样率大于 200 Hz 的传感器数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTALL_LOCATION_PROVIDER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序将位置提供商安装到位置管理器中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTALL_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序安装包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTALL_SHORTCUT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在启动器中安装快捷方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTANT_APP_FOREGROUND_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许即时应用创建前景服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERACT_ACROSS_PROFILES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许在同一配置文件组中跨配置文件进行交互 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序打开网络 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.KILL_BACKGROUND_PROCESSES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序调用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.LOADER_USAGE_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许数据装载机读取包的访问日志。访问日志包含随着时间推移引用的页面集。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.LOCATION_HARDWARE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序在硬件中使用位置功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_DOCUMENTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序管理对文档的访问，通常作为文档拾取器的一部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在范围存储中广泛访问外部存储 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_MEDIA&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在未经用户确认的情况下修改和删除此设备或任何连接存储设备上的媒体文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_ONGOING_CALLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许查询持续呼叫详细信息并管理持续呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_OWN_CALLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许通过自我管理的 API 管理自己的呼叫的呼叫应用程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MEDIA_CONTENT_CONTROL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序知道正在播放的内容并控制其播放 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序修改全球音频设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MODIFY_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许修改电话状态 - 打开电源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MOUNT_FORMAT_FILESYSTEMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许为可移动存储格式化文件系统 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许安装和卸载文件系统以进行可拆卸存储 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.NFC&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在 NFC 上执行 I/O 操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.NFC_PREFERRED_PAYMENT_INFO&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许申请接收 NFC 首选支付服务信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.NFC_TRANSACTION_EVENT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接收 NFC 交易事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.PACKAGE_USAGE_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序收集组件使用情况统计 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.QUERY_ALL_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许查询设备上的任何正常应用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CALENDAR&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序读取用户的日历数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CALL_LOG&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取用户的通话记录。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CONTACTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取用户的联系人数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 允许应用程序从外部存储中读取 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_LOGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取低级系统日志文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PHONE_NUMBERS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许读取设备的电话号码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 仅允许阅读访问电话状态，包括当前的蜂窝网络信息、任何持续呼叫的状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许阅读访问精确的手机状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取短信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_SYNC_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取同步设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_SYNC_STATS&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序读取同步统计数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_VOICEMAIL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在系统中读取语音信箱 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REBOOT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够重新启动设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在系统完成启动后接收广播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_MMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序监控传入的彩信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接收短信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_WAP_PUSH&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序接收 WAP 推送消息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECORD_AUDIO&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序录制音频 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_PROFILE_WATCH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用请求通过&quot;手表&quot;与设备关联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许配套应用在后台运行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许配套应用从后台开始前景服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许配套应用在后台使用数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_DELETE_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序请求删除包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 申请必须持有才能使用的权 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序请求安装包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 允许应用程序订阅有关其关联配套设备的存在状态更改的通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_PASSWORD_COMPLEXITY&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序请求屏幕锁的复杂性，并提示用户将屏幕锁更新到一定的复杂性级别 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SCHEDULE_EXACT_ALARM&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序使用精确的报警 API --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SEND_RESPOND_VIA_MESSAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序 （电话） 向其他应用程序发送请求，以便在来电期间处理响应消息操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SEND_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序发送短信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_ALARM&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播意图为用户设置闹钟 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_ALWAYS_FINISH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序控制在后台后立即完成活动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_ANIMATION_SCALE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 修改全局动画缩放因子 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_DEBUG_APP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置调试应用程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_PROCESS_LIMIT&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序设置可以运行的最大数量（不需要）应用程序过程 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_TIME&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序直接设置系统时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_TIME_ZONE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序直接设置系统时区 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_WALLPAPER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序设置壁纸 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_WALLPAPER_HINTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序设置壁纸提示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SIGNAL_PERSISTENT_PROCESSES&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序请求向所有持久性过程发送信号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序随时从后台开始前景服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.START_VIEW_PERMISSION_USAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许持有人启动应用程序的权限使用屏幕 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.STATUS_BAR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序打开、关闭或禁用状态栏及其图标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用使用该类型创建窗口，该类型显示在所有其他应用的顶部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.TRANSMIT_IR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 如果可用，允许使用设备的红外发射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.UPDATE_DEVICE_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更新设备统计数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.UPDATE_PACKAGES_WITHOUT_USER_ACTION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序通过该应用程序指示应用更新不需要用户操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.USE_BIOMETRIC&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用使用设备支持的生物识别模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许读取设备标识符并使用基于 ICC 的身份验证（如 EAP-AKA） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.USE_SIP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序使用 SIP 服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.UWB_RANGING&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够使用超宽带的设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.VIBRATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许访问振动器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WAKE_LOCK&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许使用电源经理唤醒锁来防止处理器睡觉或屏幕变暗 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_APN_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写 apn 设置并读取现有 apn 设置的敏感字段（如用户和密码） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_CALENDAR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写用户的日历数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_CALL_LOG&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写（但未读取）用户的呼叫日志数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_CONTACTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写用户的联系人数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 允许应用程序写入外部存储。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_GSERVICES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改 Google 服务地图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_SECURE_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取或编写安全系统设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取或编写系统设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_SYNC_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写同步设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_VOICEMAIL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改和删除系统中现有的语音信箱 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-动态申请权限"><a href="#2-动态申请权限" class="headerlink" title="2.动态申请权限"></a>2.动态申请权限</h1><ol><li><h2 id="判断是否有权限"><a href="#判断是否有权限" class="headerlink" title="判断是否有权限"></a>判断是否有权限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(<span class="hljs-built_in">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>        != PackageManager.PERMISSION_GRANTED) &#123;<br>    ActivityCompat.requestPermissions(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h2 id="申请权限"><a href="#申请权限" class="headerlink" title="申请权限"></a>申请权限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>    <span class="hljs-keyword">if</span> (requestCode == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (grantResults.length != <span class="hljs-number">0</span> &amp;&amp; grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;权限开启成功&quot;</span>, Toast.LENGTH_SHORT).show();<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;权限开启失败&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LiveData的原理和使用</title>
    <link href="/2023/03/28/LiveData%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/28/LiveData%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h1><h2 id="Livedata是什么？它的作用是什么？我们能用它来干什么？"><a href="#Livedata是什么？它的作用是什么？我们能用它来干什么？" class="headerlink" title="Livedata是什么？它的作用是什么？我们能用它来干什么？"></a>Livedata是什么？它的作用是什么？我们能用它来干什么？</h2><p>首先，LiveData是一种可观察的数据存储类。这句话可以看成两个部分，一个是可观察的类，另一个是数据存储的类。</p><ul><li>LiveData 是可以被观察的， 但是与常规的可观察类不同，Livadata具有感知生命周期的能力。意指它遵循其他应用组件（如 activity、fragment 或 service）的生命周期。有这种感知能力的LiveData ，只会通知活跃生命周期状态的应用组件观察者。</li><li>LiveData是用来存储数据的，这是它最直接的作用。当LiveData的数据发生变化的时候，就会通知应用组建的观察者。</li></ul><p>Observe类的生命周期处于Start或者Resumed状态时候，LiveData就认为Observe类处于活跃状态。也就是说LiveData只会通知活跃的观察者，也就是说处于其他生命周期的观察者，即使LiveData发生了变化，也不会收到通知。这样的好处是避免了内存泄露。</p><h2 id="LiveData的优势："><a href="#LiveData的优势：" class="headerlink" title="LiveData的优势："></a>LiveData的优势：</h2><ol><li>确保界面符合数据状态</li><li>不会发生内存泄漏</li><li>不会因 Activity 停止而导致崩溃</li><li>不再需要手动处理生命周期</li><li>数据始终保持最新状态</li><li>适当的配置更改</li><li>共享资源</li></ol><h2 id="LIveData的使用："><a href="#LIveData的使用：" class="headerlink" title="LIveData的使用："></a>LIveData的使用：</h2><ol><li>创建LiveData实例，用来存储某种类型的数据。我们通常在ViewModel中完成。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameViewModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ViewModel</span> &#123;<br><span class="hljs-comment">// Create a LiveData with a String</span><br><span class="hljs-keyword">private</span> MutableLiveData&lt;String&gt; currentName;<br><br>    <span class="hljs-keyword">public</span> MutableLiveData&lt;String&gt; <span class="hljs-title function_">getCurrentName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//有一个判空</span><br>        <span class="hljs-keyword">if</span> (currentName == <span class="hljs-literal">null</span>) &#123;<br>            currentName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutableLiveData</span>&lt;String&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> currentName;<br>    &#125;<br><span class="hljs-comment">// Rest of the ViewModel...</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>我们使用LiveData的方式主要有两种。<ul><li>一种是继承LiveData的子类MutableLIveData。因为LiveData是一个抽象类，我们不能直接继承，所以我们只能继承他的子类。</li><li>一种是创建可定义 onChanged() 方法的 Observer 对象，该方法可以控制当 LiveData 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 activity 或 fragment）中创建 Observer 对象。</li></ul></li><li>使用 observe() 方法将 Observer 对象附加到 LiveData 对象。observe() 方法会采用 LifecycleOwner 对象。这样会使 Observer 对象订阅 LiveData 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 activity 或 fragment）中附加 Observer 对象。</li></ol><h2 id="LiveData的部分源码分析"><a href="#LiveData的部分源码分析" class="headerlink" title="LiveData的部分源码分析"></a>LiveData的部分源码分析</h2><h3 id="MutableLiveData对外公开数据更新"><a href="#MutableLiveData对外公开数据更新" class="headerlink" title="MutableLiveData对外公开数据更新"></a>MutableLiveData对外公开数据更新</h3><p>LiveData的子类MutableLiveData，是我们可以直接使用的子类。在LiveData 里面没有公开的方法来更新存储的数据，但是在MutableLiveData中给我们提供了两个修改LiveData对象值的方法：setValue(T)和postValue(T)。同样这个两个方法也是重写了LiveData里面的方法。这两个方法分别适用在不同的线程里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> androidx.lifecycle;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> LiveData&#125; which publicly exposes &#123;<span class="hljs-doctag">@link</span> #setValue(T)&#125; and &#123;<span class="hljs-doctag">@link</span> #postValue(T)&#125; method.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; The type of data hold by this instance</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutableLiveData</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiveData</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a MutableLiveData initialized with the given &#123;<span class="hljs-doctag">@code</span> value&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value initial value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MutableLiveData</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">super</span>(value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a MutableLiveData with no value assigned to it.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MutableLiveData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果有活动的观察者，值将被发送给他们。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 新值</span><br><span class="hljs-comment"> * 只能在主线程调用</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postValue</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.postValue(value);<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果有活动的观察者，值将被发送给他们。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 新值</span><br><span class="hljs-comment"> * 只能在子线程调用</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.setValue(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="observe订阅源码分析"><a href="#observe订阅源码分析" class="headerlink" title="observe订阅源码分析"></a>observe订阅源码分析</h3><p>obeserve订阅有两个方法。一个感知生命周期observe（），一个不感知生命周期observeForever（）。</p><p>注册observe的方法需要传入两个参数，分别是生命周期的拥有者（一般是Activity、Fragment、Service）接收事件的观察者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">observe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LifecycleOwner owner, <span class="hljs-meta">@NonNull</span> Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;observe&quot;</span>);<br>    <span class="hljs-keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;<br>        <span class="hljs-comment">// ignore</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">LifecycleBoundObserver</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifecycleBoundObserver</span>(owner, observer);<br>    <span class="hljs-type">ObserverWrapper</span> <span class="hljs-variable">existing</span> <span class="hljs-operator">=</span> mObservers.putIfAbsent(observer, wrapper);<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot add the same observer&quot;</span><br>                + <span class="hljs-string">&quot; with different lifecycles&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    owner.getLifecycle().addObserver(wrapper);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们逐句分析：</p><ol><li>这个方法执行必须在主线程，否则抛出异常。</li><li>生命周期的拥有者不能是destoryed状态，否则结束方法。或者说忽视订阅请求</li><li>对生命周期的拥有者lifecycleOwner和事件的观察者observer进行包装注册成一个LifecycleBoundObserver对象，这就是为什么LiveData能够感知生命周期的原因。</li><li>封包和观察者必须是对应的，一个观察者不能同时观察多个生命周期。但是一个生命周期可以绑定多个观察者</li><li>添加观察者，这里可以很清楚的看到，添加的观察者是wrapper，而不是我们传入的observer参数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">observeForever</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;observeForever&quot;</span>);<br>    <span class="hljs-type">AlwaysActiveObserver</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlwaysActiveObserver</span>(observer);<br>    <span class="hljs-type">ObserverWrapper</span> <span class="hljs-variable">existing</span> <span class="hljs-operator">=</span> mObservers.putIfAbsent(observer, wrapper);<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span> &amp;&amp; existing <span class="hljs-keyword">instanceof</span> LiveData.LifecycleBoundObserver) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot add the same observer&quot;</span><br>                + <span class="hljs-string">&quot; with different lifecycles&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    wrapper.activeStateChanged(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：这个方法创建的观察者，会永远收到数据变化的回调，在组件销毁时，需要用户手动的removObserver（）。</p><p>逐句分析：</p><ol><li><p>这里我们只传入了我们想设定的observer。没有传入生命周期的拥有者。</p></li><li><p>将observer包装成AlwaysActiviteObserver实例。同样wrapper和observer是对应的，如果已经添加到了LIveData，那么就抛出异常。</p></li><li><p>activeStateChanged（）方法传入true。将观察者立刻设置成活动态。它会一直保持在活动态，这就是他一直收到数据变化回调的秘诀。</p></li></ol><h3 id="observe移除源码"><a href="#observe移除源码" class="headerlink" title="observe移除源码"></a>observe移除源码</h3><p>LiveData提供的observe移除方法也有两种，一种是移除removeObserve（）方法传入的观察者。另一种是移除removeObserve（）方法传入的生命周期拥有者，这样就会直接移除该生命周期所有绑定的观察者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;removeObserver&quot;</span>);<br>    <span class="hljs-type">ObserverWrapper</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> mObservers.remove(observer);<br>    <span class="hljs-keyword">if</span> (removed == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    removed.detachObserver();<br>    removed.activeStateChanged(<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>源码分析：</p><ol><li>判断主线程</li><li>分离观察者和生命周期拥有者</li><li>将观察者的一直设置成不活动态。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span><br><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObservers</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> LifecycleOwner owner)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;removeObservers&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Observer&lt;? <span class="hljs-built_in">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;<br>        <span class="hljs-keyword">if</span> (entry.getValue().isAttachedTo(owner)) &#123;<br>            removeObserver(entry.getKey());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里明显进行了一次遍历，逐一调用移除单个Observe的方法。</p><h3 id="LIfecycleBoundObserverl-类-和-AlwaysActiveObserver-类"><a href="#LIfecycleBoundObserverl-类-和-AlwaysActiveObserver-类" class="headerlink" title="LIfecycleBoundObserverl 类 和 AlwaysActiveObserver 类"></a>LIfecycleBoundObserverl 类 和 AlwaysActiveObserver 类</h3><p>这两个类就是上面我们包装形成wrapper，他们都继承了ObserWrapper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LifecycleBoundObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObserverWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenericLifecycleObserver</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">final</span> LifecycleOwner mOwner;<br><br>    LifecycleBoundObserver(<span class="hljs-meta">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer) &#123;<br>        <span class="hljs-built_in">super</span>(observer);<br>        mOwner = owner;<br>    &#125;<br><span class="hljs-comment">//活动态，返回true</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldBeActive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStateChanged</span><span class="hljs-params">(LifecycleOwner source, Lifecycle.Event event)</span> &#123;<br>        <span class="hljs-keyword">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;<br>            removeObserver(mObserver);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        activeStateChanged(shouldBeActive());<br>    &#125;<br><span class="hljs-comment">//判断当前的owner是绑定的owner</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAttachedTo</span><span class="hljs-params">(LifecycleOwner owner)</span> &#123;<br>        <span class="hljs-keyword">return</span> mOwner == owner;<br>    &#125;<br><span class="hljs-comment">//分离观察者和生命周期拥有者</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">detachObserver</span><span class="hljs-params">()</span> &#123;<br>        mOwner.getLifecycle().removeObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LifecycleBoundObserver类里面的方法都是继承ObserverWrapper抽象类或者实现GenericLifecycleObserver接口的方法。实现GenericLifecycleObserver的onStateChanged（）方法是LiveData能够观察生命周期的原因，而且使用LiveData不会发生内存泄露，当生命周期处于destoryed状态时候，会移除Observe。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlwaysActiveObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObserverWrapper</span> &#123;<br><br>    AlwaysActiveObserver(Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer) &#123;<br>        <span class="hljs-built_in">super</span>(observer);<br>    &#125;<br><span class="hljs-comment">//这里默认返回true，观察者一直收到回调</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldBeActive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LiveData里面的postValue-和-setValue分析"><a href="#LiveData里面的postValue-和-setValue分析" class="headerlink" title="LiveData里面的postValue 和 setValue分析"></a>LiveData里面的postValue 和 setValue分析</h3><p>这两个方法是用来更新数据的，使用postValue 和 setValue传递数据，在onChange（）方法里面传入数据参数，进行更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子线程</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postValue</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-type">boolean</span> postTask;<br>    <span class="hljs-keyword">synchronized</span> (mDataLock) &#123;<br>        postTask = mPendingData == NOT_SET;<br>        mPendingData = value;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!postTask) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);<br>&#125;<br></code></pre></td></tr></table></figure><p>我没有贴全部的代码。<code>ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</code>很显然这个是把数据又传递回主线程，在主线程中，又会调用setValue（）方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//主线程</span><br><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;setValue&quot;</span>);<br>    mVersion++;<br>    mData = value;<br>    dispatchingValue(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程检查，赋值，分发的操作，主要的逻辑在dispatchingValue（）方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Object</span> <span class="hljs-variable">mData</span> <span class="hljs-operator">=</span> NOT_SET;<br></code></pre></td></tr></table></figure><p>这里需要提一个很重要的变量mData，存放数据的变量，可以看到它可以接受Object类型的数据，而且他是volatile类型，对于这个类型的变量，编译器会直接从原始的内存地址进行存取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jAVA"><span class="hljs-meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="hljs-comment">/* synthetic access */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatchingValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ObserverWrapper initiator)</span> &#123;<br><span class="hljs-comment">// mDispatchingValue的判断主要是为了解决并发调用dispatchingValue的情况</span><br><span class="hljs-comment">// 当对应数据的观察者在执行的过程中, 如有新的数据变更, 则不会再次通知到观察者。所以观察者内的执行不应进行耗时工作</span><br>    <span class="hljs-keyword">if</span> (mDispatchingValue) &#123;<br>        <span class="hljs-comment">//标记当前分发无效</span><br>        mDispatchInvalidated = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//标记正在分发</span><br>    mDispatchingValue = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        mDispatchInvalidated = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (initiator != <span class="hljs-literal">null</span>) &#123;<br>            considerNotify(initiator);<br>            initiator = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="hljs-built_in">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =<br>                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;<br>                considerNotify(iterator.next().getValue());<br>                <span class="hljs-keyword">if</span> (mDispatchInvalidated) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (mDispatchInvalidated);<br>    mDispatching<br></code></pre></td></tr></table></figure><p>确实很复杂，但是我们只需要理解它最终是调用了considerNotify（）方法来分发我们的mData。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">considerNotify</span><span class="hljs-params">(ObserverWrapper observer)</span> &#123;<br>    <span class="hljs-comment">//检查活跃状态</span><br>    <span class="hljs-keyword">if</span> (!observer.mActive) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// we still first check observer.active to keep it as the entrance for events. So even if</span><br>    <span class="hljs-comment">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span><br>    <span class="hljs-comment">// notify for a more predictable notification order.</span><br>    <span class="hljs-keyword">if</span> (!observer.shouldBeActive()) &#123;<br>        observer.activeStateChanged(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//检查版本号</span><br>    <span class="hljs-comment">//每次setValue，version都会加一，当它超过我们的预设版本后，直接返回，防止我们多次调用onChange方法。</span><br>    <span class="hljs-keyword">if</span> (observer.mLastVersion &gt;= mVersion) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    observer.mLastVersion = mVersion;<br>    <span class="hljs-comment">//noinspection unchecked</span><br>    observer.mObserver.onChanged((T) mData);<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的onChange（）方法相当眼熟啊！这里收到了mData变量。</p><h2 id="自定义LiveData时候会使用的方法："><a href="#自定义LiveData时候会使用的方法：" class="headerlink" title="自定义LiveData时候会使用的方法："></a>自定义LiveData时候会使用的方法：</h2><p>void onActive ()<br>Called when the number of active observers change to 1 from 0.<br>This callback can be used to know that this LiveData is being used thus should be kept up to date.</p><p>当这个方法被调用时，表示LiveData的观察者数量从0变为了1，这时就我们的位置监听来说，就应该注册我们的时间监听了。</p><p>void onInactive ()<br>Called when the number of active observers change from 1 to 0.<br>This does not mean that there are no observers left, there may still be observers but their lifecycle states aren’t STARTED or RESUMED (like an Activity in the back stack).<br>You can check if there are observers via hasObservers().</p><p>这个方法被调用时，表示LiveData的观察者数量变为了0，既然没有了观察者，也就没有理由再做监听，此时我们就应该将位置监听移除</p><h2 id="LiveData-数据监听机制流程图"><a href="#LiveData-数据监听机制流程图" class="headerlink" title="LiveData 数据监听机制流程图"></a>LiveData 数据监听机制流程图</h2><p><img src="/2023/03/28/LiveData%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATGVlU3R1ZGlvXw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android进阶知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>匿名内部类</title>
    <link href="/2023/03/28/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2023/03/28/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>匿名内部类，就是没有名字的一种嵌套类。它是Java对类的定义方式之</p><h2 id="为什么要使用匿名内部类"><a href="#为什么要使用匿名内部类" class="headerlink" title="为什么要使用匿名内部类"></a>为什么要使用匿名内部类</h2><p>在实际开发中，我们常常遇到这样的情况：一个接口&#x2F;类的方法的某个实现方式在程序中只会执行一次，但为了使用它，我们需要创建它的实现类&#x2F;子类去实现&#x2F;重写。此时可以使用匿名内部类的方式，可以无需创建新的类，减少代码冗余。</p><p><strong>匿名内部类是局部内部类的一种简化形式.本质上是一个对象,是实现了该接口或继承了该抽象类的子类对象.</strong></p><p>下面详细说明一下</p><p>假设当前有一个接口，接口中只有一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface01</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了使用该接口的show方法，我们需要去创建一个实现类，同时书写show方法的具体实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Interface01Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface01</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I&#x27;m a impl class...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果实现类Interface01Impl全程只使用一次，那么为了这一次的使用去创建一个类，未免太过麻烦。我们需要一个方式来帮助我们摆脱这个困境。匿名内部类则可以很好的解决这个问题。</p><p>我们使用匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Interface01</span> <span class="hljs-variable">interface01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Interface01</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;这里使用了匿名内部类&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//调用接口方法</span><br>    interface01.show();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="给匿名内部类名命"><a href="#给匿名内部类名命" class="headerlink" title="给匿名内部类名命:"></a>给匿名内部类名命:</h3><p><strong>虽然这是匿名内部类,但是仍然可以利用多态来给匿名内部类名命</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//匿名内部类</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aa</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;aaaaaaaaaaaaaaaa&quot;</span>);<br>            &#125;<br> <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hehe</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;hehehehehehhehehhe&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//此时,要想用同一个对象调用多个方法时,就会很难办到.这个时候给匿名内部类名命就可以解决了!</span><br>        <span class="hljs-comment">//利用多态进行名命</span><br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aa</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;aaaaaaaaaaaaaa744444aa&quot;</span>);<br>            &#125;<br> <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hehe</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;hehehehehe888877777hhehehhe&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//这样就可以调用多个方法了</span><br>        aa.aa();<br>        aa.hehe();<br> <br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aa</span><span class="hljs-params">()</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hehe</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匿名内部类的好处"><a href="#匿名内部类的好处" class="headerlink" title="匿名内部类的好处:"></a>匿名内部类的好处:</h3><p>匿名内部类，经常作为参数，或返回值，使用比较方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//匿名内部类，经常作为参数，或返回值，使用比较方便。</span><br>       <br>        test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WW</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hehe</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;111111111&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">//方法的形参要一个抽象类类型，传递一个该抽象类的子类对象.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(WW ww)</span> &#123;<br>        ww.hehe();<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WW</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hehe</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BB</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> getBB();<br>        bb.bb();<br> <br>        <span class="hljs-comment">//匿名内部类，作为返回值，返回方便</span><br>    &#125;<br> <br>    <span class="hljs-comment">//方法的返回值是一个抽象类 类型，返回一个该抽象类的子类对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BB <span class="hljs-title function_">getBB2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BB</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>() &#123;<br> <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bb</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbb222222222&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//匿名内部类，作为返回值，返回方便</span><br>        <span class="hljs-keyword">return</span> b2;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bb</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一个类中可以嵌套一个接口"><a href="#一个类中可以嵌套一个接口" class="headerlink" title="一个类中可以嵌套一个接口:"></a>一个类中可以嵌套一个接口:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//this 代表匿名内部类</span><br>                System.out.println(<span class="hljs-built_in">this</span>.a);          <br>                System.out.println(Inter.a);         <br> <br> <br>            &#125;<br>        &#125;.show();<br> <br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://blog.csdn.net/a850661962/article/details/109642780">匿名内部类</a></p><p><a href="https://blog.csdn.net/a850661962/article/details/109642780">什么是匿名内部类，如何使用匿名内部类</a></p>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>final关键字</title>
    <link href="/2023/03/28/final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2023/03/28/final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h1><p>java中的final关键字可以用来声明成员变量、本地变量、类、方法，并且经常和static一起使用声明常量。</p><h2 id="final关键字的含义"><a href="#final关键字的含义" class="headerlink" title="final关键字的含义:"></a>final关键字的含义:</h2><p>final在Java中是一个保留的关键字，可以声明成员变量、方法、类以及本地变量。一旦你将引用声明作final，你将不能改变这个引用了，编译器会检查代码，如果你试图将变吴再次初始化的话，编译路会报编译错误。</p><h3 id="final-变量"><a href="#final-变量" class="headerlink" title="final 变量"></a>final 变量</h3><p>​对于一个fianl变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改;如果是引用类型的变量，则在对其初始化之后便不能再让其指向另子个对象，但是地址中的值是可以改变的。</p><h3 id="final方法"><a href="#final方法" class="headerlink" title="final方法:"></a>final方法:</h3><p>​final也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法重写。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为fnal。final方法比非fnal方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。</p><h3 id="final类"><a href="#final类" class="headerlink" title="final类:"></a>final类:</h3><p>​使用final来修饰的类叫作final类。final类通常功能是完整的，它们不能被继承。Java中有许多类是final的，警如StringInterger以及其他包装类。</p><h2 id="下面总结了一些使用final关键字的好处"><a href="#下面总结了一些使用final关键字的好处" class="headerlink" title="下面总结了一些使用final关键字的好处"></a>下面总结了一些使用final关键字的好处</h2><ol><li>final关键字提高了性能。JVM和Java应用都会缓存final变量。</li><li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</li><li>使用final关键字，JVM会对方法、变量及类进行优化。</li><li>不可变类<br>创建不可变类要使用final关键字。不可变类是指它的对象一旦被创建了就不能被更改了。String是不可变类的代表。不可变类有很多好处譬如它们的对象是只读的，可以在多线程环境下安全的共享，不用额外的同步开销等等。</li></ol><h2 id="关于final的重要知识点"><a href="#关于final的重要知识点" class="headerlink" title="关于final的重要知识点"></a>关于final的重要知识点</h2><ol><li>final关键字可以用于成员变量、本地变量、方法以及类。</li><li>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。</li><li>你不能够对final变量再次赋值。</li><li>本地变量必须在声明时赋值。</li><li>在匿名类中所有变量都必须是final变量。</li><li>final方法不能被重写。</li><li>final类不能被继承。</li><li>final关键字不同于finally关键字，后者用于异常处理。</li><li>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。</li><li>接口中声明的所有变量本身是final的。</li><li>final和abstract这两个关键字是反相关的，final类就不可能是abstract的。</li><li>final方法在编译阶段绑定，称为静态绑定(static binding)</li><li>没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。</li><li>将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化。</li><li>按照Java代码惯例，final变量就是常量，而且通常常量名要大写:</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON学习笔记</title>
    <link href="/2023/03/28/JSON%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/28/JSON%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="JSON的概念"><a href="#JSON的概念" class="headerlink" title="JSON的概念"></a>JSON的概念</h2><ul><li>JSON ：javascript object notation</li><li>JSON 是存储和交换文本信息的语法，类似 XML。但是json比xml更小、更快、更容易解析。</li><li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li><li>JSON适用于进行数据交互的场景，如网站前台与后台之间的数据交互。</li></ul><h2 id="JSON的语法"><a href="#JSON的语法" class="headerlink" title="JSON的语法"></a>JSON的语法</h2><ol><li>json的语法是Javascript的语法子集。<ul><li>数据在<strong>名称&#x2F;值</strong>对中</li><li>数据由逗号 <strong>,</strong> 分隔</li><li>使用斜杆 *<em>*</em> 来转义字符</li><li>大括号 <strong>{}</strong> 保存对象</li><li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li></ul></li><li>json 的数据结构<ul><li>1.大括号{ }保存的的对象是一个无序的<strong>名称&#x2F;值</strong>对的合集。一个对象以左括号 <strong>{</strong> 开始， 右括号 <strong>}</strong> 结束。每个”键”后跟一个冒号 <strong>:<strong>，</strong>名称&#x2F;值</strong>对使用逗号 <strong>,</strong> 分隔。</li><li><strong>数组：</strong>中括号 <strong>[]</strong> 保存的数组是值（value）的有序集合。一个数组以左中括号 <strong>[</strong> 开始， 右中括号 <strong>]</strong> 结束，值之间使用逗号 <strong>,</strong> 分隔。</li></ul></li></ol><h2 id="json的书写格式"><a href="#json的书写格式" class="headerlink" title="json的书写格式"></a>json的书写格式</h2><p>JSON 数据的书写格式是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">key <span class="hljs-punctuation">:</span> value<br></code></pre></td></tr></table></figure><p>JSON 值可以是：</p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在中括号中）</li><li>对象（在大括号中）</li><li>null</li></ul><p>JSON 对象：JSON 对象在大括号 <strong>{}</strong> 中书写。下面就是一个json对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">41</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;重庆&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;weather_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN101040100&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>JSON 数组：JSON 数组在中括号 <strong>[]</strong> 中书写，数组可包含多个对象。</p><p>下面的例子是对象city是包含四个对象的数组。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>         <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">41</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;重庆&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;weather_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN101040100&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">42</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;永川&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;weather_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN101040200&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">43</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;合川&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;weather_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN101040300&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">44</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;南川&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;weather_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN101040400&quot;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><a href="https://c.runoob.com/front-end/53/">JSON格式化工具</a></p><h1 id="Android-中解析json数据的方法"><a href="#Android-中解析json数据的方法" class="headerlink" title="Android 中解析json数据的方法"></a>Android 中解析json数据的方法</h1><h2 id="1-JsonObject"><a href="#1-JsonObject" class="headerlink" title="1.JsonObject"></a>1.JsonObject</h2><p>使用JSONObject解析JSON数据，这是Android中最基本的数据解析方式。谷歌官方提供的解析json数据的方法。</p><p>Android中提供的Json解析类</p><blockquote><ul><li>JSONObject： Json对象，可以完成Json字符串与Java对象的相互转换</li><li>JSONArray： Json数组，可以完成Json字符串与Java集合或对象的相互转换</li><li>JSONStringer： Json文本构建类，这个类可以帮助快速和便捷的创建JSON text， 每个JSONStringer实体只能对应创建一个JSON text</li><li>JSONTokener：Json解析类</li><li>JSONException：Json异常</li></ul></blockquote><p>下面使用代码实例进行分析：</p><h3 id="1-使用JSONArray类解析JSON数据的主要逻辑代码"><a href="#1-使用JSONArray类解析JSON数据的主要逻辑代码" class="headerlink" title="1.使用JSONArray类解析JSON数据的主要逻辑代码"></a>1.使用<strong>JSONArray类解析JSON数据的主要逻辑代码</strong></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;LiLi&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;95&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;LiLei&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;99&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;王明&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;100&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;LiLei&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;89&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>注意：因为””有申明字符串的意思我们初始化的是一个String字符串,所以在对象中需要<strong>用\对”进行转义</strong>，否则会造成String字符串提前结束的问题.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">JsonEg</span><span class="hljs-params">()</span>&#123;<br>    String json=<span class="hljs-string">&quot;[&#123;\&quot;name\&quot;:\&quot;LiLi\&quot;,\&quot;score\&quot;:\&quot;95\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;LiLei\&quot;,\&quot;score\&quot;:\&quot;99\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;王明\&quot;,\&quot;score\&quot;:\&quot;100\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;LiLei\&quot;,\&quot;score\&quot;:\&quot;89\&quot;&#125;]&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        JSONArray jsonArray=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(json);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;jsonArray.length();i++)&#123;<br>            JSONObject object=jsonArray.getJSONObject(i);<br>            String name=object.optString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">int</span> score=object.optInt(<span class="hljs-string">&quot;score&quot;</span>);<br>            Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;JsonEg: &quot;</span>+name+<span class="hljs-string">&quot;_______&quot;</span>+score);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/28/JSON%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Users\sc\AppData\Roaming\Typora\typora-user-images\image-20230322234500145.png" alt="image-20230322234500145"></p><p><strong>optString和getString区别</strong>：<br>    optString(“key”)如果为空返回 “” ，不报异常。优点：并不会应为key值使程序错误<br>    getString(“key”)如果为空，返回空指针异常。</p><h3 id="2-jsonObject对象解析"><a href="#2-jsonObject对象解析" class="headerlink" title="2.jsonObject对象解析"></a>2.jsonObject对象解析</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;alex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;18&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;isMan&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrgJSONTest</span> &#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;user\&quot;:&#123;\&quot;name\&quot;:\&quot;alex\&quot;,\&quot;age\&quot;:\&quot;18\&quot;,\&quot;isMan\&quot;:true&#125;&#125;&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(json);<span class="hljs-comment">//最外层的JSONObject对象</span><br>                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> obj.getJSONObject(<span class="hljs-string">&quot;user&quot;</span>);<span class="hljs-comment">//通过user字段获取其所包含的JSONObject对象</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">//通过name字段获取其所包含的字符串</span><br>                System.out.println(name);<br>            &#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p> 打印结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">alex</span><br></code></pre></td></tr></table></figure><h3 id="3-创建一个json数据，将json数据解析并且打印。"><a href="#3-创建一个json数据，将json数据解析并且打印。" class="headerlink" title="3.创建一个json数据，将json数据解析并且打印。"></a>3.创建一个json数据，将json数据解析并且打印。</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cat&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;it&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;languages&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ide&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Eclipse&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Java&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ide&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;XCode&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Swift&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ide&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Visual Studio&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;C#&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>具体代码：</p><p>activity_main.xml代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;com.oak.d4_json.MainActivity&quot;</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;创建&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/bt_create&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;读取&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/bt_read&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MainActivity.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> org.json.JSONArray;<br><span class="hljs-keyword">import</span> org.json.JSONException;<br><span class="hljs-keyword">import</span> org.json.JSONObject;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> Button bt_create;<span class="hljs-comment">//声明创建按钮组件变量</span><br>    <span class="hljs-keyword">private</span> Button bt_read;<span class="hljs-comment">//声明读取按钮组件变量</span><br>    <span class="hljs-keyword">private</span> File file;<span class="hljs-comment">//声明一个文件对象</span><br>    <span class="hljs-keyword">private</span> TextView tv;<span class="hljs-comment">//声明TextView组件变量</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        bt_create = (Button) findViewById(R.id.bt_create);<span class="hljs-comment">//获取到创建按钮组件</span><br>        bt_read = (Button) findViewById(R.id.bt_read);<span class="hljs-comment">//获取到读取按钮组件</span><br>        tv = (TextView) findViewById(R.id.tv);<span class="hljs-comment">//获取到TextView组件</span><br><br>        file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getFilesDir(),<span class="hljs-string">&quot;Test.json&quot;</span>);<span class="hljs-comment">//获取到应用在内部的私有文件夹下对应的Test.json文件</span><br>        bt_create.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<span class="hljs-comment">//实例一个JSONObject对象</span><br>                    root.put(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;it&quot;</span>);<span class="hljs-comment">//对其添加一个数据</span><br><br>                    <span class="hljs-type">JSONArray</span> <span class="hljs-variable">languages</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<span class="hljs-comment">//实例一个JSON数组</span><br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">lan1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<span class="hljs-comment">//实例一个lan1的JSON对象</span><br>                    lan1.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//对lan1对象添加数据</span><br>                    lan1.put(<span class="hljs-string">&quot;ide&quot;</span>,<span class="hljs-string">&quot;Eclipse&quot;</span>);<span class="hljs-comment">//对lan1对象添加数据</span><br>                    lan1.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Java&quot;</span>);<span class="hljs-comment">//对lan1对象添加数据</span><br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">lan2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<span class="hljs-comment">//实例一个lan2的JSON对象</span><br>                    lan2.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//对lan2对象添加数据</span><br>                    lan2.put(<span class="hljs-string">&quot;ide&quot;</span>,<span class="hljs-string">&quot;XCode&quot;</span>);<span class="hljs-comment">//对lan2对象添加数据</span><br>                    lan2.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Swift&quot;</span>);<span class="hljs-comment">//对lan2对象添加数据</span><br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">lan3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<span class="hljs-comment">//实例一个lan3的JSON对象</span><br>                    lan3.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//对lan3对象添加数据</span><br>                    lan3.put(<span class="hljs-string">&quot;ide&quot;</span>,<span class="hljs-string">&quot;Visual Studio&quot;</span>);<span class="hljs-comment">//对lan3对象添加数据</span><br>                    lan3.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;C#&quot;</span>);<span class="hljs-comment">//对lan3对象添加数据</span><br>                    languages.put(<span class="hljs-number">0</span>,lan1);<span class="hljs-comment">//将lan1对象添加到JSON数组中去，角标为0</span><br>                    languages.put(<span class="hljs-number">1</span>,lan2);<span class="hljs-comment">//将lan2对象添加到JSON数组中去，角标为1</span><br>                    languages.put(<span class="hljs-number">2</span>,lan3);<span class="hljs-comment">//将lan3对象添加到JSON数组中去，角标为2</span><br><br>                    root.put(<span class="hljs-string">&quot;languages&quot;</span>,languages);<span class="hljs-comment">//然后将JSON数组添加到名为root的JSON对象中去</span><br><br>                    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<span class="hljs-comment">//创建一个文件输出流</span><br>                    fos.write(root.toString().getBytes());<span class="hljs-comment">//将生成的JSON数据写出</span><br>                    fos.close();<span class="hljs-comment">//关闭输出流</span><br>                    Toast.makeText(getApplicationContext(),<span class="hljs-string">&quot;创建成功！&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125; <span class="hljs-keyword">catch</span> (JSONException | IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>        bt_read.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<span class="hljs-comment">//获取一个文件输入流</span><br>                    <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fis);<span class="hljs-comment">//读取文件内容</span><br>                    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<span class="hljs-comment">//将字符流放入缓存中</span><br>                    String line;<span class="hljs-comment">//定义一个用来临时保存数据的变量</span><br>                    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-comment">//实例化一个字符串序列化</span><br>                    <span class="hljs-keyword">while</span>((line = bf.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                        sb.append(line);<span class="hljs-comment">//将数据添加到字符串序列化中</span><br>                    &#125;<br>                    <span class="hljs-comment">//关闭流</span><br>                    fis.close();<br>                    isr.close();<br>                    bf.close();<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(sb.toString());<span class="hljs-comment">//用JSONObject进行解析</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> root.getString(<span class="hljs-string">&quot;cat&quot;</span>);<span class="hljs-comment">//获取字符串类型的键值对</span><br>                    tv.append(<span class="hljs-string">&quot;cat&quot;</span>+<span class="hljs-string">&quot;=&quot;</span>+cat+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//显示数据</span><br>                    tv.append(<span class="hljs-string">&quot;---------------&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//分割线</span><br>                    <span class="hljs-type">JSONArray</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> root.getJSONArray(<span class="hljs-string">&quot;languages&quot;</span>);<span class="hljs-comment">//获取JSON数据中的数组数据</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;array.length(); i++)&#123;<br>                        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> array.getJSONObject(i);<span class="hljs-comment">//遍历得到数组中的各个对象</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> object.getInt(<span class="hljs-string">&quot;id&quot;</span>);<span class="hljs-comment">//获取第一个值</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">ide</span> <span class="hljs-operator">=</span> object.getString(<span class="hljs-string">&quot;ide&quot;</span>);<span class="hljs-comment">//获取第二个值</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> object.getString(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">//获取第三个值</span><br>                        tv.append(<span class="hljs-string">&quot;id&quot;</span>+<span class="hljs-string">&quot;=&quot;</span>+id+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//显示数据</span><br>                        tv.append(<span class="hljs-string">&quot;ide&quot;</span>+<span class="hljs-string">&quot;=&quot;</span>+ide+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//显示数据</span><br>                        tv.append(<span class="hljs-string">&quot;name&quot;</span>+<span class="hljs-string">&quot;=&quot;</span>+name+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//显示数据</span><br>                        tv.append(<span class="hljs-string">&quot;---------------&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//分割线</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException | JSONException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-GSON"><a href="#2-GSON" class="headerlink" title="2.GSON"></a>2.GSON</h2><p>​使用 Gson 获取 Json 中的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;stuID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1111</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;passwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx@123.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;authority&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;state&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>创建一个 <code>FullBackResponse.java</code> 文件用于处理数据。<br>大体的思想是，非<a href="https://so.csdn.net/so/search?q=%E5%B5%8C%E5%A5%97&spm=1001.2101.3001.7020">嵌套</a>数据使用 <code>getting</code> 和 <code>setting</code> 方法将值赋值给变量，<br>嵌套的数据通过上述方法赋值给一个 实体类，在实体类里面获取对应的变量值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FullBackResponse</span> &#123;<br>    <span class="hljs-keyword">private</span> dataBean data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> error;<br><br><span class="hljs-comment">// Json 内嵌套的实体类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">dataBean</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> stuID;<br>        <span class="hljs-keyword">private</span> String passwd;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> String email;<br>        <span class="hljs-keyword">private</span> String authority;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStuID</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> stuID;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStuID</span><span class="hljs-params">(<span class="hljs-type">int</span> stuID)</span> &#123;<br>            <span class="hljs-built_in">this</span>.stuID = stuID;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPasswd</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> passwd;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPasswd</span><span class="hljs-params">(String passwd)</span> &#123;<br>            <span class="hljs-built_in">this</span>.passwd = passwd;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> email;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>            <span class="hljs-built_in">this</span>.email = email;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthority</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> authority;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthority</span><span class="hljs-params">(String authority)</span> &#123;<br>            <span class="hljs-built_in">this</span>.authority = authority;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> state;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>            <span class="hljs-built_in">this</span>.state = state;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> dataBean <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(dataBean data)</span> &#123;<br>         <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getError</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> error;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setError</span><span class="hljs-params">(<span class="hljs-type">int</span> error)</span> &#123;<br>        <span class="hljs-built_in">this</span>.error = error;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// res 是 String 类型的 Json 数据</span><br><span class="hljs-type">FullBackResponse</span> <span class="hljs-variable">fullBackResponse</span> <span class="hljs-operator">=</span> gson.fromJson(res, FullBackResponse.class);<br><br><span class="hljs-comment">// 将数据赋值给变量</span><br><span class="hljs-comment">// 这两个是 Json 内嵌套的 实体类 里的数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">LoginResponse_stuID</span> <span class="hljs-operator">=</span> fullBackResponse.getData().getStuID();<br><span class="hljs-type">String</span> <span class="hljs-variable">LoginResponse_passwd</span> <span class="hljs-operator">=</span> fullBackResponse.getData().getPasswd()；<br><span class="hljs-comment">// 着个不是嵌套的数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">LoginResponse_error</span> <span class="hljs-operator">=</span> fullBackResponse.getError();<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git生成ssh密钥详细步骤</title>
    <link href="/2023/03/20/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/03/20/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="git生成ssh密钥详细步骤"><a href="#git生成ssh密钥详细步骤" class="headerlink" title="git生成ssh密钥详细步骤"></a>git生成ssh密钥详细步骤</h1><p>Git是一个开源的分布式版本控制系统，可以高效敏捷的处理任何项目，用于帮助管理Linux内核开发。而生成一个ssh是十分必要的，可以使电脑和code服务器之间建立安全的加密连接。</p><p><strong>git生成ssh密钥详细步骤</strong></p><ol><li>首先右键点击电脑桌面，点击选择”Git Bash Here”，打开git命令窗口;</li></ol><p><img src="https://img.win7zhijia.cn/upload/20220421/772c6c426fde8d660671f89385273fdd.jpg" alt="img"></p><ol start="2"><li>在git命令窗口配置用户，输入命令：**git config –global user.name “blkj”**。其中“blkj”是你自己要填的用户名;</li></ol><p><img src="https://img.win7zhijia.cn/upload/20220421/a32fb223325189a64ee296baf6754a6f.jpg" alt="img"></p><ol start="3"><li>接着进行邮箱配置，输入命令：**git config –global user.email “<a href="mailto:&#x62;&#108;&#x6b;&#106;&#64;&#x62;&#x6f;&#x72;&#x61;&#x6e;&#x65;&#x74;&#x2e;&#99;&#x6f;&#x6d;&#x2e;&#99;&#110;">&#x62;&#108;&#x6b;&#106;&#64;&#x62;&#x6f;&#x72;&#x61;&#x6e;&#x65;&#x74;&#x2e;&#99;&#x6f;&#x6d;&#x2e;&#99;&#110;</a>“**。”<a href="mailto:&#x62;&#x6c;&#107;&#x6a;&#x40;&#x62;&#111;&#x72;&#x61;&#110;&#x65;&#x74;&#46;&#x63;&#x6f;&#109;&#46;&#x63;&#x6e;">&#x62;&#x6c;&#107;&#x6a;&#x40;&#x62;&#111;&#x72;&#x61;&#110;&#x65;&#x74;&#46;&#x63;&#x6f;&#109;&#46;&#x63;&#x6e;</a>“就是填入你自己的邮箱地址;</li></ol><p><img src="https://img.win7zhijia.cn/upload/20220421/56fbe9631fe2d39fc2f158efac3f5cdf.jpg" alt="img"></p><ol start="4"><li>此时在C:\Users\Administrator目录下会生成.gitconfig配置文件，这个文件不能删除;</li></ol><p><img src="https://img.win7zhijia.cn/upload/20220421/0f9649cc65fd967dad97fa910da18955.jpg" alt="img"></p><p>5 .接着查看.gitconfig配置文件里的内容;</p><p><img src="https://img.win7zhijia.cn/upload/20220421/614bff258932c63b103320419fbc5ff6.png" alt="img"></p><ol start="6"><li>继续在git命令窗口中输入命令：**ssh-keygen -t rsa -C “<a href="mailto:&#x62;&#108;&#x6b;&#x6a;&#x40;&#98;&#111;&#114;&#97;&#110;&#101;&#116;&#46;&#99;&#111;&#x6d;&#46;&#99;&#110;">&#x62;&#108;&#x6b;&#x6a;&#x40;&#98;&#111;&#114;&#97;&#110;&#101;&#116;&#46;&#99;&#111;&#x6d;&#46;&#99;&#110;</a>“**，就可以生成SSH公钥和私钥了;</li></ol><p><img src="https://img.win7zhijia.cn/upload/20220421/7435b94073ca51bc370191e583edcc7d.jpg" alt="img"></p><ol start="7"><li>进入C:\Users\Administrator.ssh目录，查看生成的SSH密钥;</li></ol><p><img src="https://img.win7zhijia.cn/upload/20220421/dfb8a34dae9a13e0ed3307671942cb74.jpg" alt="img"></p><p>8 .在git命令窗口中输入命令：<strong>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</strong>，就能查看公钥和私钥了。</p><p><img src="https://img.win7zhijia.cn/upload/20220421/3270f60eb0cc1827c8c12d69366f0848.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>工具知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
