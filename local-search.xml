<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>隐藏头部状态栏</title>
    <link href="/2023/03/17/%E9%9A%90%E8%97%8F%E5%A4%B4%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <url>/2023/03/17/%E9%9A%90%E8%97%8F%E5%A4%B4%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Android隐藏头部状态栏"><a href="#Android隐藏头部状态栏" class="headerlink" title="Android隐藏头部状态栏"></a>Android隐藏头部状态栏</h1><h3 id="1-onCreate-中通过代码隐藏（MainActivity）"><a href="#1-onCreate-中通过代码隐藏（MainActivity）" class="headerlink" title="1. onCreate 中通过代码隐藏（MainActivity）"></a>1. onCreate 中通过代码隐藏（MainActivity）</h3><p>首先贴上官网介绍的方法</p><p><a href="https://developer.android.google.cn/training/system-ui/status?hl=zh-cn#41">隐藏状态栏  | Android 开发者  | Android Developers</a></p><p>在Android4.1之后，如果Activity继承的是Application，则用官方介绍的办法来隐藏状态栏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">View</span> <span class="hljs-variable">decorView</span> <span class="hljs-operator">=</span> getWindow().getDecorView();<br><span class="hljs-comment">// Hide the status bar.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">uiOptions</span> <span class="hljs-operator">=</span> View.SYSTEM_UI_FLAG_FULLSCREEN;<br>decorView.setSystemUiVisibility(uiOptions);<br><span class="hljs-comment">// Remember that you should never show the action bar if the</span><br><span class="hljs-comment">// status bar is hidden, so hide that too if necessary.</span><br><span class="hljs-type">ActionBar</span> <span class="hljs-variable">actionBar</span> <span class="hljs-operator">=</span> getActionBar();<br>actionBar.hide();<br></code></pre></td></tr></table></figure><p>存下以下错误：getActionBar的值是null。</p><p><img src="/../imgs/%E9%9A%90%E8%97%8F%E5%A4%B4%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/1.jpg"></p><p><strong>如果Activity继承了Appcompat，则必须使用getSupportActionBar()来获取ActionBar</strong></p><p>我实验之后发现这部分代码有部分废弃了。具体作用也不是很明确。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">View decorView <span class="hljs-operator">=</span> getWindow().getDecorView()<span class="hljs-comment">;</span><br>int uiOptions <span class="hljs-operator">=</span> View.SYSTEM_UI_FLAG_FULLSCREEN<span class="hljs-comment">;</span><br>decorView.setSystemUiVisibility(uiOptions)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol><li><p>MainActivity 继承 Activity 时<br>如果在 onCreate –&gt; setContentView 方法之后加则会报错。<br>onCreate –&gt; setContentView 方法前加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">requestWindowFeature(Window.FEATURE_NO_TITLE);<br></code></pre></td></tr></table></figure></li><li><p>MainActivity 继承 AppCompatActivity 时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ActionBar</span> <span class="hljs-variable">actionBar</span> <span class="hljs-operator">=</span> getSupportActionBar();<br>        <span class="hljs-keyword">if</span> (actionBar!=<span class="hljs-literal">null</span>) &#123;<br>            actionBar.hide();<br>        &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-布局清单中通过-Activity-theme-隐藏（AndroidMainfest）"><a href="#2-布局清单中通过-Activity-theme-隐藏（AndroidMainfest）" class="headerlink" title="2.布局清单中通过 Activity theme 隐藏（AndroidMainfest）"></a>2.布局清单中通过 Activity theme 隐藏（AndroidMainfest）</h3><p>这种方式，MainActivity 继承 Activity 或 AppCompatActivity 都可用</p><p>在 res —&gt; values —&gt; styles —&gt; 中加入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;HideStyle&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>然后在需要隐藏标题栏的activity标签声明中，加入以下代码即可；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:theme=&quot;@style/HideStyle&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义dialog</title>
    <link href="/2023/03/17/%E8%87%AA%E5%AE%9A%E4%B9%89dialog/"/>
    <url>/2023/03/17/%E8%87%AA%E5%AE%9A%E4%B9%89dialog/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义Dialog工具类"><a href="#自定义Dialog工具类" class="headerlink" title="自定义Dialog工具类"></a>自定义Dialog工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.app.Dialog;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.os.Handler;<br><span class="hljs-keyword">import</span> android.os.Looper;<br><span class="hljs-keyword">import</span> android.os.Message;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> com.example.phone_dvr.R;<br><br><span class="hljs-keyword">import</span> java.lang.ref.WeakReference;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@desc</span> 自定义dialog </span><br><span class="hljs-comment"> * 功能：1. 自定义dialog的样式</span><br><span class="hljs-comment"> *      2. 倒计时关闭</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/3/17 15:08</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomDialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dialog</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> CustomDialog.class.getSimpleName();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TextView mTimeOut;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Builder mBuilder;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WeakReference&lt;CustomDialog&gt; mDialog;<br><br>        MyHandler(Looper looper, WeakReference&lt;CustomDialog&gt;  dialog) &#123;<br>            <span class="hljs-built_in">super</span>(looper);<span class="hljs-comment">//调用父类的显式指明的构造函数</span><br>            mDialog = dialog;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>            CustomDialog dialog=mDialog.get();<br>            <span class="hljs-keyword">if</span> (dialog == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (msg.what == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">if</span> (msg.arg1 == <span class="hljs-number">0</span>) &#123;<br>                    dialog.dismiss();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> msg.arg1;<br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span>  Message.obtain();<br>                    message.what=<span class="hljs-number">1</span>;<br>                    message.arg1 = time - <span class="hljs-number">1</span>;<br>                    dialog.mTimeOut.setText(mDialog.get().getContext().getString(R.string.dialog_time_out,time));<br>                    Log.d(TAG, <span class="hljs-string">&quot;handleMessage: &quot;</span>+time);<br>                    dialog.mHandler.sendMessageDelayed(message, <span class="hljs-number">1000</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MyHandler</span> <span class="hljs-variable">mHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(Looper.myLooper(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(<span class="hljs-built_in">this</span>));<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomDialog</span><span class="hljs-params">(Builder builder, <span class="hljs-type">boolean</span> isCancel)</span> &#123;<br>        <span class="hljs-built_in">super</span>(builder.getContext(), R.style.CustomDialog);<br>        mBuilder = builder;<br><br>        setContentView(mBuilder.mContentViewId);<br><br>        setCanceledOnTouchOutside(isCancel);<br><br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">mDialogContent</span> <span class="hljs-operator">=</span> findViewById(R.id.dialog_content);<br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">mDialogTitle</span> <span class="hljs-operator">=</span> findViewById(R.id.dialog_title);<br>        mTimeOut = findViewById(R.id.dialog_timeOut);<br><br>        mDialogTitle.setText(mBuilder.mTitle);<br>        mDialogContent.setText(mBuilder.mDialogContent);<br><br>        <span class="hljs-keyword">if</span> (builder.mHasPositive) &#123;<br>            <span class="hljs-type">Button</span> <span class="hljs-variable">mPositiveButton</span> <span class="hljs-operator">=</span> (Button) findViewById(R.id.dialog_positive);<br>            mPositiveButton.setText(builder.mPositive);<br>            mPositiveButton.setOnClickListener(builder.mPositiveListener);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (builder.mHasNegative) &#123;<br>            <span class="hljs-type">Button</span> <span class="hljs-variable">mNegativeButton</span> <span class="hljs-operator">=</span> (Button) findViewById(R.id.dialog_negative);<br>            mNegativeButton.setText(builder.mNegative);<br>            mNegativeButton.setOnClickListener(builder.mNegativeListener);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mBuilder.mHasTiming)&#123;<br>            Message message= Message.obtain();<br>            message.what=<span class="hljs-number">1</span>;<br>            message.arg1=(<span class="hljs-type">int</span>)(mBuilder.mTimeOut/<span class="hljs-number">1000</span>);<br>            mHandler.sendMessage(message);<br>    &#125;<br>        <span class="hljs-built_in">super</span>.show();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@desc</span> 取消</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@params</span> [] void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@date</span>   2023/2/27 10:33</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dismiss</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mBuilder.mHasTiming)&#123;<br>            mHandler.removeMessages(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">super</span>.dismiss();<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>        <span class="hljs-keyword">private</span> Context mContext;<br>        <span class="hljs-keyword">private</span> String mTitle;<br>        <span class="hljs-comment">//布局id</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mContentViewId;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mTimeOut;<br>        <br>        <span class="hljs-comment">//按钮文字</span><br>        <span class="hljs-keyword">private</span> String mPositive;<br>        <span class="hljs-keyword">private</span> String mNegative;<br>        <br>        <span class="hljs-comment">//文字内容</span><br>        <span class="hljs-keyword">private</span> String mDialogContent;<br>        <br>        <span class="hljs-comment">//是否有按钮、倒计时</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> mHasPositive;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> mHasNegative;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> mHasTiming;<br>        <br>        <span class="hljs-keyword">private</span> View.OnClickListener mPositiveListener;<br>        <span class="hljs-keyword">private</span> View.OnClickListener mNegativeListener;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Context context)</span> &#123;<br>            mContext = context;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> Context <span class="hljs-title function_">getContext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> mContext;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setContentViewId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>            mContentViewId = id;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setHasTiming</span><span class="hljs-params">(<span class="hljs-type">boolean</span> has)</span> &#123;<br>            mHasTiming = has;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setTiming</span><span class="hljs-params">(<span class="hljs-type">int</span> time)</span> &#123;<br>            mTimeOut = time;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setTitle</span><span class="hljs-params">(<span class="hljs-type">int</span> title)</span> &#123;<br>            mTitle = mContext.getString(title);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>            mDialogContent = content;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setContent</span><span class="hljs-params">(<span class="hljs-type">int</span> contentId)</span> &#123;<br>            mDialogContent = mContext.getString(contentId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setPositiveButton</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>            mPositive = mContext.getString(id);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setNegativeButton</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>            mNegative = mContext.getString(id);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setHasPositive</span><span class="hljs-params">(<span class="hljs-type">boolean</span> has)</span> &#123;<br>            mHasPositive = has;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setHasNegative</span><span class="hljs-params">(<span class="hljs-type">boolean</span> has)</span> &#123;<br>            mHasNegative = has;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setPositiveListener</span><span class="hljs-params">(View.OnClickListener ok)</span> &#123;<br>            mPositiveListener = ok;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">setNegativeListener</span><span class="hljs-params">(View.OnClickListener cancel)</span> &#123;<br>            mNegativeListener = cancel;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> CustomDialog <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isCanceled)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDialog</span>(<span class="hljs-built_in">this</span>, isCanceled);<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="布局文件："><a href="#布局文件：" class="headerlink" title="布局文件："></a>布局文件：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;299dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#F4F4F4&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog_title&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;181dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/black&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/black&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;30dp&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog_progress&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:indeterminate</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:indeterminateDrawable</span>=<span class="hljs-string">&quot;@drawable/loading&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_horizontal&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog_positive&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog_negative&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/dialog_timeOut&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
      <category>工具类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义toast</title>
    <link href="/2023/03/17/%E8%87%AA%E5%AE%9A%E4%B9%89toast/"/>
    <url>/2023/03/17/%E8%87%AA%E5%AE%9A%E4%B9%89toast/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义Toast工具类"><a href="#自定义Toast工具类" class="headerlink" title="自定义Toast工具类"></a>自定义Toast工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.view.Gravity;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><span class="hljs-keyword">import</span> com.example.phone_dvr.R;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@desc</span> 展示一个Toast</span><br><span class="hljs-comment"> * 功能：1. 自定义toast的样式，需要修改对应的xml文件</span><br><span class="hljs-comment"> *      2. 可以控制toast显示的位置，这里代码只是展示了（上、中、下）三个位置</span><br><span class="hljs-comment"> *      3。可以控制toast显示的时间，但是这个时间不能超过3.5秒</span><br><span class="hljs-comment"> *      4. 当连续点击多次显示toast的时候，toast存在时间以最后一次点击为准</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/3/17 14:03</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToastUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;CustomToast&gt; toastList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@desc</span>   工具类的入口方法</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@params</span> [context, toastType, showLocation, stringId, num] void</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@date</span>   2023/3/17 14:20</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showToast</span><span class="hljs-params">(Context context, <span class="hljs-type">int</span> toastType, <span class="hljs-type">int</span> showLocation, String stringId, <span class="hljs-type">int</span> num)</span> &#123;<br>        cancelAll();<br>        <span class="hljs-type">CustomToast</span> <span class="hljs-variable">customToast</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomToast</span>(context, toastType, showLocation);<br>        toastList.add(customToast);<br>        showMyToast(customToast, stringId, num);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消所有的toast</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!toastList.isEmpty()) &#123;<br>            <span class="hljs-keyword">for</span> (CustomToast customToast : toastList) &#123;<br>                customToast.cancel();<br>            &#125;<br>            toastList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span>  控制显示toast的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> customToast toast对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stringId 显示的文字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> countNum 显示的时间（不能超过3.5s）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMyToast</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CustomToast customToast, String stringId, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> countNum)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                customToast.setToastText(stringId);<br>                customToast.show();<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>().schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                customToast.cancel();<br>                timer.cancel();<br>            &#125;<br>        &#125;, countNum);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@desc</span> 构造一个toast对象</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span> luxi</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@date</span> 2023/3/17 14:25</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomToast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Toast</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TextView mToastText;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Context mContext;<br><br>        <span class="hljs-comment">//显示toast的样式，这里有两种</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHORT_VIEW</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LONG_VIEW</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//显示toast的位置</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHOW_TOP</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHOW_BOTTOM</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHOW_CENTER</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> context      上下文</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> toastType    toast的样式（长）（短）</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> showLocation toast显示的位置（top，center，bottom）</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomToast</span><span class="hljs-params">(Context context, <span class="hljs-type">int</span> toastType, <span class="hljs-type">int</span> showLocation)</span> &#123;<br>            <span class="hljs-built_in">super</span>(context);<br>            mContext = context;<br>            View view;<br>            <span class="hljs-keyword">if</span> (toastType == SHORT_VIEW) &#123;<br>                view = LayoutInflater.from(mContext).inflate(R.layout.shoot_toast, <span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                view = LayoutInflater.from(mContext).inflate(R.layout.long_toast, <span class="hljs-literal">null</span>);<br>            &#125;<br>            mToastText = (TextView) view.findViewById(R.id.toast);<br><br>            <span class="hljs-comment">//toast显示的位置</span><br>            <span class="hljs-keyword">switch</span> (showLocation) &#123;<br>                <span class="hljs-keyword">case</span> SHOW_TOP:<br>                    setGravity(Gravity.TOP, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> SHOW_BOTTOM:<br>                    setGravity(Gravity.BOTTOM, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> SHOW_CENTER:<br>                    setGravity(Gravity.CENTER, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            setView(view);<br>        &#125;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设置显示文字</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> text 显示的文字</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setToastText</span><span class="hljs-params">(String text)</span> &#123;<br>            mToastText.setText(text);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面基本实现了对Toast的一些自定义，但是也存在一些问题，AS提示<code>使用ScheduledExecutorService代替Timer吧</code></p><p>原因：Timer不支持并发。</p><p>Timer不支持多线程。全部挂在Timer下的任务都是单线程的，任务仅仅能串行运行。假设当中一个任务运行时间过长。会影响到其它任务的运行，然后就可能会有各种接踵而来的问题。如果重开一个Timer？难道要为全部的耗时的Task都单开一个Timer。显然是不太可能。这样就太乱了。<br>Timer的线程不捕获异常。TimerTask假设抛出异常，那么Timer唯一的进程就会挂掉，这样挂在Timer下的全部任务都会无法继续运行</p><p>为了弥补Timer的缺陷，jdk1.5中引入了并发包。这里面提供的ScheduledExecutorService。详细实现类是：ScheduledThreadPoolExecutor。ScheduledThreadPoolExecutor支持多线程。同一时候在线程中对异常进行了捕获。所以是Timer的完美替换者。</p><p>后续我会尝试使用ScheduledThreadPoolExecutor对这个工具类 进行优化</p><h2 id="布局文件："><a href="#布局文件：" class="headerlink" title="布局文件："></a>布局文件：</h2><h3 id="short-toast-xml"><a href="#short-toast-xml" class="headerlink" title="short_toast.xml"></a>short_toast.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/toast&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;157dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;75dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/teal_700&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;短提示&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#fff&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="long-toast-xml"><a href="#long-toast-xml" class="headerlink" title="long_toast.xml"></a>long_toast.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/toast&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;320dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;99dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/teal_700&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;长提示&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#fff&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
      <category>工具类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AS的快捷键</title>
    <link href="/2023/03/16/AS%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2023/03/16/AS%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="AS快捷键"><a href="#AS快捷键" class="headerlink" title="AS快捷键"></a>AS快捷键</h1><table><thead><tr><th align="center">作用</th><th align="center">快捷键</th><th align="left">注释</th></tr></thead><tbody><tr><td align="center">格式化代码</td><td align="center">Ctrl + Alt + L</td><td align="left"></td></tr><tr><td align="center">隐藏所有面板</td><td align="center">Ctrl + Shift + F12</td><td align="left">切换编辑器铺满整个程序界面，隐藏其他的面板。再次执行该操作，将会回到隐藏前的状态。</td></tr><tr><td align="center">最近访问</td><td align="center">Ctrl + E</td><td align="left">该操作可以得到一个最近访问文件的可搜索的列表。</td></tr><tr><td align="center">最近修改的文件</td><td align="center">Ctrl + Shift + E</td><td align="left">该操作类似于“最近访问（Recents）”弹窗，会显示最近本地修改过的文件列表，根据修改时间排列。可以输入字符来过滤列表结果。</td></tr><tr><td align="center">清除无效包引用</td><td align="center">Alt + Ctrl + O</td><td align="left"></td></tr><tr><td align="center">查找</td><td align="center">Ctrl + F</td><td align="left"></td></tr><tr><td align="center">查找+替换</td><td align="center">Ctrl + R</td><td align="left"></td></tr><tr><td align="center">上下移动代码</td><td align="center">Alt + Shift + Up&#x2F;Down</td><td align="left"></td></tr><tr><td align="center">快速查看定义</td><td align="center">Ctrl + Shift + I</td><td align="left">在不离开当前界面，快速查看其原始定义</td></tr><tr><td align="center">语句补全</td><td align="center">Ctrl + Shift + Enter</td><td align="left">这个方法将会生成缺失的代码来补全语句。补全；) }</td></tr><tr><td align="center">行复制</td><td align="center">Ctrl + D</td><td align="left">复制当前行，并粘贴到下一行，这个操作不会影响剪贴板的内容。这个命令配合移动行快捷键非常有用。</td></tr><tr><td align="center">展开全部代码块</td><td align="center">ctrl+shift+加号</td><td align="left"></td></tr><tr><td align="center">折叠全部代码块</td><td align="center">ctrl+shift+减号</td><td align="left"></td></tr><tr><td align="center">Sublime Text式的多处选择</td><td align="center">Alt + Ｊ</td><td align="left">该操作会识别当前选中字符串，选择下一个同样的字符串，并且添加一个光标。这意味着你可以在同一个文件里拥有多个光标，你可以同时在所有光标处输入任何东西。</td></tr><tr><td align="center">切换器</td><td align="center">Ctrl + Tab</td><td align="left">该快捷键基本上就是IDE的alt+tab&#x2F;cmd+tab命令。你可以用它在导航tab或者面板切换。一旦打开这个窗口，只要一直按着ctrl键，你可以通过对应的数字或者字母快捷键快速选择。你也可以通过backspace键来关闭一个已选中的tab或者面板。</td></tr><tr><td align="center">提取方法</td><td align="center">Ctrl + Alt + M</td><td align="left">提取一段代码块，生成一个新的方法。当你发现某个方法里面过于复杂，需要将某一段代码提取成单独的方法时，该技巧是很有用的。</td></tr><tr><td align="center">重命名（Rename）</td><td align="center">Shift + F6</td><td align="left">你可以通过该操作重命名变量、字段、方法、类、包。当然了，该操作会确保重命名对上下文有意义，不会无脑替换掉所有文件中的名字；</td></tr><tr><td align="center">书签（Bookmarks）</td><td align="center">添加&#x2F;移除书签：F11     添加&#x2F;移除书签(带标记)：Ctrl + F11;      显示全部书签：Shift + F11</td><td align="left">这是一个很有用的功能，让你可以在某处做个标记（书签），方便后面再跳转到此处</td></tr><tr><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="center"></td><td align="center"></td><td align="left"></td></tr></tbody></table><p><a href="https://blog.csdn.net/Pandafz1997/article/details/117716771">快速编程法宝之掌握AS和IDEA快捷键</a></p><p><a href="https://blog.csdn.net/lyp13243189027/article/details/52329991">AS快捷键</a></p>]]></content>
    
    
    <categories>
      
      <category>Android Studio工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git基本使用记录(后续日常补充)</title>
    <link href="/2023/03/08/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95-%E5%90%8E%E7%BB%AD%E6%97%A5%E5%B8%B8%E8%A1%A5%E5%85%85/"/>
    <url>/2023/03/08/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95-%E5%90%8E%E7%BB%AD%E6%97%A5%E5%B8%B8%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>学其上，仅得其中；学其中，斯为 下矣</strong></p></blockquote><p>Git官方使用文档：<a href="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2</a></p>]]></content>
    
    
    <categories>
      
      <category>Android Studio工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何生成ssh密钥的详细步骤</title>
    <link href="/2023/03/08/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/03/08/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="git生成ssh密钥详细步骤"><a href="#git生成ssh密钥详细步骤" class="headerlink" title="git生成ssh密钥详细步骤"></a>git生成ssh密钥详细步骤</h1><p>Git是一个开源的分布式版本控制系统，可以高效敏捷的处理任何项目，用于帮助管理Linux内核开发。而生成一个ssh是十分必要的，可以使电脑和code服务器之间建立安全的加密连接。</p><p><strong>git生成ssh密钥详细步骤</strong></p><ol><li>首先右键点击电脑桌面，点击选择”Git Bash Here”，打开git命令窗口;</li></ol><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/772c6c426fde8d660671f89385273fdd.jpg" alt="img"></p><ol start="2"><li>在git命令窗口配置用户，输入命令：**git config –global user.name “blkj”**。其中“blkj”是你自己要填的用户名;</li></ol><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/a32fb223325189a64ee296baf6754a6f.jpg" alt="img"></p><ol start="3"><li>接着进行邮箱配置，输入命令：**git config –global user.email “<a href="mailto:&#98;&#x6c;&#x6b;&#106;&#x40;&#98;&#111;&#114;&#97;&#110;&#x65;&#116;&#46;&#x63;&#x6f;&#109;&#46;&#x63;&#110;">&#98;&#x6c;&#x6b;&#106;&#x40;&#98;&#111;&#114;&#97;&#110;&#x65;&#116;&#46;&#x63;&#x6f;&#109;&#46;&#x63;&#110;</a>“**。”<a href="mailto:&#x62;&#108;&#107;&#106;&#x40;&#x62;&#x6f;&#x72;&#x61;&#x6e;&#x65;&#x74;&#46;&#x63;&#x6f;&#x6d;&#46;&#99;&#x6e;">&#x62;&#108;&#107;&#106;&#x40;&#x62;&#x6f;&#x72;&#x61;&#x6e;&#x65;&#x74;&#46;&#x63;&#x6f;&#x6d;&#46;&#99;&#x6e;</a>“就是填入你自己的邮箱地址;</li></ol><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/56fbe9631fe2d39fc2f158efac3f5cdf.jpg" alt="img"></p><ol start="4"><li>此时在C:\Users\Administrator目录下会生成.gitconfig配置文件，这个文件不能删除;</li></ol><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/0f9649cc65fd967dad97fa910da18955.jpg" alt="img"></p><p>5 .接着查看.gitconfig配置文件里的内容;</p><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/614bff258932c63b103320419fbc5ff6.png" alt="img"></p><ol start="6"><li>继续在git命令窗口中输入命令：**ssh-keygen -t rsa -C “<a href="mailto:&#x62;&#108;&#107;&#106;&#x40;&#98;&#111;&#x72;&#97;&#x6e;&#x65;&#116;&#46;&#99;&#x6f;&#109;&#46;&#x63;&#x6e;">&#x62;&#108;&#107;&#106;&#x40;&#98;&#111;&#x72;&#97;&#x6e;&#x65;&#116;&#46;&#99;&#x6f;&#109;&#46;&#x63;&#x6e;</a>“**，就可以生成SSH公钥和私钥了;</li></ol><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/7435b94073ca51bc370191e583edcc7d.jpg" alt="img"></p><ol start="7"><li>进入C:\Users\Administrator.ssh目录，查看生成的SSH密钥;</li></ol><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/dfb8a34dae9a13e0ed3307671942cb74.jpg" alt="img"></p><p>8 .在git命令窗口中输入命令：<strong>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</strong>，就能查看公钥和私钥了。</p><p><img src="/../imgs/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/3270f60eb0cc1827c8c12d69366f0848.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Android Studio工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Application的使用</title>
    <link href="/2023/03/03/Application%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/03/Application%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Application类"><a href="#Application类" class="headerlink" title="Application类"></a>Application类</h1><p>首先我们应该明白Application类的作用，这是一个Android框架内置的一个系统组件，类似于Activity、service。</p><p><strong>应用场景</strong>：我们可以通过继承Application的来实现应用程序层面的全局变量。</p><ol><li>每个app默认有且只有一个Application实例，如果我们没有写一个Application子类来继承他，app就会创建一个默认的实例。</li><li>我们启动Application时候会创建一个进程ID，所有的activity都会在这个进程上运行。如果我们在Application里面初始化了全局变量，那么所有的Activty都可以很容易的获取到这些全局变量的值。</li><li>Application的生命周期和App的生命周期是一致的，是一个天生的单例模式。</li><li>Android程序的入口。开启app时候，首先就是实例化Application，然后才是Actvivty、service等。</li></ol><h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span>方法<br></code></pre></td></tr></table></figure><p>　　在Application创建的时候调用，一般用于初始化一些东西，如全局的对象，环境的配置等。oncreate()方法才是整个app的入口点。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">onConfigurationChanged</span><span class="hljs-params">(Configuration newConfig)</span></span>方法<br></code></pre></td></tr></table></figure><p>　　重写此方法可以监听APP一些配置信息的改变事件（如屏幕旋转等），当配置信息改变的时候会调用这个方法。在Manifest文件下的Activity标签（注意是Activity）里配置android:configChanges属性相应的配置属性，会使Activity在配置改变时候不会重启，只会执行onConfigurationChanged()方法。如：android:configChanges&#x3D;”keyboardHidden|orientation|screenSize”属性可以使Activity旋转时不重启。</p><h2 id="Application类的使用"><a href="#Application类的使用" class="headerlink" title="Application类的使用"></a>Application类的使用</h2><p>　　要使用自定义的Application，首先就是要自己新建一个Application的子类，然后把它的名字写在manifest文件里面的application标签里的android:name属性就行，如我的Application子类名字是BaseApplication，则：</p><pre><code class="hljs"> android:name=&quot;.BaseApplication&quot;</code></pre><ol><li><p>初始化资源<br>由于Application类是在APP启动的时候就启动，启动在所有Activity之前，所以可以使用它做资源的初始化操作，如图片资源初始化，WebView的预加载，推送服务的注册等等，注意不要执行耗时操作，会拖慢APP启动速度。</p></li><li><p>数据全局共享<br>可以设置一些全局的共享常量，如一些TAG，枚举值等。<br>可以设置一些全局使用的共享变量数据，如一个全局的Handler等等，但是要注意，这里缓存的变量数据的作用周期只在APP的生命周期，如果APP因为内存不足而结束的话，再开启这些数据就会消失，所以这里只能存储一些不重要的数据来使数据全APP共享，想要储存重要数据的话需要SharePreference、数据库或者文件存储等这些本地存储。<br>可以设置一些静态方法来让其他类调用，来使用Application里面的全局变量，如实现APP一键退出功能时候会用到。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>事件处理机制</title>
    <link href="/2023/03/03/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/03/03/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="基于回调的事件处理机制"><a href="#基于回调的事件处理机制" class="headerlink" title="基于回调的事件处理机制"></a>基于回调的事件处理机制</h2><p>就是老板给了任务让工人完成，工人完成之后需要向老板汇报，这个给的任务是抽象的，具体非分配到每个工人身上的任务不相同，但是工人完成之后都需要向老板汇报，这就是回调。</p><p>老板给出的任务是抽象的，所以应该是一个接口或者抽象类，我们需要对他进行实现，分成具体的任务，工人和老板是两个对象，老板里面需要收到工人完工的消息，工人需要告诉老板任务完成了，所以工人需要调用老板里面的方法。</p><p>老板是客户端，提出要求，工人是服务端，完成需求，完成之后告诉老板。</p><p><img src="/../imgs/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/152630_7Yke_2971691.png" alt="img"></p><p>除了我们子自定义的回调函数，Android里面还存在系统定义的回调函数，生命周期里面的函数都是回调函数，触摸事件也是回调函数，我们重写的方法就是回调方法，我们是客户端，系统是服务端，可以理解为：我告诉系统如果有人摸你，你就告诉我，我这边有相应的处理办法，现在真的有人摸了，然后系统就调用你写的处理方法了。</p><ul><li><h2 id="基于监听的事件处理机制"><a href="#基于监听的事件处理机制" class="headerlink" title="基于监听的事件处理机制"></a>基于监听的事件处理机制</h2><p>我认为基于监听事件的处理机制，就是给用户的每一个可操作控件增加一个监听器，当这个控件的状态发生变化之后，监听器就会针对这个变化，给出相应的处理方法。</p><p>这是一种委派式的处理机制，事件本身不去处理，而是将处理委托给监听器。</p><p>我们对于事件源的监听，有5种方法。</p><p>一种就是匿名内部类，我认为一般是在控件较少的情况下使用，它无法复用，临时使用。</p><p>一种是内部类的方式，我们定义一个内部类来实现view.OnclickListener，重写onclick方法。那么这个类就是一个监听器，我们可以在这个类里面写处理方法，当某个控件需要相应的处理方法时候，我们只需要将事件和监听器（内部类）绑定起来。</p><p>一种是外部类的方式，我感觉应该是不建议使用的，它是定义一个类来实现OnClickListener，外部类不能够直接访问活动里面的控件，所以我们就必须通过构造方法将组件传入，这样会让代码不够简洁。感觉外部类和内部类非常相似，但是因为外部类不能直接访问活动里面控件的缘故，我觉得内部类使用更加方便。</p><p>一种是在活动上绑定监听器，我们直接在活动上实现事件监听器，重写里面的方法，然后使用时，直接set····（this）就可以了。我认为这是使用起来最简洁的方法。</p><p>一种是绑定到标签上，在xml的布局文件里面，有一个onClick标签，我们直接给他赋值，然后在活动里面创建一个以这个值为名字的方法，在里面实现监听事件。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android基础知识_1</title>
    <link href="/2023/03/03/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-1/"/>
    <url>/2023/03/03/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Android基础"><a href="#Android基础" class="headerlink" title="Android基础"></a>Android基础</h1><p>Android的sdk并不完善的地方，谷歌所以推出了一些开源库来支持开发，之所以不合并到sdk里面，一是sdk追求稳定性，版本更新时间一般也比较长，一些频繁更新和迭代的特性不方便放到sdk里面。二是为了向后兼容。</p><p>AndroidX是谷歌提供的新的Android支持库，代替了原来的Android Support Library。AndroidX里面包括了Jetpack</p><p>库，而且androidX会一直持续更新。</p><p>什么是Jetpack</p><p>​Jetpack是一个由多个库组成的套件，可以帮助开发者遵循最佳的做法，减少样板代码并编写各种Android版本和设备中一致运行的代码，让开发者可以将精力集中于真正的编码工作。</p><p>我们为什么要使用Jetpack库呢？</p><ul><li><p>遵循最佳的做法</p></li><li><p>消除样板代码</p></li><li><p>减少不一致</p></li></ul><p><img src="/../imgs/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-1/20201119163449404.png" alt="img"></p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LiveData的原理和使用</title>
    <link href="/2023/03/03/LiveData%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/03/LiveData%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Livedata是什么？它的作用是什么？我们能用它来干什么？"><a href="#Livedata是什么？它的作用是什么？我们能用它来干什么？" class="headerlink" title="Livedata是什么？它的作用是什么？我们能用它来干什么？"></a>Livedata是什么？它的作用是什么？我们能用它来干什么？</h2><p>首先，LiveData是一种可观察的数据存储类。这句话可以看成两个部分，一个是可观察的类，另一个是数据存储的类。</p><ul><li>LiveData 是可以被观察的， 但是与常规的可观察类不同，Livadata具有感知生命周期的能力。意指它遵循其他应用组件（如 activity、fragment 或 service）的生命周期。有这种感知能力的LiveData ，只会通知活跃生命周期状态的应用组件观察者。</li><li>LiveData是用来存储数据的，这是它最直接的作用。当LiveData的数据发生变化的时候，就会通知应用组建的观察者。</li></ul><p>Observe类的生命周期处于Start或者Resumed状态时候，LiveData就认为Observe类处于活跃状态。也就是说LiveData只会通知活跃的观察者，也就是说处于其他生命周期的观察者，即使LiveData发生了变化，也不会收到通知。这样的好处是避免了内存泄露。</p><h2 id="LiveData的优势："><a href="#LiveData的优势：" class="headerlink" title="LiveData的优势："></a>LiveData的优势：</h2><ol><li>确保界面符合数据状态</li><li>不会发生内存泄漏</li><li>不会因 Activity 停止而导致崩溃</li><li>不再需要手动处理生命周期</li><li>数据始终保持最新状态</li><li>适当的配置更改</li><li>共享资源</li></ol><h2 id="LIveData的使用："><a href="#LIveData的使用：" class="headerlink" title="LIveData的使用："></a>LIveData的使用：</h2><ol><li>创建LiveData实例，用来存储某种类型的数据。我们通常在ViewModel中完成。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameViewModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ViewModel</span> &#123;<br><span class="hljs-comment">// Create a LiveData with a String</span><br><span class="hljs-keyword">private</span> MutableLiveData&lt;String&gt; currentName;<br><br>    <span class="hljs-keyword">public</span> MutableLiveData&lt;String&gt; <span class="hljs-title function_">getCurrentName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//有一个判空</span><br>        <span class="hljs-keyword">if</span> (currentName == <span class="hljs-literal">null</span>) &#123;<br>            currentName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutableLiveData</span>&lt;String&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> currentName;<br>    &#125;<br><span class="hljs-comment">// Rest of the ViewModel...</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>我们使用LiveData的方式主要有两种。<ul><li>一种是继承LiveData的子类MutableLIveData。因为LiveData是一个抽象类，我们不能直接继承，所以我们只能继承他的子类。</li><li>一种是创建可定义 onChanged() 方法的 Observer 对象，该方法可以控制当 LiveData 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 activity 或 fragment）中创建 Observer 对象。</li></ul></li><li>使用 observe() 方法将 Observer 对象附加到 LiveData 对象。observe() 方法会采用 LifecycleOwner 对象。这样会使 Observer 对象订阅 LiveData 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 activity 或 fragment）中附加 Observer 对象。</li></ol><h2 id="LiveData的部分源码分析"><a href="#LiveData的部分源码分析" class="headerlink" title="LiveData的部分源码分析"></a>LiveData的部分源码分析</h2><h3 id="MutableLiveData对外公开数据更新"><a href="#MutableLiveData对外公开数据更新" class="headerlink" title="MutableLiveData对外公开数据更新"></a>MutableLiveData对外公开数据更新</h3><p>LiveData的子类MutableLiveData，是我们可以直接使用的子类。在LiveData 里面没有公开的方法来更新存储的数据，但是在MutableLiveData中给我们提供了两个修改LiveData对象值的方法：setValue(T)和postValue(T)。同样这个两个方法也是重写了LiveData里面的方法。这两个方法分别适用在不同的线程里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> androidx.lifecycle;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> LiveData&#125; which publicly exposes &#123;<span class="hljs-doctag">@link</span> #setValue(T)&#125; and &#123;<span class="hljs-doctag">@link</span> #postValue(T)&#125; method.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; The type of data hold by this instance</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutableLiveData</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiveData</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a MutableLiveData initialized with the given &#123;<span class="hljs-doctag">@code</span> value&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value initial value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MutableLiveData</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">super</span>(value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a MutableLiveData with no value assigned to it.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MutableLiveData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果有活动的观察者，值将被发送给他们。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 新值</span><br><span class="hljs-comment"> * 只能在主线程调用</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postValue</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.postValue(value);<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果有活动的观察者，值将被发送给他们。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 新值</span><br><span class="hljs-comment"> * 只能在子线程调用</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.setValue(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="observe订阅源码分析"><a href="#observe订阅源码分析" class="headerlink" title="observe订阅源码分析"></a>observe订阅源码分析</h3><p>obeserve订阅有两个方法。一个感知生命周期observe（），一个不感知生命周期observeForever（）。</p><p>注册observe的方法需要传入两个参数，分别是生命周期的拥有者（一般是Activity、Fragment、Service）接收事件的观察者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">observe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LifecycleOwner owner, <span class="hljs-meta">@NonNull</span> Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;observe&quot;</span>);<br>    <span class="hljs-keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;<br>        <span class="hljs-comment">// ignore</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">LifecycleBoundObserver</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifecycleBoundObserver</span>(owner, observer);<br>    <span class="hljs-type">ObserverWrapper</span> <span class="hljs-variable">existing</span> <span class="hljs-operator">=</span> mObservers.putIfAbsent(observer, wrapper);<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot add the same observer&quot;</span><br>                + <span class="hljs-string">&quot; with different lifecycles&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    owner.getLifecycle().addObserver(wrapper);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们逐句分析：</p><ol><li>这个方法执行必须在主线程，否则抛出异常。</li><li>生命周期的拥有者不能是destoryed状态，否则结束方法。或者说忽视订阅请求</li><li>对生命周期的拥有者lifecycleOwner和事件的观察者observer进行包装注册成一个LifecycleBoundObserver对象，这就是为什么LiveData能够感知生命周期的原因。</li><li>封包和观察者必须是对应的，一个观察者不能同时观察多个生命周期。但是一个生命周期可以绑定多个观察者</li><li>添加观察者，这里可以很清楚的看到，添加的观察者是wrapper，而不是我们传入的observer参数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">observeForever</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;observeForever&quot;</span>);<br>    <span class="hljs-type">AlwaysActiveObserver</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlwaysActiveObserver</span>(observer);<br>    <span class="hljs-type">ObserverWrapper</span> <span class="hljs-variable">existing</span> <span class="hljs-operator">=</span> mObservers.putIfAbsent(observer, wrapper);<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span> &amp;&amp; existing <span class="hljs-keyword">instanceof</span> LiveData.LifecycleBoundObserver) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot add the same observer&quot;</span><br>                + <span class="hljs-string">&quot; with different lifecycles&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (existing != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    wrapper.activeStateChanged(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：这个方法创建的观察者，会永远收到数据变化的回调，在组件销毁时，需要用户手动的removObserver（）。</p><p>逐句分析：</p><ol><li><p>这里我们只传入了我们想设定的observer。没有传入生命周期的拥有者。</p></li><li><p>将observer包装成AlwaysActiviteObserver实例。同样wrapper和observer是对应的，如果已经添加到了LIveData，那么就抛出异常。</p></li><li><p>activeStateChanged（）方法传入true。将观察者立刻设置成活动态。它会一直保持在活动态，这就是他一直收到数据变化回调的秘诀。</p></li></ol><h3 id="observe移除源码"><a href="#observe移除源码" class="headerlink" title="observe移除源码"></a>observe移除源码</h3><p>LiveData提供的observe移除方法也有两种，一种是移除removeObserve（）方法传入的观察者。另一种是移除removeObserve（）方法传入的生命周期拥有者，这样就会直接移除该生命周期所有绑定的观察者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;removeObserver&quot;</span>);<br>    <span class="hljs-type">ObserverWrapper</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> mObservers.remove(observer);<br>    <span class="hljs-keyword">if</span> (removed == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    removed.detachObserver();<br>    removed.activeStateChanged(<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>源码分析：</p><ol><li>判断主线程</li><li>分离观察者和生命周期拥有者</li><li>将观察者的一直设置成不活动态。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span><br><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObservers</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> LifecycleOwner owner)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;removeObservers&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Observer&lt;? <span class="hljs-built_in">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;<br>        <span class="hljs-keyword">if</span> (entry.getValue().isAttachedTo(owner)) &#123;<br>            removeObserver(entry.getKey());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里明显进行了一次遍历，逐一调用移除单个Observe的方法。</p><h3 id="LIfecycleBoundObserverl-类-和-AlwaysActiveObserver-类"><a href="#LIfecycleBoundObserverl-类-和-AlwaysActiveObserver-类" class="headerlink" title="LIfecycleBoundObserverl 类 和 AlwaysActiveObserver 类"></a>LIfecycleBoundObserverl 类 和 AlwaysActiveObserver 类</h3><p>这两个类就是上面我们包装形成wrapper，他们都继承了ObserWrapper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LifecycleBoundObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObserverWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenericLifecycleObserver</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">final</span> LifecycleOwner mOwner;<br><br>    LifecycleBoundObserver(<span class="hljs-meta">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer) &#123;<br>        <span class="hljs-built_in">super</span>(observer);<br>        mOwner = owner;<br>    &#125;<br><span class="hljs-comment">//活动态，返回true</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldBeActive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStateChanged</span><span class="hljs-params">(LifecycleOwner source, Lifecycle.Event event)</span> &#123;<br>        <span class="hljs-keyword">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;<br>            removeObserver(mObserver);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        activeStateChanged(shouldBeActive());<br>    &#125;<br><span class="hljs-comment">//判断当前的owner是绑定的owner</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAttachedTo</span><span class="hljs-params">(LifecycleOwner owner)</span> &#123;<br>        <span class="hljs-keyword">return</span> mOwner == owner;<br>    &#125;<br><span class="hljs-comment">//分离观察者和生命周期拥有者</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">detachObserver</span><span class="hljs-params">()</span> &#123;<br>        mOwner.getLifecycle().removeObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LifecycleBoundObserver类里面的方法都是继承ObserverWrapper抽象类或者实现GenericLifecycleObserver接口的方法。实现GenericLifecycleObserver的onStateChanged（）方法是LiveData能够观察生命周期的原因，而且使用LiveData不会发生内存泄露，当生命周期处于destoryed状态时候，会移除Observe。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlwaysActiveObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObserverWrapper</span> &#123;<br><br>    AlwaysActiveObserver(Observer&lt;? <span class="hljs-built_in">super</span> T&gt; observer) &#123;<br>        <span class="hljs-built_in">super</span>(observer);<br>    &#125;<br><span class="hljs-comment">//这里默认返回true，观察者一直收到回调</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldBeActive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LiveData里面的postValue-和-setValue分析"><a href="#LiveData里面的postValue-和-setValue分析" class="headerlink" title="LiveData里面的postValue 和 setValue分析"></a>LiveData里面的postValue 和 setValue分析</h3><p>这两个方法是用来更新数据的，使用postValue 和 setValue传递数据，在onChange（）方法里面传入数据参数，进行更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子线程</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postValue</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-type">boolean</span> postTask;<br>    <span class="hljs-keyword">synchronized</span> (mDataLock) &#123;<br>        postTask = mPendingData == NOT_SET;<br>        mPendingData = value;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!postTask) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);<br>&#125;<br></code></pre></td></tr></table></figure><p>我没有贴全部的代码。<code>ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</code>很显然这个是把数据又传递回主线程，在主线程中，又会调用setValue（）方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//主线程</span><br><span class="hljs-meta">@MainThread</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>    assertMainThread(<span class="hljs-string">&quot;setValue&quot;</span>);<br>    mVersion++;<br>    mData = value;<br>    dispatchingValue(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程检查，赋值，分发的操作，主要的逻辑在dispatchingValue（）方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Object</span> <span class="hljs-variable">mData</span> <span class="hljs-operator">=</span> NOT_SET;<br></code></pre></td></tr></table></figure><p>这里需要提一个很重要的变量mData，存放数据的变量，可以看到它可以接受Object类型的数据，而且他是volatile类型，对于这个类型的变量，编译器会直接从原始的内存地址进行存取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jAVA"><span class="hljs-meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="hljs-comment">/* synthetic access */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatchingValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ObserverWrapper initiator)</span> &#123;<br><span class="hljs-comment">// mDispatchingValue的判断主要是为了解决并发调用dispatchingValue的情况</span><br><span class="hljs-comment">// 当对应数据的观察者在执行的过程中, 如有新的数据变更, 则不会再次通知到观察者。所以观察者内的执行不应进行耗时工作</span><br>    <span class="hljs-keyword">if</span> (mDispatchingValue) &#123;<br>        <span class="hljs-comment">//标记当前分发无效</span><br>        mDispatchInvalidated = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//标记正在分发</span><br>    mDispatchingValue = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        mDispatchInvalidated = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (initiator != <span class="hljs-literal">null</span>) &#123;<br>            considerNotify(initiator);<br>            initiator = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="hljs-built_in">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =<br>                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;<br>                considerNotify(iterator.next().getValue());<br>                <span class="hljs-keyword">if</span> (mDispatchInvalidated) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (mDispatchInvalidated);<br>    mDispatching<br></code></pre></td></tr></table></figure><p>确实很复杂，但是我们只需要理解它最终是调用了considerNotify（）方法来分发我们的mData。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">considerNotify</span><span class="hljs-params">(ObserverWrapper observer)</span> &#123;<br>    <span class="hljs-comment">//检查活跃状态</span><br>    <span class="hljs-keyword">if</span> (!observer.mActive) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// we still first check observer.active to keep it as the entrance for events. So even if</span><br>    <span class="hljs-comment">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span><br>    <span class="hljs-comment">// notify for a more predictable notification order.</span><br>    <span class="hljs-keyword">if</span> (!observer.shouldBeActive()) &#123;<br>        observer.activeStateChanged(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//检查版本号</span><br>    <span class="hljs-comment">//每次setValue，version都会加一，当它超过我们的预设版本后，直接返回，防止我们多次调用onChange方法。</span><br>    <span class="hljs-keyword">if</span> (observer.mLastVersion &gt;= mVersion) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    observer.mLastVersion = mVersion;<br>    <span class="hljs-comment">//noinspection unchecked</span><br>    observer.mObserver.onChanged((T) mData);<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的onChange（）方法相当眼熟啊！这里收到了mData变量。</p><h2 id="自定义LiveData时候会使用的方法："><a href="#自定义LiveData时候会使用的方法：" class="headerlink" title="自定义LiveData时候会使用的方法："></a>自定义LiveData时候会使用的方法：</h2><p>void onActive ()<br>Called when the number of active observers change to 1 from 0.<br>This callback can be used to know that this LiveData is being used thus should be kept up to date.</p><p>当这个方法被调用时，表示LiveData的观察者数量从0变为了1，这时就我们的位置监听来说，就应该注册我们的时间监听了。</p><p>void onInactive ()<br>Called when the number of active observers change from 1 to 0.<br>This does not mean that there are no observers left, there may still be observers but their lifecycle states aren’t STARTED or RESUMED (like an Activity in the back stack).<br>You can check if there are observers via hasObservers().</p><p>这个方法被调用时，表示LiveData的观察者数量变为了0，既然没有了观察者，也就没有理由再做监听，此时我们就应该将位置监听移除</p><h2 id="LiveData-数据监听机制流程图"><a href="#LiveData-数据监听机制流程图" class="headerlink" title="LiveData 数据监听机制流程图"></a>LiveData 数据监听机制流程图</h2><p><img src="/../imgs/LiveData%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATGVlU3R1ZGlvXw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Activity和fragment之间的方法调用</title>
    <link href="/2023/03/01/Activity%E5%92%8Cfragment%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/"/>
    <url>/2023/03/01/Activity%E5%92%8Cfragment%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Fragment调用Activity具体方法"><a href="#1-Fragment调用Activity具体方法" class="headerlink" title="1.Fragment调用Activity具体方法"></a>1.Fragment调用Activity具体方法</h3><p> 在xxxActivity里面有一个方法xxMethod()，在xxxFragment里面调用：</p><h5 id="一：直接调用："><a href="#一：直接调用：" class="headerlink" title="一：直接调用："></a>一：直接调用：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">xxxActivity activity= (xxxActivity) getActivity();<br>activity.test();<br></code></pre></td></tr></table></figure><p>我们需要重写onAttach（）方法，在里面获取activity实例，重点：<strong>强转</strong></p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttach</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Context context)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onAttach(context);<br>    mContext = context;<br>    <span class="hljs-comment">//可以调用activity里面方法</span><br>    mMainActivityView = (MainActivity) getActivity();<br>    Log.i(TAG, <span class="hljs-string">&quot;onAttach: 将碎片和活动建立关联&quot;</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="二：接口回调："><a href="#二：接口回调：" class="headerlink" title="二：接口回调："></a>二：接口回调：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">  xxxFragment里面定义接口<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">xxxInterface</span>&#123;<br>  <br>         <span class="hljs-keyword">void</span> <span class="hljs-title function_">getXXXMethodForActivity</span><span class="hljs-params">()</span>;<br><br>  &#125;<br><br>  让xxxActivity实现xxxInterface接口，实现getXXXMethodForActivity方法，在里面TODO:做你的逻辑；然后在xxxFragment里面调用该方法：<br><br><span class="hljs-keyword">if</span>(getActivity()<span class="hljs-keyword">instanceof</span> xxxInterface)&#123;<br><br> ((xxxInterface)getActivity()).getXXXMethodForActivity();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><ol><li><p>我们在fragment里面定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">showMsg</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showToastMsg</span><span class="hljs-params">(String msg)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>让activity实现接口，实现方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showToastMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>    ToastUtils.showToast(MainActivity.<span class="hljs-built_in">this</span>, ToastUtils.CustomToast.SHORT_VIEW, ToastUtils.CustomToast.SHOW_BOTTOM, msg, <span class="hljs-number">2000</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (getActivity()<span class="hljs-keyword">instanceof</span> showMsg)&#123;<br>    ((showMsg) getActivity()).showToastMsg(<span class="hljs-string">&quot;图片的名字:&quot;</span> + item.getName());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-Activity调用Fragment具体方法"><a href="#2-Activity调用Fragment具体方法" class="headerlink" title="2.Activity调用Fragment具体方法"></a>2.Activity调用Fragment具体方法</h3><p>我们直接获取fragment的实例即可。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Fragment fragment <span class="hljs-operator">=</span> new Fragment()<span class="hljs-comment">;</span><br>fragment.getTitles()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android权限申请</title>
    <link href="/2023/02/28/Android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/"/>
    <url>/2023/02/28/Android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="1-可以在AndroidManifest里面注册的权限："><a href="#1-可以在AndroidManifest里面注册的权限：" class="headerlink" title="1.可以在AndroidManifest里面注册的权限："></a>1.可以在AndroidManifest里面注册的权限：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCEPT_HANDOVER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许呼应用继续在另一个应用中启动的呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用访问后台的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BLOBS_ACROSS_USERS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问跨用户的数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_CHECKIN_PROPERTIES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许阅读/写入检查数据库中的&quot;属性&quot;表，以更改上传的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问大致位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用访问精确位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许程序访问额外的定位提供者指令 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_MEDIA_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问用户共享集合中持续存在的任何地理位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问有关网络的信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NOTIFICATION_POLICY&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 希望访问通知策略的应用程序的标记权限 此权限不支持托管配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序访问有关 Wi-Fi 网络的信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCOUNT_MANAGER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序调用到帐户授权人 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACTIVITY_RECOGNITION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序识别身体活动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ADD_VOICEMAIL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序向系统添加语音信箱 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ANSWER_PHONE_CALLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接听来电 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BATTERY_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序收集电池统计数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_ACCESSIBILITY_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 确保只有系统可以绑定它 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_APPWIDGET&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序告诉AppWidget服务哪些应用程序可以访问AppWidget数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_CARRIER_SERVICES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许与运营商应用中的服务绑定的系统过程将获得此权限 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_COMPANION_DEVICE_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 任何 s 都必须确保只有系统才能与系统结合 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_CONTROLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许系统UI请求第三方控制 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BIND_DEVICE_ADMIN&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 设备管理接收器必须要求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序连接到配对蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_ADMIN&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序发现和配对蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_ADVERTISE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够向附近的蓝牙设备做广告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_CONNECT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够连接到配对蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_PRIVILEGED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在不进行用户交互的情况下对蓝牙设备进行配对，并允许或不允许电话簿访问或消息访问 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BLUETOOTH_SCAN&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够发现和配对附近的蓝牙设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BODY_SENSORS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序从用户用来测量体内发生的情况（如心率）的传感器访问数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_PACKAGE_REMOVED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播已删除应用程序包的通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播短信收据通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_STICKY&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播粘性意图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.BROADCAST_WAP_PUSH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播 WAP 推送接收通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_COMPANION_APP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许实现 API 的应用有资格作为呼叫伴侣应用启用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_PHONE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序启动电话呼叫，而无需通过拨号器用户界面，以便用户确认呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_PRIVILEGED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序拨打任何电话号码（包括紧急号码），而无需通过 Dialer 用户界面为用户确认已放置的呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够访问摄像机设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAPTURE_AUDIO_OUTPUT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序捕获音频输出 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_COMPONENT_ENABLED_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更改应用程序组件（其自身除外）是否启用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_CONFIGURATION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改当前配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更改网络连接状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_WIFI_MULTICAST_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序进入 Wi-Fi 多播模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更改 Wi-Fi 连接状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CLEAR_APP_CACHE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序清除设备上所有已安装应用程序的缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CONTROL_LOCATION_UPDATES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许启用/禁用来自收音机的位置更新通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DELETE_CACHE_FILES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 删除应用缓存文件的旧权限不再使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DELETE_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序删除包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DIAGNOSTIC&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许将 RW 应用到诊断资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DISABLE_KEYGUARD&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 如果密钥防护系统不安全，允许应用程序禁用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.DUMP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序从系统服务中检索状态转储信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.允许应用程序扩展或折叠状态栏&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- EXPAND_STATUS_BAR --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FACTORY_TEST&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 作为制造商测试应用程序运行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许使用常规应用程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.GET_ACCOUNTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许访问帐户服务中的帐户列表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.GET_PACKAGE_SIZE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序找出任何包所使用的空间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.GLOBAL_SEARCH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 此权限可用于内容提供商，以便全球搜索系统访问其数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.HIDE_OVERLAY_WINDOWS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用在上面绘制非系统覆盖窗口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.HIGH_SAMPLING_RATE_SENSORS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用访问采样率大于 200 Hz 的传感器数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTALL_LOCATION_PROVIDER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序将位置提供商安装到位置管理器中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTALL_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序安装包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTALL_SHORTCUT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在启动器中安装快捷方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INSTANT_APP_FOREGROUND_SERVICE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许即时应用创建前景服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERACT_ACROSS_PROFILES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许在同一配置文件组中跨配置文件进行交互 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序打开网络 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.KILL_BACKGROUND_PROCESSES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序调用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.LOADER_USAGE_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许数据装载机读取包的访问日志。访问日志包含随着时间推移引用的页面集。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.LOCATION_HARDWARE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在硬件中使用位置功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_DOCUMENTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序管理对文档的访问，通常作为文档拾取器的一部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在范围存储中广泛访问外部存储 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_MEDIA&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在未经用户确认的情况下修改和删除此设备或任何连接存储设备上的媒体文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_ONGOING_CALLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许查询持续呼叫详细信息并管理持续呼叫 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MANAGE_OWN_CALLS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许通过自我管理的 API 管理自己的呼叫的呼叫应用程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MEDIA_CONTENT_CONTROL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序知道正在播放的内容并控制其播放 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改全球音频设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MODIFY_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许修改电话状态 - 打开电源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MOUNT_FORMAT_FILESYSTEMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许为可移动存储格式化文件系统 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许安装和卸载文件系统以进行可拆卸存储 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.NFC&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在 NFC 上执行 I/O 操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.NFC_PREFERRED_PAYMENT_INFO&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许申请接收 NFC 首选支付服务信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.NFC_TRANSACTION_EVENT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接收 NFC 交易事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.PACKAGE_USAGE_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序收集组件使用情况统计 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.QUERY_ALL_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许查询设备上的任何正常应用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CALENDAR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取用户的日历数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CALL_LOG&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取用户的通话记录。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CONTACTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取用户的联系人数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序从外部存储中读取 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_LOGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取低级系统日志文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PHONE_NUMBERS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许读取设备的电话号码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 仅允许阅读访问电话状态，包括当前的蜂窝网络信息、任何持续呼叫的状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许阅读访问精确的手机状态 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取短信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_SYNC_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取同步设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_SYNC_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取同步统计数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_VOICEMAIL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在系统中读取语音信箱 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REBOOT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够重新启动设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序在系统完成启动后接收广播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_MMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序监控传入的彩信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接收短信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_WAP_PUSH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序接收 WAP 推送消息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECORD_AUDIO&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序录制音频 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_PROFILE_WATCH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用请求通过&quot;手表&quot;与设备关联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许配套应用在后台运行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许配套应用从后台开始前景服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许配套应用在后台使用数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_DELETE_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序请求删除包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 申请必须持有才能使用的权 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序请求安装包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序订阅有关其关联配套设备的存在状态更改的通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.REQUEST_PASSWORD_COMPLEXITY&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序请求屏幕锁的复杂性，并提示用户将屏幕锁更新到一定的复杂性级别 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SCHEDULE_EXACT_ALARM&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序使用精确的报警 API --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SEND_RESPOND_VIA_MESSAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序 （电话） 向其他应用程序发送请求，以便在来电期间处理响应消息操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SEND_SMS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序发送短信 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_ALARM&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序广播意图为用户设置闹钟 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_ALWAYS_FINISH&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序控制在后台后立即完成活动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_ANIMATION_SCALE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 修改全局动画缩放因子 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_DEBUG_APP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置调试应用程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_PROCESS_LIMIT&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序设置可以运行的最大数量（不需要）应用程序过程 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_TIME&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序直接设置系统时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_TIME_ZONE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序直接设置系统时区 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_WALLPAPER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序设置壁纸 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SET_WALLPAPER_HINTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序设置壁纸提示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SIGNAL_PERSISTENT_PROCESSES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序请求向所有持久性过程发送信号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序随时从后台开始前景服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.START_VIEW_PERMISSION_USAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许持有人启动应用程序的权限使用屏幕 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.STATUS_BAR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序打开、关闭或禁用状态栏及其图标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用使用该类型创建窗口，该类型显示在所有其他应用的顶部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.TRANSMIT_IR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 如果可用，允许使用设备的红外发射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.UPDATE_DEVICE_STATS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序更新设备统计数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.UPDATE_PACKAGES_WITHOUT_USER_ACTION&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序通过该应用程序指示应用更新不需要用户操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.USE_BIOMETRIC&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用使用设备支持的生物识别模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许读取设备标识符并使用基于 ICC 的身份验证（如 EAP-AKA） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.USE_SIP&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序使用 SIP 服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.UWB_RANGING&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 需要能够使用超宽带的设备 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.VIBRATE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许访问振动器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WAKE_LOCK&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许使用电源经理唤醒锁来防止处理器睡觉或屏幕变暗 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_APN_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写 apn 设置并读取现有 apn 设置的敏感字段（如用户和密码） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_CALENDAR&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写用户的日历数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_CALL_LOG&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写（但未读取）用户的呼叫日志数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_CONTACTS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写用户的联系人数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序写入外部存储。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_GSERVICES&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改 Google 服务地图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_SECURE_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取或编写安全系统设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序读取或编写系统设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_SYNC_SETTINGS&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序编写同步设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_VOICEMAIL&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 允许应用程序修改和删除系统中现有的语音信箱 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-动态申请权限"><a href="#2-动态申请权限" class="headerlink" title="2.动态申请权限"></a>2.动态申请权限</h4><ol><li><p>判断是否有权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(<span class="hljs-built_in">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>        != PackageManager.PERMISSION_GRANTED) &#123;<br>    ActivityCompat.requestPermissions(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>申请权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>    <span class="hljs-keyword">if</span> (requestCode == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (grantResults.length != <span class="hljs-number">0</span> &amp;&amp; grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;权限开启成功&quot;</span>, Toast.LENGTH_SHORT).show();<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;权限开启失败&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AS快捷生成类（方法）注释</title>
    <link href="/2023/02/28/AS%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E7%B1%BB%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89%E6%B3%A8%E9%87%8A/"/>
    <url>/2023/02/28/AS%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E7%B1%BB%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="1、自定义类注释"><a href="#1、自定义类注释" class="headerlink" title="1、自定义类注释"></a>1、自定义类注释</h2><ol><li>修改 Settings-&gt;Editor-&gt;File and Code Templates-&gt;Includues-&gt;File Header 文件添加默认类注释。</li></ol><p><img src="/../imgs/AS%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E7%B1%BB%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89%E6%B3%A8%E9%87%8A/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E6%B3%A8%E9%87%8A.png" alt="自定义类注释"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> luxi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span> luxi2@mychery.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="2、自定义方法注释-（参考）"><a href="#2、自定义方法注释-（参考）" class="headerlink" title="2、自定义方法注释 （参考）"></a>2、自定义方法注释 （参考）</h2><ul><li><p>创建Live Templates 选择 <code>Settings -&gt; Editor -&gt; Live Templates</code> ，点击右侧+号，首先新建一个 <code>Template Group</code>。</p></li><li><p>选中刚刚创建的<code>Template Group</code>，再点击+号新建一个 <code>Live Template</code></p></li><li><p>配置注释模板 依次填入以下内容</p><p>Abbreviation(快捷命令) ：doc</p><p>Description(说明) ：注释 </p><p>Template text(模板内容) ：</p><p> <strong>注意模板内容并没有少一个斜杠 &#x2F; ，就是以*号开头</strong></p></li></ul><p><img src="/../imgs/AS%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E7%B1%BB%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89%E6%B3%A8%E9%87%8A/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A.png" alt="自定义方法注释"></p><p>模板内容（方法注释）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less">*<br>* <span class="hljs-variable">@desc</span>   $desc$<br>* <span class="hljs-variable">@params</span> $params$ $return$<br>* <span class="hljs-variable">@author</span> luxi<br>* <span class="hljs-variable">@date</span>   $date$ $time$<br>*/<br></code></pre></td></tr></table></figure><p>模板内容（类注释）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less">*<br>* <span class="hljs-variable">@desc</span> $desc$<br>* <span class="hljs-variable">@author</span> luxi<br>* <span class="hljs-variable">@date</span> $date$ $time$<br>*/<br></code></pre></td></tr></table></figure><ul><li><p>点击下方 Define 按钮，选中 java</p><p><img src="/../imgs/AS%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E7%B1%BB%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89%E6%B3%A8%E9%87%8A/define%E4%BD%8D%E7%BD%AE.png" alt=" Define 按钮位置"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android Studio工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android服务</title>
    <link href="/2023/02/23/Android%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/02/23/Android%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>错误：程序包R不存在</title>
    <link href="/2023/02/23/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85R%E4%B8%8D%E5%AD%98%E5%9C%A8/"/>
    <url>/2023/02/23/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85R%E4%B8%8D%E5%AD%98%E5%9C%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="错误-程序包R不存在”-的解决方法"><a href="#错误-程序包R不存在”-的解决方法" class="headerlink" title="错误: 程序包R不存在” 的解决方法"></a>错误: 程序包R不存在” 的解决方法</h1><p><img src="/imgs/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85R%E4%B8%8D%E5%AD%98%E5%9C%A8/image-20230223165809983.png"></p><p>这种情况一般就是包导错了，或者说：<strong>您引用的R可能与包名不符</strong>。下面总结我的排查过程:</p><ol><li><p>有可能是：导入的包覆盖了真正要引用的R包，首先可以尝试删除你import android.R等这样的导入。然后rebuild project。但是我的项目里面并没有相关的导入。（没有解决我的问题）</p></li><li><p>检查AndroidManifest文件。我发现这里面我项目包的路径是不对的。我将它修改成我正确的包名。（问题还是没有解决，但是系统提示我可以导入相应的import android.R。之前连这样的提示都没有）</p><p><img src="/imgs/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85R%E4%B8%8D%E5%AD%98%E5%9C%A8/image-20230223165930878.png"></p></li><li><p>我又开始检查我的build.gradle文件。我发现还是包名的问题。我的appliactionId不对。他虽然是系统自动生成的，但是他应该是我的包名，可是他是一个错误的包名。</p><p><img src="/imgs/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85R%E4%B8%8D%E5%AD%98%E5%9C%A8/image-20230223165907531-16771445665921.png"></p><p>我经过上面的排查，我的错误成功消失。我认为是我在自己新建的项目上又new Module 导致的。虽然错误很奇怪，但是都是和包名有关系，以后遇到R不存在的错误，应该仔细点去排查包名相关的代码。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo的常见命令</title>
    <link href="/2023/02/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/02/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo的常见命令"><a href="#使用hexo的常见命令" class="headerlink" title="使用hexo的常见命令"></a>使用hexo的常见命令</h1><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 我的博客<br>date: 2023<span class="hljs-string">-02</span><span class="hljs-string">-16</span> 12:19:07<br>categories:<br>- [日常生活]<br><span class="hljs-keyword">tags:</span><br>- 生活<br></code></pre></td></tr></table></figure><p>如果你需要为文章添加多个分类，可以尝试List：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>以下是预先定义的参数:</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr></tbody></table><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">个人博客的教程</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPC 通信原理</title>
    <link href="/2023/02/17/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
    <url>/2023/02/17/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="传统-IPC-通信原理"><a href="#传统-IPC-通信原理" class="headerlink" title="传统 IPC 通信原理"></a>传统 IPC 通信原理</h1><p><strong>在操作系统中，进程与进程间的内存和数据都是不共享的</strong>。这样做的目的，是为了避免进程间相互操作数据的现象发生，从而引起各自的安全问题。为了实现进程隔离，采用了虚拟地址空间，两个进程各自的虚拟地址不同，从逻辑上来实现彼此间的隔离。两个进程之间要进行通信，就需要采用特殊的通信机制：进程间通信（IPC:Inter-Process Communication，即进程间通信或跨进程通信，简称 IPC）。</p><p><img src="https://img-blog.csdnimg.cn/5d182f4b99dc4edfa19e56c9a7ec7aef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="进程间的通信"></p><p>​一个进程空间分为用户空间和内核空间，用户空间是每个进程独有的，而内核空间则是所有进程间共有的。所以虽然不同进程的用户空间之间不能共享数据，但是我们可以通过内核空间来实现数据共享。</p><p>​数据在用户空间和内核空间之间的交互，需要调用系统方法：copy_from_user()和copy_to_user；数据拷贝2次，用户空间—&gt;&gt;内核空间—&gt;&gt;用户空间。</p><p><img src="https://img-blog.csdnimg.cn/1975c44081ee4b00a3f28fb157a3b34c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img"></p><h1 id="Linux跨进程通信"><a href="#Linux跨进程通信" class="headerlink" title="Linux跨进程通信"></a>Linux跨进程通信</h1><p>Android系统就是基于Linux内核实现的，咱们先简单了解一下Linux系统的IPC方式。虽然不同的资料对各种方式的名称和种类说法不完全相同，但是主要来说有如下6种方式：（1）管道 Pipe；（2）信号Signal；（3）信号量Semaphore；（4）消息队列Message Queue；（5）共享内存Shared Memmory；（6）套接字Socket。</p><h1 id="Android跨进程通信"><a href="#Android跨进程通信" class="headerlink" title="Android跨进程通信"></a>Android跨进程通信</h1><p>Android 进程间通信可以通过Android 四大组件实现。</p><h2 id="1、Activity方式"><a href="#1、Activity方式" class="headerlink" title="1、Activity方式"></a>1、Activity方式</h2><p>Activity是四大组件中使用最频繁的，咱们先从它说起。使用Activity方式实现，就是使用startActivity()来启动另外一个进程的Activity。我们在使用App的使用，往往会遇到如下几种情形：</p><p>（1）浏览器中看到一篇比较不错的文章，分享到微信朋友圈或者微博；</p><p>（2）在某个App中点击某个网址，然后界面跳转到浏览器中进行阅读；</p><p>（3）使用美团外卖app，看到店家的电话，点击联系商家时，跳转到了电话拨打界面…</p><p>这些就是通过startActivity的方式从一个App，跳转到了另外一个App的Activity，从而实现了跨进程通信。</p><p>我们知道，在调用startActivity(Intent intent)的时候，intent有两个类型：显式Intent和隐式Intent。</p><p><strong>显式Intent的使用方式如下，用于进程内组件间通信</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,OtherActivity.class);<br>startActivity(intent);<br></code></pre></td></tr></table></figure><p><strong>隐式intent的使用方式如下，用于IPC</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>intent.setAction(Intent.ACTION_CALL);<br>startActivity(intent); <span class="hljs-comment">//startActivityForResult()同样，这里不赘述</span><br><br></code></pre></td></tr></table></figure><p>Intent.ACTION_CALL就是字符串常量“android.intent.action.CALL”，这种方式通过setAction的方式来启动目标app的Activity，上述代码就是启动电话app的拨号界面，有时候还可以带上电话号码等参数。由上可知，Activity实现跨进程通信的方式，适合于不同App之间功能界面的跳转。</p><h2 id="2、Content-provider（后面简称CP）方式"><a href="#2、Content-provider（后面简称CP）方式" class="headerlink" title="2、Content provider（后面简称CP）方式"></a>2、Content provider（后面简称CP）方式</h2><p>当我们开发App需要用到联系人，多媒体信息等数据的时候，往往会通过系统提供Uri，采用CP的方式去获取。Android系统中，数据主要存储在自带的SqlLite数据库中。应用要共享SqlLite中的数据给其他App操作（增、删、改、查），就要用到CP，也就是说，CP主要用于跨进程数据库共享。Android系统提供了很多的CP来供其它App使用，如多媒体信息、联系人、日历等。如下图显示了Android系统提供的CP，包名都是以”com.android.providers“开头的：</p><p>App开发者也可以自定义CP，把自己的数据提供给其它app使用，也可以自己定义操作权限，如只允许其它app读取自己的数据，而不允许修改等。CP的使用场景，是提供数据共享。CP本质上还是在操作数据库，数据存储在sdcard中，所以建立连接和操作数据都是耗时操作，所以注意开辟子线程去操作。当数据库中数据有变化时，Content Observer监听到数据库变化也是有一定的滞后。</p><h2 id="3、Broadcase方式（我们要避免使用这种通信方式）"><a href="#3、Broadcase方式（我们要避免使用这种通信方式）" class="headerlink" title="3、Broadcase方式（我们要避免使用这种通信方式）"></a>3、Broadcase方式（我们要避免使用这种通信方式）</h2><p>Broadcast使用非常简单，注册好广播，添加上action，就可以等着接收其他进程发出的广播。发送和接收广播时，还可以借助Intent来携带数据。但是广播的使用存在很多问题，被很多程序员吐槽，甚至鄙夷，所以选择用广播进行跨进程通信，是下下策。下面盘点一下Broadcast的槽点：</p><ol><li>Broadcast是一种单向的通信方式。当一个程序发送广播后，其他应用只能被动地接收，无法向发送者反馈。</li><li>Broadcast非常消耗系统资源，会导致系统性能下降。</li><li>速度慢，容易造成系统ANR。且除了Parall Broadcast外，无法保证接收到的时间，甚至不一定能收得到。</li><li>如果使用Ordered Broadcast，一个Receiver执行时间过长，会影响后面接收者的接收时间，甚至还有可能被中间某个Receiver拦截，导致后面Receiver无法接收到。</li><li>发送者无法确定谁会接收该广播，而接收者也无发确认是谁发来的广播</li><li>如果是静态注册的广播，一个没有开启的进程，都有可能被该广播激活。</li></ol><h2 id="4、Service方式"><a href="#4、Service方式" class="headerlink" title="4、Service方式"></a><strong>4、Service方式</strong></h2><p>普通的Service并不能实现跨进程操作，我们可以使用AIDL Service、LocalSocket来实现跨进程通信。</p><h2 id="AIDL-Service实现跨进程通信"><a href="#AIDL-Service实现跨进程通信" class="headerlink" title="AIDL Service实现跨进程通信"></a>AIDL Service实现跨进程通信</h2><p>这种方式也是 bindService() 启动方式的一种使用情况，也是广受程序员们推崇的方式。</p><ul><li><strong>如果跨进程需要界面上的交互操作，用隐式startActivity()方式实现。</strong></li><li><strong>如果需要共享数据，用Content Provider方式实现。</strong></li><li><strong>排除前两种情形，就用AIDL。</strong></li></ul><p>我们想要使用AIDL就要了解binder IPC 机制。（属于Android特殊的跨进程通信机制）</p>]]></content>
    
    
    <categories>
      
      <category>Android学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的博客</title>
    <link href="/2023/02/16/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/02/16/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>​今天是我写博客的第一天，忙活了两天，终于搭建好了自己的博客，属于自己的私密空间。期待以后能够每天记录自己的日常。</p>]]></content>
    
    
    <categories>
      
      <category>日常生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
